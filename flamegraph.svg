<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2134" onload="init(evt)" viewBox="0 0 1200 2134" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="2134.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="2117" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="2117" > </text>
<g id="frames">
<g >
<title>lczero::ChessBoard::IsLegalMove (39 samples, 0.73%)</title><rect x="871.3" y="1797" width="8.6" height="15.0" fill="rgb(228,223,16)" rx="2" ry="2" />
<text  x="874.28" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="302.7" y="1781" width="0.3" height="15.0" fill="rgb(205,39,32)" rx="2" ry="2" />
<text  x="305.74" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.04%)</title><rect x="206.8" y="1877" width="0.4" height="15.0" fill="rgb(224,131,17)" rx="2" ry="2" />
<text  x="209.78" y="1887.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (3 samples, 0.06%)</title><rect x="639.9" y="1829" width="0.7" height="15.0" fill="rgb(209,4,10)" rx="2" ry="2" />
<text  x="642.95" y="1839.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="663.3" y="1749" width="0.2" height="15.0" fill="rgb(239,43,19)" rx="2" ry="2" />
<text  x="666.28" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (11 samples, 0.21%)</title><rect x="511.6" y="1829" width="2.4" height="15.0" fill="rgb(214,141,44)" rx="2" ry="2" />
<text  x="514.63" y="1839.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="133.9" y="1813" width="0.2" height="15.0" fill="rgb(249,82,2)" rx="2" ry="2" />
<text  x="136.92" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="376.9" y="1733" width="0.2" height="15.0" fill="rgb(218,191,11)" rx="2" ry="2" />
<text  x="379.92" y="1743.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (11 samples, 0.21%)</title><rect x="624.1" y="1861" width="2.4" height="15.0" fill="rgb(209,99,28)" rx="2" ry="2" />
<text  x="627.10" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (5 samples, 0.09%)</title><rect x="593.7" y="1781" width="1.1" height="15.0" fill="rgb(210,131,25)" rx="2" ry="2" />
<text  x="596.73" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (17 samples, 0.32%)</title><rect x="185.2" y="1845" width="3.7" height="15.0" fill="rgb(223,119,11)" rx="2" ry="2" />
<text  x="188.21" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (3 samples, 0.06%)</title><rect x="897.9" y="1829" width="0.7" height="15.0" fill="rgb(206,198,5)" rx="2" ry="2" />
<text  x="900.92" y="1839.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.04%)</title><rect x="211.4" y="1877" width="0.4" height="15.0" fill="rgb(226,81,45)" rx="2" ry="2" />
<text  x="214.40" y="1887.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (48 samples, 0.90%)</title><rect x="662.0" y="1845" width="10.5" height="15.0" fill="rgb(221,63,1)" rx="2" ry="2" />
<text  x="664.96" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (2 samples, 0.04%)</title><rect x="160.6" y="1829" width="0.4" height="15.0" fill="rgb(220,51,52)" rx="2" ry="2" />
<text  x="163.55" y="1839.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="237.2" y="1829" width="0.8" height="15.0" fill="rgb(207,141,51)" rx="2" ry="2" />
<text  x="240.15" y="1839.5" ></text>
</g>
<g >
<title>CalcPSTScore (1 samples, 0.02%)</title><rect x="641.5" y="1861" width="0.2" height="15.0" fill="rgb(224,148,37)" rx="2" ry="2" />
<text  x="644.49" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="364.4" y="1733" width="0.2" height="15.0" fill="rgb(241,109,5)" rx="2" ry="2" />
<text  x="367.37" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.04%)</title><rect x="207.7" y="1861" width="0.4" height="15.0" fill="rgb(246,8,19)" rx="2" ry="2" />
<text  x="210.66" y="1871.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="443.4" y="1797" width="0.2" height="15.0" fill="rgb(253,172,21)" rx="2" ry="2" />
<text  x="446.39" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="698.1" y="1749" width="0.2" height="15.0" fill="rgb(217,152,18)" rx="2" ry="2" />
<text  x="701.06" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="204.8" y="1893" width="0.2" height="15.0" fill="rgb(232,107,35)" rx="2" ry="2" />
<text  x="207.80" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (37 samples, 0.69%)</title><rect x="1027.3" y="2021" width="8.2" height="15.0" fill="rgb(251,52,21)" rx="2" ry="2" />
<text  x="1030.34" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, unsigned long, true&gt;::_S_equals (5 samples, 0.09%)</title><rect x="493.1" y="1813" width="1.1" height="15.0" fill="rgb(210,74,48)" rx="2" ry="2" />
<text  x="496.14" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (82 samples, 1.53%)</title><rect x="943.9" y="1717" width="18.1" height="15.0" fill="rgb(230,76,54)" rx="2" ry="2" />
<text  x="946.92" y="1727.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="611.8" y="1797" width="0.2" height="15.0" fill="rgb(232,58,43)" rx="2" ry="2" />
<text  x="614.78" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="816.5" y="1797" width="0.2" height="15.0" fill="rgb(219,138,46)" rx="2" ry="2" />
<text  x="819.48" y="1807.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (4 samples, 0.07%)</title><rect x="375.6" y="1813" width="0.9" height="15.0" fill="rgb(208,5,47)" rx="2" ry="2" />
<text  x="378.60" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="302.7" y="1797" width="0.3" height="15.0" fill="rgb(240,59,30)" rx="2" ry="2" />
<text  x="305.74" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (2 samples, 0.04%)</title><rect x="496.9" y="1797" width="0.4" height="15.0" fill="rgb(253,158,50)" rx="2" ry="2" />
<text  x="499.88" y="1807.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="381.5" y="1749" width="0.5" height="15.0" fill="rgb(209,61,52)" rx="2" ry="2" />
<text  x="384.54" y="1759.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="953.2" y="421" width="0.2" height="15.0" fill="rgb(224,216,1)" rx="2" ry="2" />
<text  x="956.16" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="216.7" y="1829" width="0.2" height="15.0" fill="rgb(238,76,15)" rx="2" ry="2" />
<text  x="219.68" y="1839.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (1 samples, 0.02%)</title><rect x="820.9" y="1845" width="0.2" height="15.0" fill="rgb(232,115,32)" rx="2" ry="2" />
<text  x="823.88" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (3 samples, 0.06%)</title><rect x="207.4" y="1909" width="0.7" height="15.0" fill="rgb(239,101,17)" rx="2" ry="2" />
<text  x="210.44" y="1919.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (2 samples, 0.04%)</title><rect x="496.9" y="1781" width="0.4" height="15.0" fill="rgb(251,156,17)" rx="2" ry="2" />
<text  x="499.88" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (23 samples, 0.43%)</title><rect x="514.5" y="1829" width="5.1" height="15.0" fill="rgb(232,198,54)" rx="2" ry="2" />
<text  x="517.49" y="1839.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="666.1" y="1797" width="0.3" height="15.0" fill="rgb(214,61,21)" rx="2" ry="2" />
<text  x="669.14" y="1807.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="882.1" y="1845" width="0.2" height="15.0" fill="rgb(243,77,30)" rx="2" ry="2" />
<text  x="885.07" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="752.0" y="1781" width="0.4" height="15.0" fill="rgb(254,174,31)" rx="2" ry="2" />
<text  x="754.98" y="1791.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="632.7" y="1845" width="0.2" height="15.0" fill="rgb(223,25,18)" rx="2" ry="2" />
<text  x="635.69" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="221.5" y="1845" width="0.2" height="15.0" fill="rgb(223,87,38)" rx="2" ry="2" />
<text  x="224.52" y="1855.5" ></text>
</g>
<g >
<title>TTranspositionTable::Insert (1 samples, 0.02%)</title><rect x="932.0" y="1893" width="0.3" height="15.0" fill="rgb(232,140,18)" rx="2" ry="2" />
<text  x="935.03" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (70 samples, 1.31%)</title><rect x="943.9" y="1333" width="15.4" height="15.0" fill="rgb(247,177,8)" rx="2" ry="2" />
<text  x="946.92" y="1343.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (42 samples, 0.78%)</title><rect x="163.0" y="1813" width="9.2" height="15.0" fill="rgb(253,7,42)" rx="2" ry="2" />
<text  x="165.98" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (1 samples, 0.02%)</title><rect x="737.0" y="1781" width="0.2" height="15.0" fill="rgb(235,118,10)" rx="2" ry="2" />
<text  x="740.02" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (4 samples, 0.07%)</title><rect x="357.3" y="1781" width="0.9" height="15.0" fill="rgb(220,87,8)" rx="2" ry="2" />
<text  x="360.33" y="1791.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="469.6" y="1797" width="0.2" height="15.0" fill="rgb(242,46,21)" rx="2" ry="2" />
<text  x="472.59" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::kings (1 samples, 0.02%)</title><rect x="61.7" y="1829" width="0.2" height="15.0" fill="rgb(216,41,46)" rx="2" ry="2" />
<text  x="64.73" y="1839.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2 samples, 0.04%)</title><rect x="443.6" y="1781" width="0.5" height="15.0" fill="rgb(220,181,15)" rx="2" ry="2" />
<text  x="446.61" y="1791.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.04%)</title><rect x="961.3" y="1685" width="0.4" height="15.0" fill="rgb(251,16,22)" rx="2" ry="2" />
<text  x="964.31" y="1695.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (1 samples, 0.02%)</title><rect x="938.9" y="1877" width="0.2" height="15.0" fill="rgb(207,28,22)" rx="2" ry="2" />
<text  x="941.86" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (52 samples, 0.97%)</title><rect x="943.9" y="693" width="11.5" height="15.0" fill="rgb(208,203,29)" rx="2" ry="2" />
<text  x="946.92" y="703.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="762.5" y="1701" width="0.3" height="15.0" fill="rgb(238,165,52)" rx="2" ry="2" />
<text  x="765.55" y="1711.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (5 samples, 0.09%)</title><rect x="654.7" y="1845" width="1.1" height="15.0" fill="rgb(237,4,8)" rx="2" ry="2" />
<text  x="657.70" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="698.3" y="1797" width="0.2" height="15.0" fill="rgb(210,176,10)" rx="2" ry="2" />
<text  x="701.28" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (7 samples, 0.13%)</title><rect x="764.5" y="1765" width="1.6" height="15.0" fill="rgb(211,25,44)" rx="2" ry="2" />
<text  x="767.53" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (3 samples, 0.06%)</title><rect x="227.7" y="1829" width="0.6" height="15.0" fill="rgb(246,225,19)" rx="2" ry="2" />
<text  x="230.69" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (36 samples, 0.67%)</title><rect x="943.9" y="245" width="7.9" height="15.0" fill="rgb(210,228,21)" rx="2" ry="2" />
<text  x="946.92" y="255.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="92.8" y="1813" width="0.2" height="15.0" fill="rgb(217,192,23)" rx="2" ry="2" />
<text  x="95.76" y="1823.5" ></text>
</g>
<g >
<title>CalcPSTScore (37 samples, 0.69%)</title><rect x="367.5" y="1813" width="8.1" height="15.0" fill="rgb(228,219,51)" rx="2" ry="2" />
<text  x="370.46" y="1823.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="467.2" y="1813" width="0.2" height="15.0" fill="rgb(245,122,42)" rx="2" ry="2" />
<text  x="470.16" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (4 samples, 0.07%)</title><rect x="89.7" y="1813" width="0.9" height="15.0" fill="rgb(218,194,44)" rx="2" ry="2" />
<text  x="92.68" y="1823.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (3 samples, 0.06%)</title><rect x="752.0" y="1797" width="0.6" height="15.0" fill="rgb(247,17,23)" rx="2" ry="2" />
<text  x="754.98" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (43 samples, 0.80%)</title><rect x="285.6" y="1829" width="9.4" height="15.0" fill="rgb(227,120,35)" rx="2" ry="2" />
<text  x="288.58" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (11 samples, 0.21%)</title><rect x="920.8" y="1813" width="2.4" height="15.0" fill="rgb(210,136,33)" rx="2" ry="2" />
<text  x="923.81" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::BlockingMutex::Lock (1 samples, 0.02%)</title><rect x="1134.1" y="2053" width="0.2" height="15.0" fill="rgb(245,203,53)" rx="2" ry="2" />
<text  x="1137.09" y="2063.5" ></text>
</g>
<g >
<title>time_benchmark_invoker (1,402 samples, 26.15%)</title><rect x="630.9" y="2021" width="308.6" height="15.0" fill="rgb(213,45,27)" rx="2" ry="2" />
<text  x="633.93" y="2031.5" >time_benchmark_invoker</text>
</g>
<g >
<title>[libc-2.31.so] (10 samples, 0.19%)</title><rect x="198.4" y="1845" width="2.2" height="15.0" fill="rgb(212,1,43)" rx="2" ry="2" />
<text  x="201.41" y="1855.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (1 samples, 0.02%)</title><rect x="191.1" y="1845" width="0.3" height="15.0" fill="rgb(249,66,14)" rx="2" ry="2" />
<text  x="194.15" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="490.7" y="1829" width="0.2" height="15.0" fill="rgb(214,223,15)" rx="2" ry="2" />
<text  x="493.72" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (1 samples, 0.02%)</title><rect x="497.8" y="1797" width="0.2" height="15.0" fill="rgb(243,122,6)" rx="2" ry="2" />
<text  x="500.76" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="381.3" y="1749" width="0.2" height="15.0" fill="rgb(218,126,23)" rx="2" ry="2" />
<text  x="384.32" y="1759.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="695.9" y="1781" width="0.2" height="15.0" fill="rgb(212,102,27)" rx="2" ry="2" />
<text  x="698.86" y="1791.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (1 samples, 0.02%)</title><rect x="520.0" y="1813" width="0.2" height="15.0" fill="rgb(225,15,4)" rx="2" ry="2" />
<text  x="522.99" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="208.5" y="1829" width="0.3" height="15.0" fill="rgb(205,167,14)" rx="2" ry="2" />
<text  x="211.54" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="207.7" y="1877" width="0.4" height="15.0" fill="rgb(212,155,47)" rx="2" ry="2" />
<text  x="210.66" y="1887.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.04%)</title><rect x="604.7" y="1845" width="0.5" height="15.0" fill="rgb(226,105,29)" rx="2" ry="2" />
<text  x="607.73" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (4,635 samples, 86.46%)</title><rect x="15.3" y="2053" width="1020.2" height="15.0" fill="rgb(248,110,5)" rx="2" ry="2" />
<text  x="18.28" y="2063.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (62 samples, 1.16%)</title><rect x="943.9" y="1061" width="13.7" height="15.0" fill="rgb(227,207,0)" rx="2" ry="2" />
<text  x="946.92" y="1071.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (2 samples, 0.04%)</title><rect x="616.8" y="1861" width="0.5" height="15.0" fill="rgb(223,107,48)" rx="2" ry="2" />
<text  x="619.84" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (62 samples, 1.16%)</title><rect x="943.9" y="1029" width="13.7" height="15.0" fill="rgb(219,33,6)" rx="2" ry="2" />
<text  x="946.92" y="1039.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, true&gt; &gt;::construct&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="923.7" y="1813" width="0.4" height="15.0" fill="rgb(221,55,5)" rx="2" ry="2" />
<text  x="926.67" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (6 samples, 0.11%)</title><rect x="664.8" y="1797" width="1.3" height="15.0" fill="rgb(237,186,53)" rx="2" ry="2" />
<text  x="667.82" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (4 samples, 0.07%)</title><rect x="934.5" y="1877" width="0.8" height="15.0" fill="rgb(246,114,48)" rx="2" ry="2" />
<text  x="937.45" y="1887.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="695.6" y="1797" width="0.3" height="15.0" fill="rgb(236,133,41)" rx="2" ry="2" />
<text  x="698.64" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="180.4" y="1861" width="0.2" height="15.0" fill="rgb(208,71,10)" rx="2" ry="2" />
<text  x="183.36" y="1871.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="753.3" y="1765" width="0.2" height="15.0" fill="rgb(212,52,13)" rx="2" ry="2" />
<text  x="756.31" y="1775.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (6 samples, 0.11%)</title><rect x="383.5" y="1781" width="1.3" height="15.0" fill="rgb(218,150,28)" rx="2" ry="2" />
<text  x="386.52" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="880.3" y="1861" width="0.2" height="15.0" fill="rgb(220,14,26)" rx="2" ry="2" />
<text  x="883.31" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="365.3" y="1781" width="0.2" height="15.0" fill="rgb(221,180,37)" rx="2" ry="2" />
<text  x="368.25" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (2 samples, 0.04%)</title><rect x="495.8" y="1845" width="0.4" height="15.0" fill="rgb(245,44,48)" rx="2" ry="2" />
<text  x="498.78" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (19 samples, 0.35%)</title><rect x="800.4" y="1797" width="4.2" height="15.0" fill="rgb(235,94,54)" rx="2" ry="2" />
<text  x="803.41" y="1807.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (53 samples, 0.99%)</title><rect x="868.4" y="1829" width="11.7" height="15.0" fill="rgb(250,227,39)" rx="2" ry="2" />
<text  x="871.42" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (66 samples, 1.23%)</title><rect x="943.9" y="1205" width="14.5" height="15.0" fill="rgb(233,28,37)" rx="2" ry="2" />
<text  x="946.92" y="1215.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="24.1" y="1797" width="0.2" height="15.0" fill="rgb(221,23,45)" rx="2" ry="2" />
<text  x="27.09" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.04%)</title><rect x="32.5" y="1845" width="0.4" height="15.0" fill="rgb(222,152,21)" rx="2" ry="2" />
<text  x="35.45" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;std::array&lt;int, 64ul&gt;, 6ul&gt;::at (1 samples, 0.02%)</title><rect x="276.1" y="1829" width="0.2" height="15.0" fill="rgb(236,17,49)" rx="2" ry="2" />
<text  x="279.11" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (5 samples, 0.09%)</title><rect x="666.6" y="1813" width="1.1" height="15.0" fill="rgb(241,139,1)" rx="2" ry="2" />
<text  x="669.58" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (37 samples, 0.69%)</title><rect x="1027.3" y="2037" width="8.2" height="15.0" fill="rgb(226,14,12)" rx="2" ry="2" />
<text  x="1030.34" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="395.2" y="1781" width="0.2" height="15.0" fill="rgb(212,199,43)" rx="2" ry="2" />
<text  x="398.19" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (23 samples, 0.43%)</title><rect x="445.8" y="1829" width="5.1" height="15.0" fill="rgb(247,205,45)" rx="2" ry="2" />
<text  x="448.81" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="635.3" y="1733" width="0.2" height="15.0" fill="rgb(254,101,36)" rx="2" ry="2" />
<text  x="638.33" y="1743.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (1 samples, 0.02%)</title><rect x="923.9" y="1781" width="0.2" height="15.0" fill="rgb(253,6,25)" rx="2" ry="2" />
<text  x="926.89" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (1 samples, 0.02%)</title><rect x="653.2" y="1829" width="0.2" height="15.0" fill="rgb(215,48,51)" rx="2" ry="2" />
<text  x="656.16" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (1 samples, 0.02%)</title><rect x="452.6" y="1845" width="0.3" height="15.0" fill="rgb(209,65,4)" rx="2" ry="2" />
<text  x="455.64" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (2 samples, 0.04%)</title><rect x="453.7" y="1829" width="0.5" height="15.0" fill="rgb(206,40,54)" rx="2" ry="2" />
<text  x="456.74" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (1 samples, 0.02%)</title><rect x="600.8" y="1861" width="0.2" height="15.0" fill="rgb(213,221,28)" rx="2" ry="2" />
<text  x="603.77" y="1871.5" ></text>
</g>
<g >
<title>clock_gettime (1 samples, 0.02%)</title><rect x="1189.8" y="2053" width="0.2" height="15.0" fill="rgb(229,150,43)" rx="2" ry="2" />
<text  x="1192.78" y="2063.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="950.5" y="165" width="0.2" height="15.0" fill="rgb(228,128,54)" rx="2" ry="2" />
<text  x="953.52" y="175.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (2 samples, 0.04%)</title><rect x="30.9" y="1829" width="0.5" height="15.0" fill="rgb(251,66,12)" rx="2" ry="2" />
<text  x="33.91" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="700.5" y="1797" width="0.2" height="15.0" fill="rgb(224,205,48)" rx="2" ry="2" />
<text  x="703.48" y="1807.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (4 samples, 0.07%)</title><rect x="82.2" y="1829" width="0.9" height="15.0" fill="rgb(230,202,33)" rx="2" ry="2" />
<text  x="85.20" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (7 samples, 0.13%)</title><rect x="618.2" y="1829" width="1.5" height="15.0" fill="rgb(234,177,54)" rx="2" ry="2" />
<text  x="621.16" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="202.6" y="1845" width="0.2" height="15.0" fill="rgb(229,103,11)" rx="2" ry="2" />
<text  x="205.59" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="301.2" y="1829" width="0.2" height="15.0" fill="rgb(206,194,3)" rx="2" ry="2" />
<text  x="304.20" y="1839.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="378.9" y="1765" width="0.2" height="15.0" fill="rgb(211,22,22)" rx="2" ry="2" />
<text  x="381.90" y="1775.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (5 samples, 0.09%)</title><rect x="663.1" y="1797" width="1.1" height="15.0" fill="rgb(208,163,28)" rx="2" ry="2" />
<text  x="666.06" y="1807.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="34.4" y="1845" width="0.5" height="15.0" fill="rgb(221,71,44)" rx="2" ry="2" />
<text  x="37.43" y="1855.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="741.2" y="1797" width="0.2" height="15.0" fill="rgb(252,26,36)" rx="2" ry="2" />
<text  x="744.20" y="1807.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="383.1" y="1749" width="0.2" height="15.0" fill="rgb(223,163,36)" rx="2" ry="2" />
<text  x="386.08" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.04%)</title><rect x="266.2" y="1781" width="0.4" height="15.0" fill="rgb(241,151,49)" rx="2" ry="2" />
<text  x="269.21" y="1791.5" ></text>
</g>
<g >
<title>CalcPSTScore (2 samples, 0.04%)</title><rect x="22.1" y="1909" width="0.4" height="15.0" fill="rgb(231,60,36)" rx="2" ry="2" />
<text  x="25.11" y="1919.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="642.2" y="1797" width="0.2" height="15.0" fill="rgb(214,181,33)" rx="2" ry="2" />
<text  x="645.15" y="1807.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="715.2" y="1845" width="0.2" height="15.0" fill="rgb(241,139,28)" rx="2" ry="2" />
<text  x="718.23" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="752.9" y="1733" width="0.2" height="15.0" fill="rgb(226,184,32)" rx="2" ry="2" />
<text  x="755.87" y="1743.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (1 samples, 0.02%)</title><rect x="49.8" y="1797" width="0.3" height="15.0" fill="rgb(224,40,4)" rx="2" ry="2" />
<text  x="52.84" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2 samples, 0.04%)</title><rect x="938.2" y="1893" width="0.4" height="15.0" fill="rgb(254,177,19)" rx="2" ry="2" />
<text  x="941.20" y="1903.5" ></text>
</g>
<g >
<title>GetPieceValue (1 samples, 0.02%)</title><rect x="227.2" y="1829" width="0.3" height="15.0" fill="rgb(216,97,1)" rx="2" ry="2" />
<text  x="230.25" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (3 samples, 0.06%)</title><rect x="231.4" y="1813" width="0.7" height="15.0" fill="rgb(215,139,33)" rx="2" ry="2" />
<text  x="234.43" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (6 samples, 0.11%)</title><rect x="302.5" y="1845" width="1.3" height="15.0" fill="rgb(206,158,26)" rx="2" ry="2" />
<text  x="305.52" y="1855.5" ></text>
</g>
<g >
<title>IsCapture (1 samples, 0.02%)</title><rect x="87.9" y="1765" width="0.2" height="15.0" fill="rgb(254,191,3)" rx="2" ry="2" />
<text  x="90.92" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="939.1" y="1973" width="0.4" height="15.0" fill="rgb(240,141,46)" rx="2" ry="2" />
<text  x="942.08" y="1983.5" ></text>
</g>
<g >
<title>lczero::Position::Position (70 samples, 1.31%)</title><rect x="880.7" y="1861" width="15.5" height="15.0" fill="rgb(216,39,0)" rx="2" ry="2" />
<text  x="883.75" y="1871.5" ></text>
</g>
<g >
<title>CalcPSTScore (5 samples, 0.09%)</title><rect x="232.3" y="1861" width="1.1" height="15.0" fill="rgb(216,176,45)" rx="2" ry="2" />
<text  x="235.31" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (1 samples, 0.02%)</title><rect x="850.2" y="1797" width="0.2" height="15.0" fill="rgb(206,92,6)" rx="2" ry="2" />
<text  x="853.15" y="1807.5" ></text>
</g>
<g >
<title>CalcPSTScore (7 samples, 0.13%)</title><rect x="223.5" y="1877" width="1.5" height="15.0" fill="rgb(232,176,40)" rx="2" ry="2" />
<text  x="226.50" y="1887.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="925.9" y="1845" width="0.2" height="15.0" fill="rgb(254,95,23)" rx="2" ry="2" />
<text  x="928.87" y="1855.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (1 samples, 0.02%)</title><rect x="919.3" y="1813" width="0.2" height="15.0" fill="rgb(244,132,29)" rx="2" ry="2" />
<text  x="922.27" y="1823.5" ></text>
</g>
<g >
<title>GetPieceValue (1 samples, 0.02%)</title><rect x="759.7" y="1669" width="0.2" height="15.0" fill="rgb(246,225,40)" rx="2" ry="2" />
<text  x="762.69" y="1679.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (2 samples, 0.04%)</title><rect x="722.3" y="1829" width="0.4" height="15.0" fill="rgb(229,152,36)" rx="2" ry="2" />
<text  x="725.27" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (14 samples, 0.26%)</title><rect x="363.7" y="1829" width="3.1" height="15.0" fill="rgb(236,205,31)" rx="2" ry="2" />
<text  x="366.71" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::operator== (4 samples, 0.07%)</title><rect x="282.9" y="1781" width="0.9" height="15.0" fill="rgb(248,93,22)" rx="2" ry="2" />
<text  x="285.93" y="1791.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (39 samples, 0.73%)</title><rect x="433.0" y="1781" width="8.6" height="15.0" fill="rgb(228,151,7)" rx="2" ry="2" />
<text  x="436.05" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="782.6" y="1781" width="0.2" height="15.0" fill="rgb(239,109,42)" rx="2" ry="2" />
<text  x="785.58" y="1791.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="954.7" y="645" width="0.2" height="15.0" fill="rgb(222,67,27)" rx="2" ry="2" />
<text  x="957.70" y="655.5" ></text>
</g>
<g >
<title>lczero::Position::Position (17 samples, 0.32%)</title><rect x="619.9" y="1893" width="3.8" height="15.0" fill="rgb(239,135,15)" rx="2" ry="2" />
<text  x="622.92" y="1903.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (2 samples, 0.04%)</title><rect x="329.6" y="1813" width="0.4" height="15.0" fill="rgb(221,58,46)" rx="2" ry="2" />
<text  x="332.60" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (15 samples, 0.28%)</title><rect x="695.9" y="1829" width="3.3" height="15.0" fill="rgb(217,212,51)" rx="2" ry="2" />
<text  x="698.86" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (1 samples, 0.02%)</title><rect x="205.2" y="1925" width="0.3" height="15.0" fill="rgb(248,191,9)" rx="2" ry="2" />
<text  x="208.24" y="1935.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (7 samples, 0.13%)</title><rect x="624.3" y="1845" width="1.6" height="15.0" fill="rgb(251,18,49)" rx="2" ry="2" />
<text  x="627.32" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="32.0" y="1845" width="0.2" height="15.0" fill="rgb(254,197,15)" rx="2" ry="2" />
<text  x="35.01" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (3 samples, 0.06%)</title><rect x="923.4" y="1845" width="0.7" height="15.0" fill="rgb(254,122,23)" rx="2" ry="2" />
<text  x="926.45" y="1855.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (29 samples, 0.54%)</title><rect x="286.2" y="1813" width="6.4" height="15.0" fill="rgb(249,50,32)" rx="2" ry="2" />
<text  x="289.24" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (109 samples, 2.03%)</title><rect x="454.2" y="1829" width="24.0" height="15.0" fill="rgb(236,125,28)" rx="2" ry="2" />
<text  x="457.18" y="1839.5" >l..</text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="37.3" y="1861" width="0.2" height="15.0" fill="rgb(221,4,42)" rx="2" ry="2" />
<text  x="40.29" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="695.9" y="1765" width="0.2" height="15.0" fill="rgb(226,125,49)" rx="2" ry="2" />
<text  x="698.86" y="1775.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="629.4" y="1877" width="0.2" height="15.0" fill="rgb(222,24,54)" rx="2" ry="2" />
<text  x="632.38" y="1887.5" ></text>
</g>
<g >
<title>std::multimap&lt;int, TSearchNode, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::emplace&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="612.2" y="1877" width="0.2" height="15.0" fill="rgb(213,35,30)" rx="2" ry="2" />
<text  x="615.22" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 1.21%)</title><rect x="943.9" y="1141" width="14.3" height="15.0" fill="rgb(213,180,40)" rx="2" ry="2" />
<text  x="946.92" y="1151.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (1 samples, 0.02%)</title><rect x="496.4" y="1829" width="0.3" height="15.0" fill="rgb(224,198,51)" rx="2" ry="2" />
<text  x="499.44" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="90.6" y="1797" width="0.4" height="15.0" fill="rgb(217,198,31)" rx="2" ry="2" />
<text  x="93.56" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (1 samples, 0.02%)</title><rect x="430.8" y="1813" width="0.3" height="15.0" fill="rgb(238,198,11)" rx="2" ry="2" />
<text  x="433.85" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (1 samples, 0.02%)</title><rect x="595.3" y="1829" width="0.2" height="15.0" fill="rgb(206,6,52)" rx="2" ry="2" />
<text  x="598.27" y="1839.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="921.5" y="1797" width="0.4" height="15.0" fill="rgb(225,54,35)" rx="2" ry="2" />
<text  x="924.47" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (1 samples, 0.02%)</title><rect x="603.0" y="1861" width="0.2" height="15.0" fill="rgb(235,61,52)" rx="2" ry="2" />
<text  x="605.97" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.09%)</title><rect x="53.6" y="1813" width="1.1" height="15.0" fill="rgb(217,208,14)" rx="2" ry="2" />
<text  x="56.58" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="205.7" y="1861" width="0.2" height="15.0" fill="rgb(245,168,1)" rx="2" ry="2" />
<text  x="208.68" y="1871.5" ></text>
</g>
<g >
<title>CalcPSTScore (3 samples, 0.06%)</title><rect x="48.1" y="1845" width="0.6" height="15.0" fill="rgb(251,50,21)" rx="2" ry="2" />
<text  x="51.08" y="1855.5" ></text>
</g>
<g >
<title>time_benchmark::test_method (1,402 samples, 26.15%)</title><rect x="630.9" y="2005" width="308.6" height="15.0" fill="rgb(252,125,54)" rx="2" ry="2" />
<text  x="633.93" y="2015.5" >time_benchmark::test_method</text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.06%)</title><rect x="766.5" y="1733" width="0.7" height="15.0" fill="rgb(242,107,4)" rx="2" ry="2" />
<text  x="769.51" y="1743.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="935.6" y="1893" width="0.2" height="15.0" fill="rgb(252,228,26)" rx="2" ry="2" />
<text  x="938.55" y="1903.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (2 samples, 0.04%)</title><rect x="922.8" y="1781" width="0.4" height="15.0" fill="rgb(221,4,26)" rx="2" ry="2" />
<text  x="925.79" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (4 samples, 0.07%)</title><rect x="53.8" y="1797" width="0.9" height="15.0" fill="rgb(225,84,31)" rx="2" ry="2" />
<text  x="56.80" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (28 samples, 0.52%)</title><rect x="232.3" y="1877" width="6.2" height="15.0" fill="rgb(240,126,14)" rx="2" ry="2" />
<text  x="235.31" y="1887.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (23 samples, 0.43%)</title><rect x="710.2" y="1797" width="5.0" height="15.0" fill="rgb(220,131,11)" rx="2" ry="2" />
<text  x="713.16" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="697.0" y="1733" width="0.2" height="15.0" fill="rgb(207,207,35)" rx="2" ry="2" />
<text  x="699.96" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (1 samples, 0.02%)</title><rect x="379.3" y="1765" width="0.3" height="15.0" fill="rgb(227,221,34)" rx="2" ry="2" />
<text  x="382.34" y="1775.5" ></text>
</g>
<g >
<title>IsPromotion (1 samples, 0.02%)</title><rect x="30.2" y="1877" width="0.3" height="15.0" fill="rgb(220,89,7)" rx="2" ry="2" />
<text  x="33.25" y="1887.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="88.6" y="1781" width="0.2" height="15.0" fill="rgb(227,49,35)" rx="2" ry="2" />
<text  x="91.58" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (1 samples, 0.02%)</title><rect x="354.7" y="1765" width="0.2" height="15.0" fill="rgb(231,122,25)" rx="2" ry="2" />
<text  x="357.69" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="633.6" y="1845" width="0.2" height="15.0" fill="rgb(214,58,23)" rx="2" ry="2" />
<text  x="636.57" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (152 samples, 2.84%)</title><rect x="140.7" y="1861" width="33.5" height="15.0" fill="rgb(207,44,2)" rx="2" ry="2" />
<text  x="143.74" y="1871.5" >lc..</text>
</g>
<g >
<title>[unknown] (78 samples, 1.45%)</title><rect x="943.9" y="1573" width="17.2" height="15.0" fill="rgb(229,13,53)" rx="2" ry="2" />
<text  x="946.92" y="1583.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.06%)</title><rect x="933.1" y="1877" width="0.7" height="15.0" fill="rgb(230,2,0)" rx="2" ry="2" />
<text  x="936.13" y="1887.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (1 samples, 0.02%)</title><rect x="589.8" y="1813" width="0.2" height="15.0" fill="rgb(227,145,41)" rx="2" ry="2" />
<text  x="592.76" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="760.3" y="1637" width="0.3" height="15.0" fill="rgb(238,178,1)" rx="2" ry="2" />
<text  x="763.35" y="1647.5" ></text>
</g>
<g >
<title>__pthread_getspecific (1 samples, 0.02%)</title><rect x="938.0" y="1797" width="0.2" height="15.0" fill="rgb(249,192,35)" rx="2" ry="2" />
<text  x="940.98" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="629.4" y="1861" width="0.2" height="15.0" fill="rgb(253,58,9)" rx="2" ry="2" />
<text  x="632.38" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (2 samples, 0.04%)</title><rect x="708.6" y="1813" width="0.5" height="15.0" fill="rgb(220,144,7)" rx="2" ry="2" />
<text  x="711.62" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (2 samples, 0.04%)</title><rect x="672.1" y="1813" width="0.4" height="15.0" fill="rgb(234,127,7)" rx="2" ry="2" />
<text  x="675.09" y="1823.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (23 samples, 0.43%)</title><rect x="315.1" y="1829" width="5.0" height="15.0" fill="rgb(206,38,19)" rx="2" ry="2" />
<text  x="318.07" y="1839.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="48.5" y="1829" width="0.2" height="15.0" fill="rgb(215,60,25)" rx="2" ry="2" />
<text  x="51.52" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="628.7" y="1877" width="0.2" height="15.0" fill="rgb(250,103,51)" rx="2" ry="2" />
<text  x="631.72" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (46 samples, 0.86%)</title><rect x="943.9" y="517" width="10.1" height="15.0" fill="rgb(231,195,39)" rx="2" ry="2" />
<text  x="946.92" y="527.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (1 samples, 0.02%)</title><rect x="953.4" y="437" width="0.2" height="15.0" fill="rgb(206,201,46)" rx="2" ry="2" />
<text  x="956.38" y="447.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (1 samples, 0.02%)</title><rect x="629.4" y="1813" width="0.2" height="15.0" fill="rgb(248,189,3)" rx="2" ry="2" />
<text  x="632.38" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="748.5" y="1781" width="0.2" height="15.0" fill="rgb(236,150,49)" rx="2" ry="2" />
<text  x="751.46" y="1791.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="952.1" y="309" width="0.2" height="15.0" fill="rgb(246,195,36)" rx="2" ry="2" />
<text  x="955.06" y="319.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (1 samples, 0.02%)</title><rect x="20.3" y="1861" width="0.3" height="15.0" fill="rgb(254,31,28)" rx="2" ry="2" />
<text  x="23.35" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="226.8" y="1813" width="0.2" height="15.0" fill="rgb(216,211,11)" rx="2" ry="2" />
<text  x="229.81" y="1823.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="380.0" y="1765" width="0.2" height="15.0" fill="rgb(210,14,47)" rx="2" ry="2" />
<text  x="383.00" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="766.3" y="1765" width="0.2" height="15.0" fill="rgb(228,177,7)" rx="2" ry="2" />
<text  x="769.29" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (52 samples, 0.97%)</title><rect x="943.9" y="709" width="11.5" height="15.0" fill="rgb(220,150,24)" rx="2" ry="2" />
<text  x="946.92" y="719.5" ></text>
</g>
<g >
<title>TTranspositionTable::Insert (2 samples, 0.04%)</title><rect x="175.7" y="1877" width="0.5" height="15.0" fill="rgb(223,52,17)" rx="2" ry="2" />
<text  x="178.74" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (25 samples, 0.47%)</title><rect x="838.9" y="1781" width="5.5" height="15.0" fill="rgb(231,71,52)" rx="2" ry="2" />
<text  x="841.93" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (3 samples, 0.06%)</title><rect x="639.9" y="1813" width="0.7" height="15.0" fill="rgb(218,153,15)" rx="2" ry="2" />
<text  x="642.95" y="1823.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="957.1" y="933" width="0.2" height="15.0" fill="rgb(245,92,23)" rx="2" ry="2" />
<text  x="960.13" y="943.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (1 samples, 0.02%)</title><rect x="958.0" y="1093" width="0.2" height="15.0" fill="rgb(227,9,1)" rx="2" ry="2" />
<text  x="961.01" y="1103.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (1 samples, 0.02%)</title><rect x="932.9" y="1861" width="0.2" height="15.0" fill="rgb(218,131,40)" rx="2" ry="2" />
<text  x="935.91" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_drop_node (1 samples, 0.02%)</title><rect x="920.6" y="1813" width="0.2" height="15.0" fill="rgb(231,27,5)" rx="2" ry="2" />
<text  x="923.59" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (153 samples, 2.85%)</title><rect x="409.1" y="1829" width="33.6" height="15.0" fill="rgb(211,173,8)" rx="2" ry="2" />
<text  x="412.06" y="1839.5" >lc..</text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (2 samples, 0.04%)</title><rect x="442.3" y="1813" width="0.4" height="15.0" fill="rgb(214,142,49)" rx="2" ry="2" />
<text  x="445.29" y="1823.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (2 samples, 0.04%)</title><rect x="44.8" y="1845" width="0.4" height="15.0" fill="rgb(214,51,6)" rx="2" ry="2" />
<text  x="47.78" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.04%)</title><rect x="849.1" y="1829" width="0.4" height="15.0" fill="rgb(234,35,27)" rx="2" ry="2" />
<text  x="852.05" y="1839.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="758.4" y="1701" width="0.2" height="15.0" fill="rgb(243,228,28)" rx="2" ry="2" />
<text  x="761.37" y="1711.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.04%)</title><rect x="36.9" y="1861" width="0.4" height="15.0" fill="rgb(219,96,36)" rx="2" ry="2" />
<text  x="39.85" y="1871.5" ></text>
</g>
<g >
<title>IsCapture (1 samples, 0.02%)</title><rect x="638.4" y="1861" width="0.2" height="15.0" fill="rgb(210,86,14)" rx="2" ry="2" />
<text  x="641.41" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (96 samples, 1.79%)</title><rect x="550.8" y="1845" width="21.1" height="15.0" fill="rgb(233,26,3)" rx="2" ry="2" />
<text  x="553.81" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="38.8" y="1797" width="0.3" height="15.0" fill="rgb(243,149,43)" rx="2" ry="2" />
<text  x="41.83" y="1807.5" ></text>
</g>
<g >
<title>GetPieceValue (1 samples, 0.02%)</title><rect x="666.4" y="1813" width="0.2" height="15.0" fill="rgb(216,185,36)" rx="2" ry="2" />
<text  x="669.36" y="1823.5" ></text>
</g>
<g >
<title>IsCapture (1 samples, 0.02%)</title><rect x="83.1" y="1845" width="0.2" height="15.0" fill="rgb(228,28,35)" rx="2" ry="2" />
<text  x="86.08" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_insert_node (1 samples, 0.02%)</title><rect x="190.3" y="1861" width="0.2" height="15.0" fill="rgb(226,29,14)" rx="2" ry="2" />
<text  x="193.27" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::queens (1 samples, 0.02%)</title><rect x="733.9" y="1765" width="0.3" height="15.0" fill="rgb(232,62,5)" rx="2" ry="2" />
<text  x="736.94" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (1 samples, 0.02%)</title><rect x="613.5" y="1797" width="0.3" height="15.0" fill="rgb(216,105,19)" rx="2" ry="2" />
<text  x="616.54" y="1807.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="737.5" y="1813" width="0.2" height="15.0" fill="rgb(222,31,11)" rx="2" ry="2" />
<text  x="740.46" y="1823.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (4 samples, 0.07%)</title><rect x="926.3" y="1861" width="0.9" height="15.0" fill="rgb(208,65,7)" rx="2" ry="2" />
<text  x="929.31" y="1871.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="733.1" y="1765" width="0.2" height="15.0" fill="rgb(231,89,20)" rx="2" ry="2" />
<text  x="736.06" y="1775.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (18 samples, 0.34%)</title><rect x="899.9" y="1813" width="4.0" height="15.0" fill="rgb(237,184,24)" rx="2" ry="2" />
<text  x="902.90" y="1823.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="963.9" y="1861" width="0.3" height="15.0" fill="rgb(215,215,45)" rx="2" ry="2" />
<text  x="966.95" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="963.5" y="1813" width="0.2" height="15.0" fill="rgb(205,54,24)" rx="2" ry="2" />
<text  x="966.51" y="1823.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="769.4" y="1765" width="0.4" height="15.0" fill="rgb(216,220,1)" rx="2" ry="2" />
<text  x="772.37" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="29.1" y="1845" width="0.3" height="15.0" fill="rgb(238,209,44)" rx="2" ry="2" />
<text  x="32.15" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="748.7" y="1765" width="0.2" height="15.0" fill="rgb(231,55,13)" rx="2" ry="2" />
<text  x="751.68" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (9 samples, 0.17%)</title><rect x="834.5" y="1797" width="2.0" height="15.0" fill="rgb(245,167,19)" rx="2" ry="2" />
<text  x="837.53" y="1807.5" ></text>
</g>
<g >
<title>GetPieceType (10 samples, 0.19%)</title><rect x="672.5" y="1845" width="2.2" height="15.0" fill="rgb(228,97,26)" rx="2" ry="2" />
<text  x="675.53" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="208.8" y="1829" width="0.2" height="15.0" fill="rgb(231,80,46)" rx="2" ry="2" />
<text  x="211.76" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (3 samples, 0.06%)</title><rect x="611.3" y="1861" width="0.7" height="15.0" fill="rgb(230,19,22)" rx="2" ry="2" />
<text  x="614.34" y="1871.5" ></text>
</g>
<g >
<title>CalcPSTScore (1 samples, 0.02%)</title><rect x="760.1" y="1669" width="0.2" height="15.0" fill="rgb(234,118,40)" rx="2" ry="2" />
<text  x="763.13" y="1679.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="696.1" y="1781" width="0.2" height="15.0" fill="rgb(247,57,12)" rx="2" ry="2" />
<text  x="699.08" y="1791.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="214.3" y="1845" width="0.2" height="15.0" fill="rgb(241,203,14)" rx="2" ry="2" />
<text  x="217.26" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (1 samples, 0.02%)</title><rect x="478.2" y="1829" width="0.2" height="15.0" fill="rgb(241,105,21)" rx="2" ry="2" />
<text  x="481.17" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, true&gt; &gt;::construct&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="192.5" y="1829" width="0.2" height="15.0" fill="rgb(244,137,16)" rx="2" ry="2" />
<text  x="195.47" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (11 samples, 0.21%)</title><rect x="181.9" y="1861" width="2.4" height="15.0" fill="rgb(254,134,18)" rx="2" ry="2" />
<text  x="184.90" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="965.0" y="1957" width="0.3" height="15.0" fill="rgb(208,115,16)" rx="2" ry="2" />
<text  x="968.05" y="1967.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="697.6" y="1717" width="0.2" height="15.0" fill="rgb(207,138,53)" rx="2" ry="2" />
<text  x="700.62" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="497.3" y="1813" width="0.5" height="15.0" fill="rgb(223,20,28)" rx="2" ry="2" />
<text  x="500.32" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="634.7" y="1845" width="0.2" height="15.0" fill="rgb(235,195,8)" rx="2" ry="2" />
<text  x="637.67" y="1855.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.04%)</title><rect x="444.1" y="1781" width="0.4" height="15.0" fill="rgb(234,66,17)" rx="2" ry="2" />
<text  x="447.05" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="50.1" y="1813" width="0.2" height="15.0" fill="rgb(233,38,51)" rx="2" ry="2" />
<text  x="53.06" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (1 samples, 0.02%)</title><rect x="753.1" y="1717" width="0.2" height="15.0" fill="rgb(248,198,33)" rx="2" ry="2" />
<text  x="756.09" y="1727.5" ></text>
</g>
<g >
<title>GetPieceValue (1 samples, 0.02%)</title><rect x="734.4" y="1797" width="0.2" height="15.0" fill="rgb(209,143,47)" rx="2" ry="2" />
<text  x="737.38" y="1807.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="629.8" y="1909" width="0.2" height="15.0" fill="rgb(230,218,43)" rx="2" ry="2" />
<text  x="632.82" y="1919.5" ></text>
</g>
<g >
<title>lczero::Position::Position (4 samples, 0.07%)</title><rect x="365.3" y="1797" width="0.8" height="15.0" fill="rgb(212,109,34)" rx="2" ry="2" />
<text  x="368.25" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (2 samples, 0.04%)</title><rect x="867.1" y="1829" width="0.4" height="15.0" fill="rgb(236,213,13)" rx="2" ry="2" />
<text  x="870.10" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (1 samples, 0.02%)</title><rect x="880.5" y="1861" width="0.2" height="15.0" fill="rgb(218,229,50)" rx="2" ry="2" />
<text  x="883.53" y="1871.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (3 samples, 0.06%)</title><rect x="747.8" y="1797" width="0.7" height="15.0" fill="rgb(249,30,37)" rx="2" ry="2" />
<text  x="750.80" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (1,619 samples, 30.20%)</title><rect x="238.5" y="1877" width="356.3" height="15.0" fill="rgb(216,5,50)" rx="2" ry="2" />
<text  x="241.47" y="1887.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>lczero::BitBoard::get (13 samples, 0.24%)</title><rect x="330.0" y="1829" width="2.9" height="15.0" fill="rgb(232,165,16)" rx="2" ry="2" />
<text  x="333.04" y="1839.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (1 samples, 0.02%)</title><rect x="117.9" y="1797" width="0.2" height="15.0" fill="rgb(205,72,39)" rx="2" ry="2" />
<text  x="120.85" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (1 samples, 0.02%)</title><rect x="61.9" y="1829" width="0.3" height="15.0" fill="rgb(243,131,15)" rx="2" ry="2" />
<text  x="64.95" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (1 samples, 0.02%)</title><rect x="757.0" y="1701" width="0.3" height="15.0" fill="rgb(240,177,17)" rx="2" ry="2" />
<text  x="760.05" y="1711.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="384.8" y="1781" width="0.3" height="15.0" fill="rgb(241,226,17)" rx="2" ry="2" />
<text  x="387.84" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="208.5" y="1813" width="0.3" height="15.0" fill="rgb(229,104,13)" rx="2" ry="2" />
<text  x="211.54" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="82.6" y="1797" width="0.3" height="15.0" fill="rgb(237,46,50)" rx="2" ry="2" />
<text  x="85.64" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (2 samples, 0.04%)</title><rect x="922.8" y="1765" width="0.4" height="15.0" fill="rgb(245,162,33)" rx="2" ry="2" />
<text  x="925.79" y="1775.5" ></text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (1 samples, 0.02%)</title><rect x="23.0" y="1845" width="0.2" height="15.0" fill="rgb(221,113,54)" rx="2" ry="2" />
<text  x="25.99" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (2 samples, 0.04%)</title><rect x="23.4" y="1845" width="0.5" height="15.0" fill="rgb(213,52,0)" rx="2" ry="2" />
<text  x="26.43" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (11 samples, 0.21%)</title><rect x="696.1" y="1813" width="2.4" height="15.0" fill="rgb(221,164,31)" rx="2" ry="2" />
<text  x="699.08" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::bishops (1 samples, 0.02%)</title><rect x="32.7" y="1733" width="0.2" height="15.0" fill="rgb(231,19,17)" rx="2" ry="2" />
<text  x="35.67" y="1743.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="194.2" y="1861" width="0.9" height="15.0" fill="rgb(227,17,11)" rx="2" ry="2" />
<text  x="197.23" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (4 samples, 0.07%)</title><rect x="172.2" y="1813" width="0.9" height="15.0" fill="rgb(234,81,38)" rx="2" ry="2" />
<text  x="175.22" y="1823.5" ></text>
</g>
<g >
<title>GetPieceValue (1 samples, 0.02%)</title><rect x="39.1" y="1845" width="0.2" height="15.0" fill="rgb(248,36,41)" rx="2" ry="2" />
<text  x="42.05" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::ReleaseFreeMemoryToOS&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::MemoryMapper&gt; (1 samples, 0.02%)</title><rect x="993.0" y="2037" width="0.2" height="15.0" fill="rgb(237,34,45)" rx="2" ry="2" />
<text  x="996.00" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::GetFromAllocator (2 samples, 0.04%)</title><rect x="992.6" y="2037" width="0.4" height="15.0" fill="rgb(235,17,46)" rx="2" ry="2" />
<text  x="995.56" y="2047.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (1 samples, 0.02%)</title><rect x="820.7" y="1845" width="0.2" height="15.0" fill="rgb(228,120,15)" rx="2" ry="2" />
<text  x="823.66" y="1855.5" ></text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (6 samples, 0.11%)</title><rect x="282.5" y="1797" width="1.3" height="15.0" fill="rgb(249,188,19)" rx="2" ry="2" />
<text  x="285.49" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (74 samples, 1.38%)</title><rect x="943.9" y="1525" width="16.3" height="15.0" fill="rgb(240,79,24)" rx="2" ry="2" />
<text  x="946.92" y="1535.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (3 samples, 0.06%)</title><rect x="861.8" y="1829" width="0.7" height="15.0" fill="rgb(221,45,31)" rx="2" ry="2" />
<text  x="864.82" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (44 samples, 0.82%)</title><rect x="899.5" y="1829" width="9.6" height="15.0" fill="rgb(246,59,0)" rx="2" ry="2" />
<text  x="902.46" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (1 samples, 0.02%)</title><rect x="938.9" y="1909" width="0.2" height="15.0" fill="rgb(208,198,42)" rx="2" ry="2" />
<text  x="941.86" y="1919.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (2 samples, 0.04%)</title><rect x="623.2" y="1877" width="0.5" height="15.0" fill="rgb(207,148,23)" rx="2" ry="2" />
<text  x="626.22" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (4 samples, 0.07%)</title><rect x="137.0" y="1813" width="0.9" height="15.0" fill="rgb(230,79,48)" rx="2" ry="2" />
<text  x="140.00" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (11 samples, 0.21%)</title><rect x="292.6" y="1813" width="2.4" height="15.0" fill="rgb(223,229,30)" rx="2" ry="2" />
<text  x="295.62" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (3 samples, 0.06%)</title><rect x="522.0" y="1813" width="0.6" height="15.0" fill="rgb(236,160,8)" rx="2" ry="2" />
<text  x="524.97" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="760.6" y="1653" width="0.2" height="15.0" fill="rgb(221,229,34)" rx="2" ry="2" />
<text  x="763.57" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (2 samples, 0.04%)</title><rect x="836.5" y="1813" width="0.4" height="15.0" fill="rgb(208,3,4)" rx="2" ry="2" />
<text  x="839.51" y="1823.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&gt;::pair&lt;std::_Rb_tree_node&lt;std::pair&lt;int const, TSearchNode&gt; &gt;*&amp;, std::_Rb_tree_node_base*&amp;, true&gt; (4 samples, 0.07%)</title><rect x="916.0" y="1829" width="0.8" height="15.0" fill="rgb(225,136,6)" rx="2" ry="2" />
<text  x="918.97" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, unsigned long, true&gt;::_S_equals (2 samples, 0.04%)</title><rect x="612.4" y="1845" width="0.5" height="15.0" fill="rgb(234,149,11)" rx="2" ry="2" />
<text  x="615.44" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (62 samples, 1.16%)</title><rect x="943.9" y="1013" width="13.7" height="15.0" fill="rgb(206,13,36)" rx="2" ry="2" />
<text  x="946.92" y="1023.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="266.6" y="1797" width="0.3" height="15.0" fill="rgb(219,48,14)" rx="2" ry="2" />
<text  x="269.65" y="1807.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="227.0" y="1829" width="0.2" height="15.0" fill="rgb(213,92,30)" rx="2" ry="2" />
<text  x="230.03" y="1839.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="757.3" y="1653" width="0.2" height="15.0" fill="rgb(230,22,46)" rx="2" ry="2" />
<text  x="760.27" y="1663.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="378.9" y="1781" width="0.2" height="15.0" fill="rgb(231,65,10)" rx="2" ry="2" />
<text  x="381.90" y="1791.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="936.0" y="1845" width="0.2" height="15.0" fill="rgb(219,104,27)" rx="2" ry="2" />
<text  x="939.00" y="1855.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="695.2" y="1813" width="0.2" height="15.0" fill="rgb(210,132,51)" rx="2" ry="2" />
<text  x="698.20" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (10 samples, 0.19%)</title><rect x="51.2" y="1845" width="2.2" height="15.0" fill="rgb(234,74,32)" rx="2" ry="2" />
<text  x="54.16" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_begin (2 samples, 0.04%)</title><rect x="610.2" y="1845" width="0.5" height="15.0" fill="rgb(243,155,49)" rx="2" ry="2" />
<text  x="613.24" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="202.6" y="1877" width="0.2" height="15.0" fill="rgb(226,35,2)" rx="2" ry="2" />
<text  x="205.59" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="82.4" y="1797" width="0.2" height="15.0" fill="rgb(243,183,8)" rx="2" ry="2" />
<text  x="85.42" y="1807.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="208.5" y="1845" width="0.3" height="15.0" fill="rgb(206,80,21)" rx="2" ry="2" />
<text  x="211.54" y="1855.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="950.1" y="85" width="0.2" height="15.0" fill="rgb(213,161,33)" rx="2" ry="2" />
<text  x="953.08" y="95.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_insert_node (1 samples, 0.02%)</title><rect x="937.8" y="1877" width="0.2" height="15.0" fill="rgb(218,89,3)" rx="2" ry="2" />
<text  x="940.76" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="234.7" y="1781" width="0.3" height="15.0" fill="rgb(239,78,36)" rx="2" ry="2" />
<text  x="237.73" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="303.2" y="1781" width="0.2" height="15.0" fill="rgb(248,39,19)" rx="2" ry="2" />
<text  x="306.18" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="767.4" y="1781" width="0.2" height="15.0" fill="rgb(225,34,27)" rx="2" ry="2" />
<text  x="770.39" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (1 samples, 0.02%)</title><rect x="496.4" y="1813" width="0.3" height="15.0" fill="rgb(219,93,52)" rx="2" ry="2" />
<text  x="499.44" y="1823.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (5 samples, 0.09%)</title><rect x="632.7" y="1877" width="1.1" height="15.0" fill="rgb(251,5,53)" rx="2" ry="2" />
<text  x="635.69" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (70 samples, 1.31%)</title><rect x="943.9" y="1317" width="15.4" height="15.0" fill="rgb(225,198,27)" rx="2" ry="2" />
<text  x="946.92" y="1327.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="87.0" y="1781" width="0.3" height="15.0" fill="rgb(238,72,3)" rx="2" ry="2" />
<text  x="90.04" y="1791.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="637.7" y="1829" width="0.3" height="15.0" fill="rgb(251,113,1)" rx="2" ry="2" />
<text  x="640.75" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="933.1" y="1861" width="0.3" height="15.0" fill="rgb(216,146,21)" rx="2" ry="2" />
<text  x="936.13" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="208.3" y="1797" width="0.2" height="15.0" fill="rgb(254,162,24)" rx="2" ry="2" />
<text  x="211.32" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="755.7" y="1701" width="0.2" height="15.0" fill="rgb(239,117,43)" rx="2" ry="2" />
<text  x="758.73" y="1711.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="23.9" y="1845" width="0.2" height="15.0" fill="rgb(229,225,52)" rx="2" ry="2" />
<text  x="26.87" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="180.8" y="1845" width="0.2" height="15.0" fill="rgb(227,199,40)" rx="2" ry="2" />
<text  x="183.80" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (60 samples, 1.12%)</title><rect x="943.9" y="933" width="13.2" height="15.0" fill="rgb(253,130,51)" rx="2" ry="2" />
<text  x="946.92" y="943.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="954.5" y="613" width="0.2" height="15.0" fill="rgb(251,94,0)" rx="2" ry="2" />
<text  x="957.48" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (102 samples, 1.90%)</title><rect x="896.2" y="1861" width="22.4" height="15.0" fill="rgb(226,69,2)" rx="2" ry="2" />
<text  x="899.16" y="1871.5" >s..</text>
</g>
<g >
<title>GetPieceType (2 samples, 0.04%)</title><rect x="358.4" y="1813" width="0.5" height="15.0" fill="rgb(243,159,10)" rx="2" ry="2" />
<text  x="361.43" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="695.9" y="1797" width="0.2" height="15.0" fill="rgb(229,184,20)" rx="2" ry="2" />
<text  x="698.86" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="33.1" y="1845" width="0.2" height="15.0" fill="rgb(235,97,53)" rx="2" ry="2" />
<text  x="36.11" y="1855.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (5 samples, 0.09%)</title><rect x="30.5" y="1877" width="1.1" height="15.0" fill="rgb(243,227,35)" rx="2" ry="2" />
<text  x="33.47" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (6 samples, 0.11%)</title><rect x="15.3" y="2005" width="1.3" height="15.0" fill="rgb(218,125,12)" rx="2" ry="2" />
<text  x="18.28" y="2015.5" ></text>
</g>
<g >
<title>[libboost_unit_test_framework.so.1.71.0] (4,176 samples, 77.90%)</title><rect x="20.3" y="2037" width="919.2" height="15.0" fill="rgb(248,205,9)" rx="2" ry="2" />
<text  x="23.35" y="2047.5" >[libboost_unit_test_framework.so.1.71.0]</text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (1 samples, 0.02%)</title><rect x="768.7" y="1765" width="0.2" height="15.0" fill="rgb(243,144,17)" rx="2" ry="2" />
<text  x="771.71" y="1775.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="269.3" y="1829" width="0.2" height="15.0" fill="rgb(234,144,6)" rx="2" ry="2" />
<text  x="272.29" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (30 samples, 0.56%)</title><rect x="943.9" y="117" width="6.6" height="15.0" fill="rgb(254,48,14)" rx="2" ry="2" />
<text  x="946.92" y="127.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (3 samples, 0.06%)</title><rect x="385.9" y="1797" width="0.7" height="15.0" fill="rgb(229,182,40)" rx="2" ry="2" />
<text  x="388.94" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (1 samples, 0.02%)</title><rect x="228.3" y="1829" width="0.3" height="15.0" fill="rgb(248,98,31)" rx="2" ry="2" />
<text  x="231.35" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="933.6" y="1845" width="0.2" height="15.0" fill="rgb(217,164,44)" rx="2" ry="2" />
<text  x="936.57" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.04%)</title><rect x="381.5" y="1717" width="0.5" height="15.0" fill="rgb(246,57,7)" rx="2" ry="2" />
<text  x="384.54" y="1727.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (4 samples, 0.07%)</title><rect x="82.2" y="1845" width="0.9" height="15.0" fill="rgb(217,185,1)" rx="2" ry="2" />
<text  x="85.20" y="1855.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.09%)</title><rect x="521.5" y="1829" width="1.1" height="15.0" fill="rgb(230,163,28)" rx="2" ry="2" />
<text  x="524.53" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (21 samples, 0.39%)</title><rect x="918.6" y="1845" width="4.6" height="15.0" fill="rgb(251,69,26)" rx="2" ry="2" />
<text  x="921.61" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="695.6" y="1781" width="0.3" height="15.0" fill="rgb(218,85,3)" rx="2" ry="2" />
<text  x="698.64" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (2 samples, 0.04%)</title><rect x="180.6" y="1861" width="0.4" height="15.0" fill="rgb(217,96,17)" rx="2" ry="2" />
<text  x="183.58" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (72 samples, 1.34%)</title><rect x="851.7" y="1845" width="15.8" height="15.0" fill="rgb(244,72,5)" rx="2" ry="2" />
<text  x="854.69" y="1855.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2 samples, 0.04%)</title><rect x="498.4" y="1861" width="0.5" height="15.0" fill="rgb(209,18,2)" rx="2" ry="2" />
<text  x="501.42" y="1871.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="208.1" y="1893" width="0.2" height="15.0" fill="rgb(233,60,51)" rx="2" ry="2" />
<text  x="211.10" y="1903.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (7 samples, 0.13%)</title><rect x="87.0" y="1813" width="1.6" height="15.0" fill="rgb(208,28,11)" rx="2" ry="2" />
<text  x="90.04" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (63 samples, 1.18%)</title><rect x="943.9" y="1077" width="13.9" height="15.0" fill="rgb(245,203,32)" rx="2" ry="2" />
<text  x="946.92" y="1087.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="22.5" y="1861" width="0.3" height="15.0" fill="rgb(221,65,30)" rx="2" ry="2" />
<text  x="25.55" y="1871.5" ></text>
</g>
<g >
<title>GetPieceValue (1 samples, 0.02%)</title><rect x="379.6" y="1797" width="0.2" height="15.0" fill="rgb(227,182,49)" rx="2" ry="2" />
<text  x="382.56" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (3 samples, 0.06%)</title><rect x="94.1" y="1829" width="0.6" height="15.0" fill="rgb(206,205,51)" rx="2" ry="2" />
<text  x="97.08" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="34.2" y="1845" width="0.2" height="15.0" fill="rgb(217,164,37)" rx="2" ry="2" />
<text  x="37.21" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (35 samples, 0.65%)</title><rect x="943.9" y="229" width="7.7" height="15.0" fill="rgb(239,11,30)" rx="2" ry="2" />
<text  x="946.92" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, unsigned long, true&gt;::_S_equals (2 samples, 0.04%)</title><rect x="191.8" y="1845" width="0.4" height="15.0" fill="rgb(222,213,52)" rx="2" ry="2" />
<text  x="194.81" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (2 samples, 0.04%)</title><rect x="26.3" y="1877" width="0.4" height="15.0" fill="rgb(242,181,32)" rx="2" ry="2" />
<text  x="29.29" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (12 samples, 0.22%)</title><rect x="382.2" y="1797" width="2.6" height="15.0" fill="rgb(211,11,6)" rx="2" ry="2" />
<text  x="385.20" y="1807.5" ></text>
</g>
<g >
<title>THistoryHeuristics::Get (1 samples, 0.02%)</title><rect x="26.7" y="1893" width="0.2" height="15.0" fill="rgb(243,7,27)" rx="2" ry="2" />
<text  x="29.73" y="1903.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="85.7" y="1813" width="0.5" height="15.0" fill="rgb(248,224,35)" rx="2" ry="2" />
<text  x="88.72" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="38.8" y="1813" width="0.3" height="15.0" fill="rgb(236,28,27)" rx="2" ry="2" />
<text  x="41.83" y="1823.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="764.1" y="1717" width="0.4" height="15.0" fill="rgb(234,78,27)" rx="2" ry="2" />
<text  x="767.09" y="1727.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (1,931 samples, 36.02%)</title><rect x="205.5" y="1941" width="425.0" height="15.0" fill="rgb(234,164,28)" rx="2" ry="2" />
<text  x="208.46" y="1951.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="202.6" y="1861" width="0.2" height="15.0" fill="rgb(206,58,3)" rx="2" ry="2" />
<text  x="205.59" y="1871.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="83.3" y="1797" width="0.4" height="15.0" fill="rgb(214,222,53)" rx="2" ry="2" />
<text  x="86.30" y="1807.5" ></text>
</g>
<g >
<title>__lsan::DisabledInThisThread (2 samples, 0.04%)</title><rect x="1129.9" y="2053" width="0.5" height="15.0" fill="rgb(215,12,13)" rx="2" ry="2" />
<text  x="1132.91" y="2063.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="236.9" y="1829" width="0.3" height="15.0" fill="rgb(214,182,7)" rx="2" ry="2" />
<text  x="239.93" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="594.8" y="1845" width="0.5" height="15.0" fill="rgb(228,120,44)" rx="2" ry="2" />
<text  x="597.83" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (1 samples, 0.02%)</title><rect x="966.1" y="2005" width="0.3" height="15.0" fill="rgb(240,219,3)" rx="2" ry="2" />
<text  x="969.15" y="2015.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (4 samples, 0.07%)</title><rect x="1181.6" y="2053" width="0.9" height="15.0" fill="rgb(241,123,42)" rx="2" ry="2" />
<text  x="1184.64" y="2063.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="88.4" y="1781" width="0.2" height="15.0" fill="rgb(225,127,7)" rx="2" ry="2" />
<text  x="91.36" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (74 samples, 1.38%)</title><rect x="303.8" y="1845" width="16.3" height="15.0" fill="rgb(241,91,27)" rx="2" ry="2" />
<text  x="306.84" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (2 samples, 0.04%)</title><rect x="628.9" y="1893" width="0.5" height="15.0" fill="rgb(247,164,29)" rx="2" ry="2" />
<text  x="631.94" y="1903.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="821.1" y="1845" width="0.2" height="15.0" fill="rgb(206,144,3)" rx="2" ry="2" />
<text  x="824.10" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="849.5" y="1845" width="0.2" height="15.0" fill="rgb(249,128,23)" rx="2" ry="2" />
<text  x="852.49" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (1 samples, 0.02%)</title><rect x="939.3" y="1941" width="0.2" height="15.0" fill="rgb(243,159,4)" rx="2" ry="2" />
<text  x="942.30" y="1951.5" ></text>
</g>
<g >
<title>lczero::Position::Position (7 samples, 0.13%)</title><rect x="735.9" y="1797" width="1.6" height="15.0" fill="rgb(241,95,15)" rx="2" ry="2" />
<text  x="738.92" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (4 samples, 0.07%)</title><rect x="20.3" y="1973" width="0.9" height="15.0" fill="rgb(218,95,36)" rx="2" ry="2" />
<text  x="23.35" y="1983.5" ></text>
</g>
<g >
<title>GetPieceType (3 samples, 0.06%)</title><rect x="298.8" y="1829" width="0.6" height="15.0" fill="rgb(206,133,39)" rx="2" ry="2" />
<text  x="301.78" y="1839.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="423.4" y="1781" width="0.2" height="15.0" fill="rgb(232,90,43)" rx="2" ry="2" />
<text  x="426.36" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (1 samples, 0.02%)</title><rect x="697.0" y="1765" width="0.2" height="15.0" fill="rgb(236,108,48)" rx="2" ry="2" />
<text  x="699.96" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (96 samples, 1.79%)</title><rect x="943.9" y="1957" width="21.1" height="15.0" fill="rgb(210,202,49)" rx="2" ry="2" />
<text  x="946.92" y="1967.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (1 samples, 0.02%)</title><rect x="49.4" y="1829" width="0.2" height="15.0" fill="rgb(252,222,0)" rx="2" ry="2" />
<text  x="52.40" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::queens (1 samples, 0.02%)</title><rect x="266.4" y="1765" width="0.2" height="15.0" fill="rgb(218,70,15)" rx="2" ry="2" />
<text  x="269.43" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (5 samples, 0.09%)</title><rect x="309.8" y="1813" width="1.1" height="15.0" fill="rgb(240,74,46)" rx="2" ry="2" />
<text  x="312.79" y="1823.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.04%)</title><rect x="962.0" y="1733" width="0.4" height="15.0" fill="rgb(251,29,19)" rx="2" ry="2" />
<text  x="964.97" y="1743.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="762.1" y="1685" width="0.4" height="15.0" fill="rgb(226,158,17)" rx="2" ry="2" />
<text  x="765.11" y="1695.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="616.2" y="1861" width="0.2" height="15.0" fill="rgb(245,162,15)" rx="2" ry="2" />
<text  x="619.18" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::MakeMove (1,400 samples, 26.11%)</title><rect x="630.9" y="1973" width="308.2" height="15.0" fill="rgb(211,26,41)" rx="2" ry="2" />
<text  x="633.93" y="1983.5" >TSearchStrategy::MakeMove</text>
</g>
<g >
<title>CalcPSTScore (1 samples, 0.02%)</title><rect x="754.6" y="1765" width="0.2" height="15.0" fill="rgb(218,164,49)" rx="2" ry="2" />
<text  x="757.63" y="1775.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="686.4" y="1845" width="0.2" height="15.0" fill="rgb(222,95,24)" rx="2" ry="2" />
<text  x="689.39" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (1 samples, 0.02%)</title><rect x="270.6" y="1813" width="0.2" height="15.0" fill="rgb(213,225,13)" rx="2" ry="2" />
<text  x="273.61" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (8 samples, 0.15%)</title><rect x="933.8" y="1893" width="1.8" height="15.0" fill="rgb(243,29,42)" rx="2" ry="2" />
<text  x="936.79" y="1903.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="33.1" y="1861" width="0.2" height="15.0" fill="rgb(206,161,48)" rx="2" ry="2" />
<text  x="36.11" y="1871.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="637.3" y="1845" width="0.4" height="15.0" fill="rgb(215,184,12)" rx="2" ry="2" />
<text  x="640.31" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (9 samples, 0.17%)</title><rect x="739.2" y="1797" width="2.0" height="15.0" fill="rgb(224,227,40)" rx="2" ry="2" />
<text  x="742.22" y="1807.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="761.2" y="1685" width="0.5" height="15.0" fill="rgb(237,38,0)" rx="2" ry="2" />
<text  x="764.23" y="1695.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (79 samples, 1.47%)</title><rect x="554.5" y="1829" width="17.4" height="15.0" fill="rgb(226,13,52)" rx="2" ry="2" />
<text  x="557.55" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="740.1" y="1781" width="0.2" height="15.0" fill="rgb(215,60,31)" rx="2" ry="2" />
<text  x="743.10" y="1791.5" ></text>
</g>
<g >
<title>GetPieceType (10 samples, 0.19%)</title><rect x="249.0" y="1845" width="2.2" height="15.0" fill="rgb(232,182,1)" rx="2" ry="2" />
<text  x="252.04" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (55 samples, 1.03%)</title><rect x="943.9" y="805" width="12.1" height="15.0" fill="rgb(216,144,11)" rx="2" ry="2" />
<text  x="946.92" y="815.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (1 samples, 0.02%)</title><rect x="850.6" y="1781" width="0.2" height="15.0" fill="rgb(227,86,0)" rx="2" ry="2" />
<text  x="853.59" y="1791.5" ></text>
</g>
<g >
<title>std::multimap&lt;int, TSearchNode, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::emplace&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="923.2" y="1861" width="0.2" height="15.0" fill="rgb(220,186,11)" rx="2" ry="2" />
<text  x="926.23" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (20 samples, 0.37%)</title><rect x="623.7" y="1893" width="4.4" height="15.0" fill="rgb(234,57,26)" rx="2" ry="2" />
<text  x="626.66" y="1903.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="960.0" y="1493" width="0.2" height="15.0" fill="rgb(218,153,46)" rx="2" ry="2" />
<text  x="962.99" y="1503.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (1 samples, 0.02%)</title><rect x="788.1" y="1797" width="0.2" height="15.0" fill="rgb(250,107,30)" rx="2" ry="2" />
<text  x="791.08" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (87 samples, 1.62%)</title><rect x="943.9" y="1797" width="19.2" height="15.0" fill="rgb(232,195,10)" rx="2" ry="2" />
<text  x="946.92" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (108 samples, 2.01%)</title><rect x="94.7" y="1829" width="23.8" height="15.0" fill="rgb(232,26,23)" rx="2" ry="2" />
<text  x="97.74" y="1839.5" >l..</text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="205.0" y="1861" width="0.2" height="15.0" fill="rgb(210,56,26)" rx="2" ry="2" />
<text  x="208.02" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="381.5" y="1733" width="0.5" height="15.0" fill="rgb(227,65,15)" rx="2" ry="2" />
<text  x="384.54" y="1743.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (1 samples, 0.02%)</title><rect x="950.3" y="101" width="0.2" height="15.0" fill="rgb(220,127,42)" rx="2" ry="2" />
<text  x="953.30" y="111.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="635.3" y="1717" width="0.2" height="15.0" fill="rgb(253,74,35)" rx="2" ry="2" />
<text  x="638.33" y="1727.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="756.6" y="1717" width="0.2" height="15.0" fill="rgb(210,126,1)" rx="2" ry="2" />
<text  x="759.61" y="1727.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (1 samples, 0.02%)</title><rect x="704.4" y="1813" width="0.3" height="15.0" fill="rgb(223,75,37)" rx="2" ry="2" />
<text  x="707.44" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (43 samples, 0.80%)</title><rect x="523.5" y="1813" width="9.5" height="15.0" fill="rgb(240,122,13)" rx="2" ry="2" />
<text  x="526.51" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (36 samples, 0.67%)</title><rect x="701.6" y="1829" width="7.9" height="15.0" fill="rgb(252,52,18)" rx="2" ry="2" />
<text  x="704.58" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="214.5" y="1845" width="0.2" height="15.0" fill="rgb(231,150,26)" rx="2" ry="2" />
<text  x="217.48" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (3 samples, 0.06%)</title><rect x="730.6" y="1813" width="0.7" height="15.0" fill="rgb(221,47,9)" rx="2" ry="2" />
<text  x="733.63" y="1823.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (2 samples, 0.04%)</title><rect x="377.8" y="1797" width="0.4" height="15.0" fill="rgb(220,132,9)" rx="2" ry="2" />
<text  x="380.80" y="1807.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="87.5" y="1765" width="0.2" height="15.0" fill="rgb(210,173,8)" rx="2" ry="2" />
<text  x="90.48" y="1775.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (32 samples, 0.60%)</title><rect x="604.3" y="1877" width="7.0" height="15.0" fill="rgb(238,152,35)" rx="2" ry="2" />
<text  x="607.29" y="1887.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (1 samples, 0.02%)</title><rect x="220.0" y="1861" width="0.2" height="15.0" fill="rgb(247,171,13)" rx="2" ry="2" />
<text  x="222.98" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (3 samples, 0.06%)</title><rect x="222.2" y="1813" width="0.6" height="15.0" fill="rgb(206,207,20)" rx="2" ry="2" />
<text  x="225.18" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (1,919 samples, 35.80%)</title><rect x="207.2" y="1925" width="422.4" height="15.0" fill="rgb(216,139,10)" rx="2" ry="2" />
<text  x="210.22" y="1935.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="24.1" y="1829" width="0.2" height="15.0" fill="rgb(230,17,18)" rx="2" ry="2" />
<text  x="27.09" y="1839.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="800.0" y="1781" width="0.2" height="15.0" fill="rgb(247,29,2)" rx="2" ry="2" />
<text  x="802.97" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (1 samples, 0.02%)</title><rect x="533.6" y="1845" width="0.3" height="15.0" fill="rgb(242,80,34)" rx="2" ry="2" />
<text  x="536.64" y="1855.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.04%)</title><rect x="748.7" y="1781" width="0.4" height="15.0" fill="rgb(250,188,47)" rx="2" ry="2" />
<text  x="751.68" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (7 samples, 0.13%)</title><rect x="609.1" y="1861" width="1.6" height="15.0" fill="rgb(245,105,15)" rx="2" ry="2" />
<text  x="612.13" y="1871.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="234.7" y="1813" width="0.3" height="15.0" fill="rgb(223,29,29)" rx="2" ry="2" />
<text  x="237.73" y="1823.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (21 samples, 0.39%)</title><rect x="251.2" y="1845" width="4.7" height="15.0" fill="rgb(245,142,7)" rx="2" ry="2" />
<text  x="254.24" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (4 samples, 0.07%)</title><rect x="394.3" y="1781" width="0.9" height="15.0" fill="rgb(232,69,26)" rx="2" ry="2" />
<text  x="397.31" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="762.5" y="1733" width="0.9" height="15.0" fill="rgb(213,46,24)" rx="2" ry="2" />
<text  x="765.55" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="41.3" y="1829" width="0.4" height="15.0" fill="rgb(245,75,17)" rx="2" ry="2" />
<text  x="44.26" y="1839.5" ></text>
</g>
<g >
<title>GetFenBestMove (1,933 samples, 36.06%)</title><rect x="205.5" y="1989" width="425.4" height="15.0" fill="rgb(219,56,45)" rx="2" ry="2" />
<text  x="208.46" y="1999.5" >GetFenBestMove</text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.04%)</title><rect x="520.2" y="1813" width="0.5" height="15.0" fill="rgb(215,66,16)" rx="2" ry="2" />
<text  x="523.21" y="1823.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="227.2" y="1813" width="0.3" height="15.0" fill="rgb(249,211,18)" rx="2" ry="2" />
<text  x="230.25" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (1 samples, 0.02%)</title><rect x="931.8" y="1781" width="0.2" height="15.0" fill="rgb(211,114,45)" rx="2" ry="2" />
<text  x="934.81" y="1791.5" ></text>
</g>
<g >
<title>__lsan::MarkInvalidPCCb (1 samples, 0.02%)</title><rect x="987.3" y="2037" width="0.2" height="15.0" fill="rgb(237,44,48)" rx="2" ry="2" />
<text  x="990.28" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (30 samples, 0.56%)</title><rect x="110.1" y="1813" width="6.7" height="15.0" fill="rgb(225,202,17)" rx="2" ry="2" />
<text  x="113.15" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="83.5" y="1781" width="0.2" height="15.0" fill="rgb(227,95,13)" rx="2" ry="2" />
<text  x="86.52" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="598.8" y="1845" width="0.2" height="15.0" fill="rgb(248,21,40)" rx="2" ry="2" />
<text  x="601.79" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (11 samples, 0.21%)</title><rect x="192.7" y="1893" width="2.4" height="15.0" fill="rgb(227,82,5)" rx="2" ry="2" />
<text  x="195.69" y="1903.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (3 samples, 0.06%)</title><rect x="759.0" y="1701" width="0.7" height="15.0" fill="rgb(253,148,25)" rx="2" ry="2" />
<text  x="762.03" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (71 samples, 1.32%)</title><rect x="943.9" y="1381" width="15.6" height="15.0" fill="rgb(252,190,51)" rx="2" ry="2" />
<text  x="946.92" y="1391.5" ></text>
</g>
<g >
<title>[unknown] (71 samples, 1.32%)</title><rect x="943.9" y="1349" width="15.6" height="15.0" fill="rgb(251,121,38)" rx="2" ry="2" />
<text  x="946.92" y="1359.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="364.6" y="1749" width="0.2" height="15.0" fill="rgb(241,90,7)" rx="2" ry="2" />
<text  x="367.59" y="1759.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (1 samples, 0.02%)</title><rect x="21.7" y="1877" width="0.2" height="15.0" fill="rgb(245,121,17)" rx="2" ry="2" />
<text  x="24.67" y="1887.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="47.2" y="1813" width="0.2" height="15.0" fill="rgb(243,77,2)" rx="2" ry="2" />
<text  x="50.20" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="612.4" y="1861" width="0.7" height="15.0" fill="rgb(233,44,53)" rx="2" ry="2" />
<text  x="615.44" y="1871.5" ></text>
</g>
<g >
<title>CalcPSTScore (2 samples, 0.04%)</title><rect x="756.8" y="1733" width="0.5" height="15.0" fill="rgb(242,190,12)" rx="2" ry="2" />
<text  x="759.83" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="380.2" y="1749" width="0.2" height="15.0" fill="rgb(221,69,47)" rx="2" ry="2" />
<text  x="383.22" y="1759.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (305 samples, 5.69%)</title><rect x="67.7" y="1861" width="67.1" height="15.0" fill="rgb(240,73,19)" rx="2" ry="2" />
<text  x="70.67" y="1871.5" >TSearch..</text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="759.7" y="1685" width="0.2" height="15.0" fill="rgb(214,177,46)" rx="2" ry="2" />
<text  x="762.69" y="1695.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (1 samples, 0.02%)</title><rect x="746.5" y="1781" width="0.2" height="15.0" fill="rgb(248,140,45)" rx="2" ry="2" />
<text  x="749.48" y="1791.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (11 samples, 0.21%)</title><rect x="617.3" y="1877" width="2.4" height="15.0" fill="rgb(205,169,45)" rx="2" ry="2" />
<text  x="620.28" y="1887.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (1 samples, 0.02%)</title><rect x="430.2" y="1781" width="0.2" height="15.0" fill="rgb(216,165,18)" rx="2" ry="2" />
<text  x="433.19" y="1791.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="782.6" y="1765" width="0.2" height="15.0" fill="rgb(232,202,14)" rx="2" ry="2" />
<text  x="785.58" y="1775.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="50.1" y="1781" width="0.2" height="15.0" fill="rgb(221,27,13)" rx="2" ry="2" />
<text  x="53.06" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="628.3" y="1813" width="0.2" height="15.0" fill="rgb(207,221,41)" rx="2" ry="2" />
<text  x="631.28" y="1823.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="39.1" y="1829" width="0.2" height="15.0" fill="rgb(246,143,39)" rx="2" ry="2" />
<text  x="42.05" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (68 samples, 1.27%)</title><rect x="943.9" y="1269" width="15.0" height="15.0" fill="rgb(238,119,48)" rx="2" ry="2" />
<text  x="946.92" y="1279.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="770.7" y="1813" width="0.2" height="15.0" fill="rgb(251,217,9)" rx="2" ry="2" />
<text  x="773.69" y="1823.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (3 samples, 0.06%)</title><rect x="423.6" y="1781" width="0.6" height="15.0" fill="rgb(213,174,19)" rx="2" ry="2" />
<text  x="426.58" y="1791.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (35 samples, 0.65%)</title><rect x="1102.2" y="2053" width="7.7" height="15.0" fill="rgb(253,113,29)" rx="2" ry="2" />
<text  x="1105.18" y="2063.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (17 samples, 0.32%)</title><rect x="940.2" y="2021" width="3.7" height="15.0" fill="rgb(227,73,45)" rx="2" ry="2" />
<text  x="943.18" y="2031.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="630.3" y="1925" width="0.2" height="15.0" fill="rgb(226,14,20)" rx="2" ry="2" />
<text  x="633.26" y="1935.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="957.8" y="1077" width="0.2" height="15.0" fill="rgb(208,206,32)" rx="2" ry="2" />
<text  x="960.79" y="1087.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (17 samples, 0.32%)</title><rect x="784.3" y="1749" width="3.8" height="15.0" fill="rgb(211,78,25)" rx="2" ry="2" />
<text  x="787.34" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="924.1" y="1845" width="0.4" height="15.0" fill="rgb(251,85,24)" rx="2" ry="2" />
<text  x="927.11" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="733.1" y="1749" width="0.2" height="15.0" fill="rgb(248,61,25)" rx="2" ry="2" />
<text  x="736.06" y="1759.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="733.3" y="1749" width="0.2" height="15.0" fill="rgb(242,105,35)" rx="2" ry="2" />
<text  x="736.28" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (5 samples, 0.09%)</title><rect x="429.1" y="1781" width="1.1" height="15.0" fill="rgb(236,82,38)" rx="2" ry="2" />
<text  x="432.09" y="1791.5" ></text>
</g>
<g >
<title>__asan_set_shadow_00 (1 samples, 0.02%)</title><rect x="770.9" y="1797" width="0.2" height="15.0" fill="rgb(252,67,47)" rx="2" ry="2" />
<text  x="773.91" y="1807.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="641.5" y="1845" width="0.2" height="15.0" fill="rgb(244,89,22)" rx="2" ry="2" />
<text  x="644.49" y="1855.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.06%)</title><rect x="766.5" y="1765" width="0.7" height="15.0" fill="rgb(238,33,17)" rx="2" ry="2" />
<text  x="769.51" y="1775.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.04%)</title><rect x="829.0" y="1813" width="0.5" height="15.0" fill="rgb(222,190,36)" rx="2" ry="2" />
<text  x="832.02" y="1823.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.04%)</title><rect x="667.7" y="1797" width="0.4" height="15.0" fill="rgb(220,215,0)" rx="2" ry="2" />
<text  x="670.68" y="1807.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (15 samples, 0.28%)</title><rect x="882.3" y="1845" width="3.3" height="15.0" fill="rgb(241,221,34)" rx="2" ry="2" />
<text  x="885.29" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (3 samples, 0.06%)</title><rect x="52.7" y="1829" width="0.7" height="15.0" fill="rgb(205,198,31)" rx="2" ry="2" />
<text  x="55.70" y="1839.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (9 samples, 0.17%)</title><rect x="1113.4" y="2053" width="2.0" height="15.0" fill="rgb(241,64,21)" rx="2" ry="2" />
<text  x="1116.40" y="2063.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (1,931 samples, 36.02%)</title><rect x="205.5" y="1957" width="425.0" height="15.0" fill="rgb(240,66,49)" rx="2" ry="2" />
<text  x="208.46" y="1967.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>CalcPSTScore (35 samples, 0.65%)</title><rect x="715.7" y="1845" width="7.7" height="15.0" fill="rgb(247,143,47)" rx="2" ry="2" />
<text  x="718.67" y="1855.5" ></text>
</g>
<g >
<title>__pthread_getspecific (17 samples, 0.32%)</title><rect x="1130.4" y="2053" width="3.7" height="15.0" fill="rgb(244,213,51)" rx="2" ry="2" />
<text  x="1133.35" y="2063.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="87.7" y="1765" width="0.2" height="15.0" fill="rgb(249,37,50)" rx="2" ry="2" />
<text  x="90.70" y="1775.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (1 samples, 0.02%)</title><rect x="593.9" y="1765" width="0.3" height="15.0" fill="rgb(206,154,43)" rx="2" ry="2" />
<text  x="596.95" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (5 samples, 0.09%)</title><rect x="948.5" y="37" width="1.1" height="15.0" fill="rgb(226,90,11)" rx="2" ry="2" />
<text  x="951.54" y="47.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (1,400 samples, 26.11%)</title><rect x="630.9" y="1941" width="308.2" height="15.0" fill="rgb(221,133,10)" rx="2" ry="2" />
<text  x="633.93" y="1951.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.04%)</title><rect x="407.7" y="1765" width="0.5" height="15.0" fill="rgb(212,117,47)" rx="2" ry="2" />
<text  x="410.74" y="1775.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.04%)</title><rect x="206.8" y="1909" width="0.4" height="15.0" fill="rgb(241,33,24)" rx="2" ry="2" />
<text  x="209.78" y="1919.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="310.7" y="1797" width="0.2" height="15.0" fill="rgb(242,28,50)" rx="2" ry="2" />
<text  x="313.67" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (7 samples, 0.13%)</title><rect x="907.6" y="1813" width="1.5" height="15.0" fill="rgb(211,148,10)" rx="2" ry="2" />
<text  x="910.60" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="637.3" y="1813" width="0.2" height="15.0" fill="rgb(213,208,40)" rx="2" ry="2" />
<text  x="640.31" y="1823.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="816.3" y="1813" width="0.2" height="15.0" fill="rgb(246,136,15)" rx="2" ry="2" />
<text  x="819.26" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (67 samples, 1.25%)</title><rect x="993.2" y="2021" width="14.8" height="15.0" fill="rgb(216,143,7)" rx="2" ry="2" />
<text  x="996.22" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 1.21%)</title><rect x="943.9" y="1125" width="14.3" height="15.0" fill="rgb(212,170,53)" rx="2" ry="2" />
<text  x="946.92" y="1135.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="178.4" y="1829" width="0.2" height="15.0" fill="rgb(234,15,2)" rx="2" ry="2" />
<text  x="181.38" y="1839.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (56 samples, 1.04%)</title><rect x="478.4" y="1829" width="12.3" height="15.0" fill="rgb(254,9,35)" rx="2" ry="2" />
<text  x="481.39" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (1 samples, 0.02%)</title><rect x="817.1" y="1829" width="0.3" height="15.0" fill="rgb(218,38,12)" rx="2" ry="2" />
<text  x="820.14" y="1839.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (4 samples, 0.07%)</title><rect x="632.7" y="1861" width="0.9" height="15.0" fill="rgb(238,135,37)" rx="2" ry="2" />
<text  x="635.69" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.04%)</title><rect x="700.7" y="1765" width="0.4" height="15.0" fill="rgb(233,53,23)" rx="2" ry="2" />
<text  x="703.70" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="635.8" y="1877" width="0.4" height="15.0" fill="rgb(213,57,38)" rx="2" ry="2" />
<text  x="638.77" y="1887.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="641.7" y="1829" width="0.2" height="15.0" fill="rgb(244,20,41)" rx="2" ry="2" />
<text  x="644.71" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (1 samples, 0.02%)</title><rect x="922.3" y="1781" width="0.3" height="15.0" fill="rgb(244,170,53)" rx="2" ry="2" />
<text  x="925.35" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (37 samples, 0.69%)</title><rect x="586.7" y="1845" width="8.1" height="15.0" fill="rgb(253,56,34)" rx="2" ry="2" />
<text  x="589.68" y="1855.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (6 samples, 0.11%)</title><rect x="599.4" y="1829" width="1.4" height="15.0" fill="rgb(230,150,40)" rx="2" ry="2" />
<text  x="602.45" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="954.3" y="581" width="0.2" height="15.0" fill="rgb(248,176,12)" rx="2" ry="2" />
<text  x="957.26" y="591.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="757.3" y="1701" width="0.2" height="15.0" fill="rgb(218,89,23)" rx="2" ry="2" />
<text  x="760.27" y="1711.5" ></text>
</g>
<g >
<title>CalcPSTScore (3 samples, 0.06%)</title><rect x="631.4" y="1893" width="0.6" height="15.0" fill="rgb(243,8,30)" rx="2" ry="2" />
<text  x="634.37" y="1903.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (5 samples, 0.09%)</title><rect x="731.3" y="1813" width="1.1" height="15.0" fill="rgb(249,81,39)" rx="2" ry="2" />
<text  x="734.29" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (5 samples, 0.09%)</title><rect x="597.7" y="1845" width="1.1" height="15.0" fill="rgb(239,109,8)" rx="2" ry="2" />
<text  x="600.69" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="236.7" y="1813" width="0.2" height="15.0" fill="rgb(232,22,33)" rx="2" ry="2" />
<text  x="239.71" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (2 samples, 0.04%)</title><rect x="514.0" y="1829" width="0.5" height="15.0" fill="rgb(253,139,23)" rx="2" ry="2" />
<text  x="517.05" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (23 samples, 0.43%)</title><rect x="445.8" y="1813" width="5.1" height="15.0" fill="rgb(205,77,9)" rx="2" ry="2" />
<text  x="448.81" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.04%)</title><rect x="23.9" y="1909" width="0.4" height="15.0" fill="rgb(243,227,11)" rx="2" ry="2" />
<text  x="26.87" y="1919.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (2 samples, 0.04%)</title><rect x="634.2" y="1829" width="0.5" height="15.0" fill="rgb(215,148,3)" rx="2" ry="2" />
<text  x="637.23" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (3 samples, 0.06%)</title><rect x="188.3" y="1829" width="0.6" height="15.0" fill="rgb(237,109,12)" rx="2" ry="2" />
<text  x="191.29" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (547 samples, 10.20%)</title><rect x="54.7" y="1877" width="120.4" height="15.0" fill="rgb(253,45,37)" rx="2" ry="2" />
<text  x="57.68" y="1887.5" >TSearchStrategy..</text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (1 samples, 0.02%)</title><rect x="90.3" y="1797" width="0.3" height="15.0" fill="rgb(216,8,22)" rx="2" ry="2" />
<text  x="93.34" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (31 samples, 0.58%)</title><rect x="225.5" y="1877" width="6.8" height="15.0" fill="rgb(213,22,9)" rx="2" ry="2" />
<text  x="228.49" y="1887.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="938.6" y="1909" width="0.3" height="15.0" fill="rgb(226,195,49)" rx="2" ry="2" />
<text  x="941.64" y="1919.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (1 samples, 0.02%)</title><rect x="220.9" y="1845" width="0.2" height="15.0" fill="rgb(249,52,19)" rx="2" ry="2" />
<text  x="223.86" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (26 samples, 0.48%)</title><rect x="589.1" y="1829" width="5.7" height="15.0" fill="rgb(226,69,19)" rx="2" ry="2" />
<text  x="592.10" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (7 samples, 0.13%)</title><rect x="932.3" y="1893" width="1.5" height="15.0" fill="rgb(210,186,28)" rx="2" ry="2" />
<text  x="935.25" y="1903.5" ></text>
</g>
<g >
<title>__pthread_getspecific (1 samples, 0.02%)</title><rect x="919.5" y="1813" width="0.2" height="15.0" fill="rgb(234,12,11)" rx="2" ry="2" />
<text  x="922.49" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="194.0" y="1845" width="0.2" height="15.0" fill="rgb(254,60,11)" rx="2" ry="2" />
<text  x="197.01" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (4 samples, 0.07%)</title><rect x="931.2" y="1861" width="0.8" height="15.0" fill="rgb(225,25,13)" rx="2" ry="2" />
<text  x="934.15" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.04%)</title><rect x="303.0" y="1813" width="0.4" height="15.0" fill="rgb(213,163,23)" rx="2" ry="2" />
<text  x="305.96" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (1 samples, 0.02%)</title><rect x="366.6" y="1781" width="0.2" height="15.0" fill="rgb(230,77,51)" rx="2" ry="2" />
<text  x="369.58" y="1791.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="356.7" y="1781" width="0.2" height="15.0" fill="rgb(249,105,19)" rx="2" ry="2" />
<text  x="359.67" y="1791.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (2 samples, 0.04%)</title><rect x="134.1" y="1845" width="0.5" height="15.0" fill="rgb(207,97,47)" rx="2" ry="2" />
<text  x="137.14" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (4 samples, 0.07%)</title><rect x="749.8" y="1813" width="0.9" height="15.0" fill="rgb(244,90,7)" rx="2" ry="2" />
<text  x="752.78" y="1823.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="205.0" y="1893" width="0.2" height="15.0" fill="rgb(233,90,41)" rx="2" ry="2" />
<text  x="208.02" y="1903.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (35 samples, 0.65%)</title><rect x="836.9" y="1829" width="7.8" height="15.0" fill="rgb(253,81,30)" rx="2" ry="2" />
<text  x="839.95" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (7 samples, 0.13%)</title><rect x="519.6" y="1829" width="1.5" height="15.0" fill="rgb(239,143,53)" rx="2" ry="2" />
<text  x="522.55" y="1839.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="739.7" y="1749" width="0.2" height="15.0" fill="rgb(220,37,32)" rx="2" ry="2" />
<text  x="742.66" y="1759.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (2 samples, 0.04%)</title><rect x="191.1" y="1877" width="0.5" height="15.0" fill="rgb(224,115,38)" rx="2" ry="2" />
<text  x="194.15" y="1887.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (2 samples, 0.04%)</title><rect x="302.1" y="1829" width="0.4" height="15.0" fill="rgb(218,215,36)" rx="2" ry="2" />
<text  x="305.08" y="1839.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (2 samples, 0.04%)</title><rect x="379.8" y="1781" width="0.4" height="15.0" fill="rgb(217,198,20)" rx="2" ry="2" />
<text  x="382.78" y="1791.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (3 samples, 0.06%)</title><rect x="85.7" y="1829" width="0.7" height="15.0" fill="rgb(210,217,13)" rx="2" ry="2" />
<text  x="88.72" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (1 samples, 0.02%)</title><rect x="737.2" y="1781" width="0.3" height="15.0" fill="rgb(244,222,3)" rx="2" ry="2" />
<text  x="740.24" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1 samples, 0.02%)</title><rect x="491.6" y="1845" width="0.2" height="15.0" fill="rgb(225,221,36)" rx="2" ry="2" />
<text  x="494.60" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (47 samples, 0.88%)</title><rect x="943.9" y="565" width="10.4" height="15.0" fill="rgb(227,146,45)" rx="2" ry="2" />
<text  x="946.92" y="575.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.04%)</title><rect x="691.7" y="1781" width="0.4" height="15.0" fill="rgb(218,30,17)" rx="2" ry="2" />
<text  x="694.68" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (14 samples, 0.26%)</title><rect x="682.2" y="1797" width="3.1" height="15.0" fill="rgb(247,9,9)" rx="2" ry="2" />
<text  x="685.21" y="1807.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="760.3" y="1621" width="0.3" height="15.0" fill="rgb(242,122,11)" rx="2" ry="2" />
<text  x="763.35" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, unsigned long, true&gt;::_S_equals (4 samples, 0.07%)</title><rect x="448.0" y="1797" width="0.9" height="15.0" fill="rgb(240,78,43)" rx="2" ry="2" />
<text  x="451.02" y="1807.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="39.3" y="1829" width="0.2" height="15.0" fill="rgb(248,3,9)" rx="2" ry="2" />
<text  x="42.27" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="364.8" y="1781" width="0.2" height="15.0" fill="rgb(208,183,29)" rx="2" ry="2" />
<text  x="367.81" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (3 samples, 0.06%)</title><rect x="42.1" y="1813" width="0.7" height="15.0" fill="rgb(243,187,19)" rx="2" ry="2" />
<text  x="45.14" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="378.7" y="1781" width="0.2" height="15.0" fill="rgb(251,27,36)" rx="2" ry="2" />
<text  x="381.68" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (5 samples, 0.09%)</title><rect x="49.2" y="1845" width="1.1" height="15.0" fill="rgb(218,36,26)" rx="2" ry="2" />
<text  x="52.18" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.06%)</title><rect x="30.9" y="1861" width="0.7" height="15.0" fill="rgb(214,175,19)" rx="2" ry="2" />
<text  x="33.91" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (3 samples, 0.06%)</title><rect x="829.7" y="1813" width="0.6" height="15.0" fill="rgb(206,20,3)" rx="2" ry="2" />
<text  x="832.68" y="1823.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="958.2" y="1189" width="0.2" height="15.0" fill="rgb(246,170,8)" rx="2" ry="2" />
<text  x="961.23" y="1199.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (1 samples, 0.02%)</title><rect x="630.0" y="1909" width="0.3" height="15.0" fill="rgb(251,45,41)" rx="2" ry="2" />
<text  x="633.04" y="1919.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (4 samples, 0.07%)</title><rect x="237.2" y="1797" width="0.8" height="15.0" fill="rgb(241,73,16)" rx="2" ry="2" />
<text  x="240.15" y="1807.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (3 samples, 0.06%)</title><rect x="378.9" y="1797" width="0.7" height="15.0" fill="rgb(226,224,43)" rx="2" ry="2" />
<text  x="381.90" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="383.5" y="1765" width="0.2" height="15.0" fill="rgb(249,60,41)" rx="2" ry="2" />
<text  x="386.52" y="1775.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_insert_node (1 samples, 0.02%)</title><rect x="610.7" y="1861" width="0.2" height="15.0" fill="rgb(221,2,10)" rx="2" ry="2" />
<text  x="613.68" y="1871.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.04%)</title><rect x="107.7" y="1813" width="0.5" height="15.0" fill="rgb(240,20,34)" rx="2" ry="2" />
<text  x="110.73" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (6 samples, 0.11%)</title><rect x="921.9" y="1797" width="1.3" height="15.0" fill="rgb(230,18,42)" rx="2" ry="2" />
<text  x="924.91" y="1807.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::fill (1 samples, 0.02%)</title><rect x="301.0" y="1829" width="0.2" height="15.0" fill="rgb(247,68,21)" rx="2" ry="2" />
<text  x="303.98" y="1839.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (11 samples, 0.21%)</title><rect x="226.4" y="1861" width="2.4" height="15.0" fill="rgb(252,229,2)" rx="2" ry="2" />
<text  x="229.37" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1027.1" y="2037" width="0.2" height="15.0" fill="rgb(210,229,10)" rx="2" ry="2" />
<text  x="1030.12" y="2047.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.04%)</title><rect x="741.4" y="1797" width="0.5" height="15.0" fill="rgb(216,100,12)" rx="2" ry="2" />
<text  x="744.42" y="1807.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="965.9" y="2005" width="0.2" height="15.0" fill="rgb(251,176,13)" rx="2" ry="2" />
<text  x="968.93" y="2015.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.04%)</title><rect x="765.4" y="1701" width="0.5" height="15.0" fill="rgb(232,43,17)" rx="2" ry="2" />
<text  x="768.41" y="1711.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="757.9" y="1685" width="0.2" height="15.0" fill="rgb(229,131,40)" rx="2" ry="2" />
<text  x="760.93" y="1695.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="32.5" y="1781" width="0.2" height="15.0" fill="rgb(245,160,1)" rx="2" ry="2" />
<text  x="35.45" y="1791.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="642.2" y="1813" width="0.2" height="15.0" fill="rgb(212,31,47)" rx="2" ry="2" />
<text  x="645.15" y="1823.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (2 samples, 0.04%)</title><rect x="48.7" y="1845" width="0.5" height="15.0" fill="rgb(239,156,17)" rx="2" ry="2" />
<text  x="51.74" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (2 samples, 0.04%)</title><rect x="173.5" y="1845" width="0.5" height="15.0" fill="rgb(252,219,3)" rx="2" ry="2" />
<text  x="176.54" y="1855.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::insert_or_assign&lt;TTranspositionTable::TNode&gt; (1 samples, 0.02%)</title><rect x="613.5" y="1877" width="0.3" height="15.0" fill="rgb(241,148,32)" rx="2" ry="2" />
<text  x="616.54" y="1887.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="628.3" y="1797" width="0.2" height="15.0" fill="rgb(228,111,7)" rx="2" ry="2" />
<text  x="631.28" y="1807.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="754.8" y="1701" width="0.3" height="15.0" fill="rgb(228,115,46)" rx="2" ry="2" />
<text  x="757.85" y="1711.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (1 samples, 0.02%)</title><rect x="590.0" y="1813" width="0.2" height="15.0" fill="rgb(249,92,11)" rx="2" ry="2" />
<text  x="592.99" y="1823.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="379.1" y="1765" width="0.2" height="15.0" fill="rgb(246,141,42)" rx="2" ry="2" />
<text  x="382.12" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="613.5" y="1861" width="0.3" height="15.0" fill="rgb(215,45,45)" rx="2" ry="2" />
<text  x="616.54" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="923.7" y="1781" width="0.2" height="15.0" fill="rgb(228,155,46)" rx="2" ry="2" />
<text  x="926.67" y="1791.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="789.8" y="1813" width="0.3" height="15.0" fill="rgb(225,118,1)" rx="2" ry="2" />
<text  x="792.84" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (2 samples, 0.04%)</title><rect x="201.9" y="1877" width="0.5" height="15.0" fill="rgb(225,49,15)" rx="2" ry="2" />
<text  x="204.93" y="1887.5" ></text>
</g>
<g >
<title>GetPieceType (5 samples, 0.09%)</title><rect x="719.2" y="1829" width="1.1" height="15.0" fill="rgb(235,3,2)" rx="2" ry="2" />
<text  x="722.19" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (2 samples, 0.04%)</title><rect x="496.9" y="1813" width="0.4" height="15.0" fill="rgb(233,185,10)" rx="2" ry="2" />
<text  x="499.88" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::MakeMove (1,931 samples, 36.02%)</title><rect x="205.5" y="1973" width="425.0" height="15.0" fill="rgb(236,142,46)" rx="2" ry="2" />
<text  x="208.46" y="1983.5" >TSearchStrategy::MakeMove</text>
</g>
<g >
<title>__asan_memset (1 samples, 0.02%)</title><rect x="140.7" y="1845" width="0.3" height="15.0" fill="rgb(230,179,5)" rx="2" ry="2" />
<text  x="143.74" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="642.2" y="1781" width="0.2" height="15.0" fill="rgb(216,2,41)" rx="2" ry="2" />
<text  x="645.15" y="1791.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (7 samples, 0.13%)</title><rect x="599.2" y="1845" width="1.6" height="15.0" fill="rgb(254,57,47)" rx="2" ry="2" />
<text  x="602.23" y="1855.5" ></text>
</g>
<g >
<title>THistoryHeuristics::Get (7 samples, 0.13%)</title><rect x="275.0" y="1845" width="1.6" height="15.0" fill="rgb(213,194,46)" rx="2" ry="2" />
<text  x="278.01" y="1855.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="851.0" y="1861" width="0.3" height="15.0" fill="rgb(250,173,33)" rx="2" ry="2" />
<text  x="854.03" y="1871.5" ></text>
</g>
<g >
<title>IsCapture (1 samples, 0.02%)</title><rect x="758.8" y="1717" width="0.2" height="15.0" fill="rgb(234,151,15)" rx="2" ry="2" />
<text  x="761.81" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (2 samples, 0.04%)</title><rect x="161.0" y="1829" width="0.4" height="15.0" fill="rgb(206,103,3)" rx="2" ry="2" />
<text  x="163.99" y="1839.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="641.7" y="1845" width="0.2" height="15.0" fill="rgb(231,192,11)" rx="2" ry="2" />
<text  x="644.71" y="1855.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="759.7" y="1701" width="0.2" height="15.0" fill="rgb(241,104,14)" rx="2" ry="2" />
<text  x="762.69" y="1711.5" ></text>
</g>
<g >
<title>CalcPSTScore (9 samples, 0.17%)</title><rect x="211.2" y="1893" width="2.0" height="15.0" fill="rgb(219,125,40)" rx="2" ry="2" />
<text  x="214.18" y="1903.5" ></text>
</g>
<g >
<title>std::_Rb_tree_header::_M_reset (2 samples, 0.04%)</title><rect x="444.7" y="1829" width="0.5" height="15.0" fill="rgb(208,27,27)" rx="2" ry="2" />
<text  x="447.71" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::ReleaseFreeMemoryToOS&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::MemoryMapper&gt; (3 samples, 0.06%)</title><rect x="1140.9" y="2053" width="0.7" height="15.0" fill="rgb(210,185,15)" rx="2" ry="2" />
<text  x="1143.92" y="2063.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (4 samples, 0.07%)</title><rect x="634.0" y="1877" width="0.9" height="15.0" fill="rgb(229,166,2)" rx="2" ry="2" />
<text  x="637.01" y="1887.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (4 samples, 0.07%)</title><rect x="83.3" y="1845" width="0.9" height="15.0" fill="rgb(207,51,34)" rx="2" ry="2" />
<text  x="86.30" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.04%)</title><rect x="495.1" y="1829" width="0.5" height="15.0" fill="rgb(233,180,34)" rx="2" ry="2" />
<text  x="498.12" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="22.5" y="1845" width="0.3" height="15.0" fill="rgb(218,95,20)" rx="2" ry="2" />
<text  x="25.55" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (54 samples, 1.01%)</title><rect x="943.9" y="741" width="11.9" height="15.0" fill="rgb(241,168,39)" rx="2" ry="2" />
<text  x="946.92" y="751.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (1 samples, 0.02%)</title><rect x="594.6" y="1749" width="0.2" height="15.0" fill="rgb(219,188,18)" rx="2" ry="2" />
<text  x="597.61" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="192.2" y="1861" width="0.5" height="15.0" fill="rgb(240,149,8)" rx="2" ry="2" />
<text  x="195.25" y="1871.5" ></text>
</g>
<g >
<title>CalcPSTScore (2 samples, 0.04%)</title><rect x="758.1" y="1717" width="0.5" height="15.0" fill="rgb(254,11,24)" rx="2" ry="2" />
<text  x="761.15" y="1727.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (10 samples, 0.19%)</title><rect x="935.8" y="1893" width="2.2" height="15.0" fill="rgb(216,31,23)" rx="2" ry="2" />
<text  x="938.78" y="1903.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (2 samples, 0.04%)</title><rect x="174.4" y="1861" width="0.5" height="15.0" fill="rgb(226,8,23)" rx="2" ry="2" />
<text  x="177.42" y="1871.5" ></text>
</g>
<g >
<title>__asan_memset (1 samples, 0.02%)</title><rect x="766.1" y="1765" width="0.2" height="15.0" fill="rgb(209,65,19)" rx="2" ry="2" />
<text  x="769.07" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="424.2" y="1797" width="0.3" height="15.0" fill="rgb(245,162,2)" rx="2" ry="2" />
<text  x="427.24" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (5 samples, 0.09%)</title><rect x="927.4" y="1861" width="1.1" height="15.0" fill="rgb(250,10,26)" rx="2" ry="2" />
<text  x="930.41" y="1871.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (4 samples, 0.07%)</title><rect x="982.4" y="2037" width="0.9" height="15.0" fill="rgb(207,145,17)" rx="2" ry="2" />
<text  x="985.44" y="2047.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="303.0" y="1829" width="0.8" height="15.0" fill="rgb(211,208,44)" rx="2" ry="2" />
<text  x="305.96" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="233.4" y="1829" width="0.2" height="15.0" fill="rgb(213,117,52)" rx="2" ry="2" />
<text  x="236.41" y="1839.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (24 samples, 0.45%)</title><rect x="10.0" y="2053" width="5.3" height="15.0" fill="rgb(211,8,32)" rx="2" ry="2" />
<text  x="13.00" y="2063.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="641.9" y="1845" width="0.5" height="15.0" fill="rgb(240,122,22)" rx="2" ry="2" />
<text  x="644.93" y="1855.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="203.7" y="1893" width="0.2" height="15.0" fill="rgb(208,51,6)" rx="2" ry="2" />
<text  x="206.70" y="1903.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (9 samples, 0.17%)</title><rect x="318.2" y="1781" width="1.9" height="15.0" fill="rgb(215,69,38)" rx="2" ry="2" />
<text  x="321.15" y="1791.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (4 samples, 0.07%)</title><rect x="746.7" y="1797" width="0.9" height="15.0" fill="rgb(236,61,9)" rx="2" ry="2" />
<text  x="749.70" y="1807.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="237.2" y="1845" width="0.8" height="15.0" fill="rgb(242,17,45)" rx="2" ry="2" />
<text  x="240.15" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (28 samples, 0.52%)</title><rect x="154.4" y="1829" width="6.2" height="15.0" fill="rgb(249,84,14)" rx="2" ry="2" />
<text  x="157.39" y="1839.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (3 samples, 0.06%)</title><rect x="66.3" y="1845" width="0.7" height="15.0" fill="rgb(243,0,26)" rx="2" ry="2" />
<text  x="69.35" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="690.1" y="1829" width="0.3" height="15.0" fill="rgb(232,189,9)" rx="2" ry="2" />
<text  x="693.13" y="1839.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.06%)</title><rect x="82.2" y="1813" width="0.7" height="15.0" fill="rgb(216,103,49)" rx="2" ry="2" />
<text  x="85.20" y="1823.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (1 samples, 0.02%)</title><rect x="21.7" y="1909" width="0.2" height="15.0" fill="rgb(219,202,45)" rx="2" ry="2" />
<text  x="24.67" y="1919.5" ></text>
</g>
<g >
<title>GetPieceValue (1 samples, 0.02%)</title><rect x="637.7" y="1845" width="0.3" height="15.0" fill="rgb(221,125,11)" rx="2" ry="2" />
<text  x="640.75" y="1855.5" ></text>
</g>
<g >
<title>IsTerminal (1 samples, 0.02%)</title><rect x="723.6" y="1845" width="0.2" height="15.0" fill="rgb(243,101,17)" rx="2" ry="2" />
<text  x="726.59" y="1855.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="594.2" y="1765" width="0.2" height="15.0" fill="rgb(218,63,23)" rx="2" ry="2" />
<text  x="597.17" y="1775.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="32.0" y="1877" width="0.2" height="15.0" fill="rgb(213,129,6)" rx="2" ry="2" />
<text  x="35.01" y="1887.5" ></text>
</g>
<g >
<title>TTranspositionTable::Insert (2 samples, 0.04%)</title><rect x="595.5" y="1877" width="0.4" height="15.0" fill="rgb(247,31,15)" rx="2" ry="2" />
<text  x="598.49" y="1887.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.06%)</title><rect x="642.6" y="1829" width="0.7" height="15.0" fill="rgb(236,179,37)" rx="2" ry="2" />
<text  x="645.59" y="1839.5" ></text>
</g>
<g >
<title>__lsan::ForEachChunk (2 samples, 0.04%)</title><rect x="986.2" y="2037" width="0.4" height="15.0" fill="rgb(229,182,12)" rx="2" ry="2" />
<text  x="989.18" y="2047.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="365.5" y="1781" width="0.2" height="15.0" fill="rgb(242,52,16)" rx="2" ry="2" />
<text  x="368.47" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (1 samples, 0.02%)</title><rect x="755.7" y="1765" width="0.2" height="15.0" fill="rgb(247,61,42)" rx="2" ry="2" />
<text  x="758.73" y="1775.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="664.4" y="1781" width="0.2" height="15.0" fill="rgb(214,145,41)" rx="2" ry="2" />
<text  x="667.38" y="1791.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.04%)</title><rect x="394.7" y="1765" width="0.5" height="15.0" fill="rgb(249,212,38)" rx="2" ry="2" />
<text  x="397.75" y="1775.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="904.1" y="1813" width="0.2" height="15.0" fill="rgb(216,24,46)" rx="2" ry="2" />
<text  x="907.08" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (3 samples, 0.06%)</title><rect x="430.2" y="1797" width="0.6" height="15.0" fill="rgb(216,149,19)" rx="2" ry="2" />
<text  x="433.19" y="1807.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="302.7" y="1813" width="0.3" height="15.0" fill="rgb(228,113,46)" rx="2" ry="2" />
<text  x="305.74" y="1823.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="377.1" y="1749" width="0.3" height="15.0" fill="rgb(216,57,44)" rx="2" ry="2" />
<text  x="380.14" y="1759.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="29.6" y="1845" width="0.2" height="15.0" fill="rgb(244,172,31)" rx="2" ry="2" />
<text  x="32.59" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.02%)</title><rect x="930.9" y="1861" width="0.3" height="15.0" fill="rgb(208,91,39)" rx="2" ry="2" />
<text  x="933.93" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (82 samples, 1.53%)</title><rect x="1008.0" y="2021" width="18.0" height="15.0" fill="rgb(219,173,13)" rx="2" ry="2" />
<text  x="1010.97" y="2031.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="221.5" y="1829" width="0.2" height="15.0" fill="rgb(238,204,1)" rx="2" ry="2" />
<text  x="224.52" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (1 samples, 0.02%)</title><rect x="849.9" y="1813" width="0.3" height="15.0" fill="rgb(254,139,1)" rx="2" ry="2" />
<text  x="852.93" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="595.7" y="1829" width="0.2" height="15.0" fill="rgb(244,82,35)" rx="2" ry="2" />
<text  x="598.71" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (3 samples, 0.06%)</title><rect x="408.2" y="1797" width="0.6" height="15.0" fill="rgb(214,61,28)" rx="2" ry="2" />
<text  x="411.18" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (2 samples, 0.04%)</title><rect x="671.6" y="1813" width="0.5" height="15.0" fill="rgb(222,162,53)" rx="2" ry="2" />
<text  x="674.65" y="1823.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="761.2" y="1669" width="0.5" height="15.0" fill="rgb(215,189,45)" rx="2" ry="2" />
<text  x="764.23" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (16 samples, 0.30%)</title><rect x="113.2" y="1797" width="3.6" height="15.0" fill="rgb(238,86,38)" rx="2" ry="2" />
<text  x="116.23" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (26 samples, 0.48%)</title><rect x="286.9" y="1797" width="5.7" height="15.0" fill="rgb(239,23,20)" rx="2" ry="2" />
<text  x="289.90" y="1807.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (33 samples, 0.62%)</title><rect x="837.4" y="1813" width="7.3" height="15.0" fill="rgb(248,63,30)" rx="2" ry="2" />
<text  x="840.39" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (213 samples, 3.97%)</title><rect x="742.1" y="1829" width="46.9" height="15.0" fill="rgb(222,4,17)" rx="2" ry="2" />
<text  x="745.08" y="1839.5" >TSea..</text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.04%)</title><rect x="23.9" y="1877" width="0.4" height="15.0" fill="rgb(242,38,15)" rx="2" ry="2" />
<text  x="26.87" y="1887.5" ></text>
</g>
<g >
<title>GetPieceValue (1 samples, 0.02%)</title><rect x="47.4" y="1829" width="0.2" height="15.0" fill="rgb(236,69,36)" rx="2" ry="2" />
<text  x="50.42" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.04%)</title><rect x="204.6" y="1909" width="0.4" height="15.0" fill="rgb(244,55,14)" rx="2" ry="2" />
<text  x="207.58" y="1919.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="755.7" y="1717" width="0.2" height="15.0" fill="rgb(225,78,19)" rx="2" ry="2" />
<text  x="758.73" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="850.4" y="1797" width="0.2" height="15.0" fill="rgb(213,51,27)" rx="2" ry="2" />
<text  x="853.37" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (20 samples, 0.37%)</title><rect x="918.8" y="1829" width="4.4" height="15.0" fill="rgb(242,169,40)" rx="2" ry="2" />
<text  x="921.83" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (1,397 samples, 26.06%)</title><rect x="631.1" y="1909" width="307.5" height="15.0" fill="rgb(210,7,46)" rx="2" ry="2" />
<text  x="634.15" y="1919.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (20 samples, 0.37%)</title><rect x="27.2" y="1893" width="4.4" height="15.0" fill="rgb(216,126,22)" rx="2" ry="2" />
<text  x="30.17" y="1903.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::BuildAttacksTable (1 samples, 0.02%)</title><rect x="21.2" y="1989" width="0.2" height="15.0" fill="rgb(205,35,48)" rx="2" ry="2" />
<text  x="24.23" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (110 samples, 2.05%)</title><rect x="943.9" y="2037" width="24.2" height="15.0" fill="rgb(252,191,37)" rx="2" ry="2" />
<text  x="946.92" y="2047.5" >[..</text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (1 samples, 0.02%)</title><rect x="492.9" y="1813" width="0.2" height="15.0" fill="rgb(213,127,34)" rx="2" ry="2" />
<text  x="495.92" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (1 samples, 0.02%)</title><rect x="47.6" y="1813" width="0.3" height="15.0" fill="rgb(245,197,21)" rx="2" ry="2" />
<text  x="50.64" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (45 samples, 0.84%)</title><rect x="480.4" y="1797" width="9.9" height="15.0" fill="rgb(237,18,44)" rx="2" ry="2" />
<text  x="483.37" y="1807.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&gt;::pair&lt;std::_Rb_tree_node&lt;std::pair&lt;int const, TSearchNode&gt; &gt;*&amp;, std::_Rb_tree_node_base*&amp;, true&gt; (1 samples, 0.02%)</title><rect x="937.5" y="1861" width="0.3" height="15.0" fill="rgb(236,222,14)" rx="2" ry="2" />
<text  x="940.54" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="496.9" y="1829" width="0.9" height="15.0" fill="rgb(247,20,31)" rx="2" ry="2" />
<text  x="499.88" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (2 samples, 0.04%)</title><rect x="708.6" y="1797" width="0.5" height="15.0" fill="rgb(231,17,39)" rx="2" ry="2" />
<text  x="711.62" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.07%)</title><rect x="137.9" y="1845" width="0.9" height="15.0" fill="rgb(212,64,31)" rx="2" ry="2" />
<text  x="140.88" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.06%)</title><rect x="739.4" y="1781" width="0.7" height="15.0" fill="rgb(231,85,0)" rx="2" ry="2" />
<text  x="742.44" y="1791.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="32.7" y="1765" width="0.2" height="15.0" fill="rgb(238,153,51)" rx="2" ry="2" />
<text  x="35.67" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="232.1" y="1829" width="0.2" height="15.0" fill="rgb(235,79,17)" rx="2" ry="2" />
<text  x="235.09" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="955.1" y="677" width="0.3" height="15.0" fill="rgb(210,42,16)" rx="2" ry="2" />
<text  x="958.14" y="687.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="52.5" y="1813" width="0.2" height="15.0" fill="rgb(225,185,8)" rx="2" ry="2" />
<text  x="55.48" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="695.4" y="1813" width="0.2" height="15.0" fill="rgb(249,172,18)" rx="2" ry="2" />
<text  x="698.42" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="32.9" y="1845" width="0.2" height="15.0" fill="rgb(250,66,39)" rx="2" ry="2" />
<text  x="35.89" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="48.7" y="1829" width="0.5" height="15.0" fill="rgb(243,134,13)" rx="2" ry="2" />
<text  x="51.74" y="1839.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (3 samples, 0.06%)</title><rect x="138.1" y="1829" width="0.7" height="15.0" fill="rgb(235,194,44)" rx="2" ry="2" />
<text  x="141.10" y="1839.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (9 samples, 0.17%)</title><rect x="606.1" y="1829" width="1.9" height="15.0" fill="rgb(253,53,7)" rx="2" ry="2" />
<text  x="609.05" y="1839.5" ></text>
</g>
<g >
<title>CalcPSTScore (1 samples, 0.02%)</title><rect x="207.0" y="1861" width="0.2" height="15.0" fill="rgb(250,5,19)" rx="2" ry="2" />
<text  x="210.00" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="925.9" y="1829" width="0.2" height="15.0" fill="rgb(222,175,54)" rx="2" ry="2" />
<text  x="928.87" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (7 samples, 0.13%)</title><rect x="380.7" y="1781" width="1.5" height="15.0" fill="rgb(235,115,47)" rx="2" ry="2" />
<text  x="383.66" y="1791.5" ></text>
</g>
<g >
<title>std::array&lt;std::array&lt;int, 64ul&gt;, 6ul&gt;::at (1 samples, 0.02%)</title><rect x="40.8" y="1845" width="0.2" height="15.0" fill="rgb(216,208,27)" rx="2" ry="2" />
<text  x="43.82" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (595 samples, 11.10%)</title><rect x="715.4" y="1861" width="131.0" height="15.0" fill="rgb(235,45,6)" rx="2" ry="2" />
<text  x="718.45" y="1871.5" >TSearchStrategy:..</text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="309.6" y="1813" width="0.2" height="15.0" fill="rgb(247,90,17)" rx="2" ry="2" />
<text  x="312.57" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (5 samples, 0.09%)</title><rect x="383.7" y="1733" width="1.1" height="15.0" fill="rgb(253,104,21)" rx="2" ry="2" />
<text  x="386.74" y="1743.5" ></text>
</g>
<g >
<title>bratko_kopec::test_method (836 samples, 15.59%)</title><rect x="21.4" y="2005" width="184.1" height="15.0" fill="rgb(226,108,19)" rx="2" ry="2" />
<text  x="24.45" y="2015.5" >bratko_kopec::test_method</text>
</g>
<g >
<title>__pthread_getspecific (1 samples, 0.02%)</title><rect x="33.3" y="1877" width="0.3" height="15.0" fill="rgb(224,52,26)" rx="2" ry="2" />
<text  x="36.33" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (1 samples, 0.02%)</title><rect x="936.7" y="1845" width="0.2" height="15.0" fill="rgb(224,204,46)" rx="2" ry="2" />
<text  x="939.66" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (73 samples, 1.36%)</title><rect x="943.9" y="1461" width="16.1" height="15.0" fill="rgb(218,30,5)" rx="2" ry="2" />
<text  x="946.92" y="1471.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (1 samples, 0.02%)</title><rect x="767.4" y="1765" width="0.2" height="15.0" fill="rgb(237,67,7)" rx="2" ry="2" />
<text  x="770.39" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (30 samples, 0.56%)</title><rect x="943.9" y="165" width="6.6" height="15.0" fill="rgb(212,164,21)" rx="2" ry="2" />
<text  x="946.92" y="175.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (5 samples, 0.09%)</title><rect x="65.2" y="1845" width="1.1" height="15.0" fill="rgb(243,218,12)" rx="2" ry="2" />
<text  x="68.25" y="1855.5" ></text>
</g>
<g >
<title>__pthread_getspecific (1 samples, 0.02%)</title><rect x="590.2" y="1813" width="0.2" height="15.0" fill="rgb(205,1,30)" rx="2" ry="2" />
<text  x="593.21" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="220.2" y="1861" width="0.2" height="15.0" fill="rgb(226,93,26)" rx="2" ry="2" />
<text  x="223.20" y="1871.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.04%)</title><rect x="219.5" y="1845" width="0.5" height="15.0" fill="rgb(253,59,50)" rx="2" ry="2" />
<text  x="222.54" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, false, true&gt;::operator (1 samples, 0.02%)</title><rect x="295.0" y="1829" width="0.3" height="15.0" fill="rgb(232,62,5)" rx="2" ry="2" />
<text  x="298.04" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="849.7" y="1845" width="0.5" height="15.0" fill="rgb(247,145,33)" rx="2" ry="2" />
<text  x="852.71" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (4 samples, 0.07%)</title><rect x="45.7" y="1845" width="0.8" height="15.0" fill="rgb(241,171,42)" rx="2" ry="2" />
<text  x="48.66" y="1855.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="511.2" y="1829" width="0.2" height="15.0" fill="rgb(226,15,42)" rx="2" ry="2" />
<text  x="514.19" y="1839.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="798.9" y="1797" width="0.2" height="15.0" fill="rgb(211,13,27)" rx="2" ry="2" />
<text  x="801.87" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (3 samples, 0.06%)</title><rect x="191.6" y="1877" width="0.6" height="15.0" fill="rgb(238,144,37)" rx="2" ry="2" />
<text  x="194.59" y="1887.5" ></text>
</g>
<g >
<title>CalcPSTScore (6 samples, 0.11%)</title><rect x="694.1" y="1829" width="1.3" height="15.0" fill="rgb(228,97,9)" rx="2" ry="2" />
<text  x="697.10" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (501 samples, 9.35%)</title><rect x="335.5" y="1845" width="110.3" height="15.0" fill="rgb(216,99,35)" rx="2" ry="2" />
<text  x="338.54" y="1855.5" >TSearchStrate..</text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="442.7" y="1829" width="0.3" height="15.0" fill="rgb(225,221,44)" rx="2" ry="2" />
<text  x="445.73" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (3 samples, 0.06%)</title><rect x="697.2" y="1749" width="0.6" height="15.0" fill="rgb(206,148,17)" rx="2" ry="2" />
<text  x="700.18" y="1759.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="46.1" y="1797" width="0.2" height="15.0" fill="rgb(225,18,35)" rx="2" ry="2" />
<text  x="49.10" y="1807.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (5 samples, 0.09%)</title><rect x="231.0" y="1829" width="1.1" height="15.0" fill="rgb(250,118,52)" rx="2" ry="2" />
<text  x="233.99" y="1839.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="767.2" y="1781" width="0.2" height="15.0" fill="rgb(239,108,20)" rx="2" ry="2" />
<text  x="770.17" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="191.4" y="1845" width="0.2" height="15.0" fill="rgb(235,213,19)" rx="2" ry="2" />
<text  x="194.37" y="1855.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="32.2" y="1845" width="0.3" height="15.0" fill="rgb(232,6,8)" rx="2" ry="2" />
<text  x="35.23" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (2 samples, 0.04%)</title><rect x="608.7" y="1829" width="0.4" height="15.0" fill="rgb(218,40,38)" rx="2" ry="2" />
<text  x="611.69" y="1839.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (3 samples, 0.06%)</title><rect x="332.9" y="1829" width="0.7" height="15.0" fill="rgb(211,83,46)" rx="2" ry="2" />
<text  x="335.90" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (9 samples, 0.17%)</title><rect x="467.8" y="1813" width="2.0" height="15.0" fill="rgb(207,69,23)" rx="2" ry="2" />
<text  x="470.83" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (4 samples, 0.07%)</title><rect x="219.5" y="1877" width="0.9" height="15.0" fill="rgb(249,200,13)" rx="2" ry="2" />
<text  x="222.54" y="1887.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="39.9" y="1861" width="0.3" height="15.0" fill="rgb(246,166,20)" rx="2" ry="2" />
<text  x="42.93" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="83.3" y="1781" width="0.2" height="15.0" fill="rgb(226,119,29)" rx="2" ry="2" />
<text  x="86.30" y="1791.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="31.8" y="1861" width="0.2" height="15.0" fill="rgb(209,0,26)" rx="2" ry="2" />
<text  x="34.79" y="1871.5" ></text>
</g>
<g >
<title>CalcPSTScore (1 samples, 0.02%)</title><rect x="754.0" y="1781" width="0.2" height="15.0" fill="rgb(223,192,24)" rx="2" ry="2" />
<text  x="756.97" y="1791.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (9 samples, 0.17%)</title><rect x="720.3" y="1829" width="2.0" height="15.0" fill="rgb(221,223,18)" rx="2" ry="2" />
<text  x="723.29" y="1839.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="408.8" y="1829" width="0.3" height="15.0" fill="rgb(248,83,21)" rx="2" ry="2" />
<text  x="411.84" y="1839.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="693.0" y="1813" width="0.2" height="15.0" fill="rgb(246,13,46)" rx="2" ry="2" />
<text  x="696.00" y="1823.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.04%)</title><rect x="933.8" y="1877" width="0.4" height="15.0" fill="rgb(253,219,28)" rx="2" ry="2" />
<text  x="936.79" y="1887.5" ></text>
</g>
<g >
<title>IsCapture (2 samples, 0.04%)</title><rect x="219.1" y="1877" width="0.4" height="15.0" fill="rgb(251,90,1)" rx="2" ry="2" />
<text  x="222.10" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (105 samples, 1.96%)</title><rect x="385.7" y="1813" width="23.1" height="15.0" fill="rgb(230,219,31)" rx="2" ry="2" />
<text  x="388.72" y="1823.5" >l..</text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="235.0" y="1845" width="0.2" height="15.0" fill="rgb(254,8,47)" rx="2" ry="2" />
<text  x="237.95" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (11 samples, 0.21%)</title><rect x="632.5" y="1893" width="2.4" height="15.0" fill="rgb(254,125,32)" rx="2" ry="2" />
<text  x="635.47" y="1903.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (22 samples, 0.41%)</title><rect x="783.2" y="1781" width="4.9" height="15.0" fill="rgb(232,68,35)" rx="2" ry="2" />
<text  x="786.24" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (21 samples, 0.39%)</title><rect x="176.4" y="1877" width="4.6" height="15.0" fill="rgb(244,38,37)" rx="2" ry="2" />
<text  x="179.40" y="1887.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="233.4" y="1845" width="0.5" height="15.0" fill="rgb(220,175,7)" rx="2" ry="2" />
<text  x="236.41" y="1855.5" ></text>
</g>
<g >
<title>TTranspositionTable::Insert (2 samples, 0.04%)</title><rect x="192.2" y="1893" width="0.5" height="15.0" fill="rgb(221,33,33)" rx="2" ry="2" />
<text  x="195.25" y="1903.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="754.2" y="1781" width="0.2" height="15.0" fill="rgb(211,80,6)" rx="2" ry="2" />
<text  x="757.19" y="1791.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (17 samples, 0.32%)</title><rect x="265.5" y="1829" width="3.8" height="15.0" fill="rgb(233,72,22)" rx="2" ry="2" />
<text  x="268.55" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::MakeMove (836 samples, 15.59%)</title><rect x="21.4" y="1973" width="184.1" height="15.0" fill="rgb(236,170,20)" rx="2" ry="2" />
<text  x="24.45" y="1983.5" >TSearchStrategy::MakeMove</text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (4 samples, 0.07%)</title><rect x="380.7" y="1765" width="0.8" height="15.0" fill="rgb(208,217,33)" rx="2" ry="2" />
<text  x="383.66" y="1775.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (1 samples, 0.02%)</title><rect x="380.2" y="1781" width="0.2" height="15.0" fill="rgb(211,72,54)" rx="2" ry="2" />
<text  x="383.22" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (4 samples, 0.07%)</title><rect x="860.9" y="1829" width="0.9" height="15.0" fill="rgb(247,93,45)" rx="2" ry="2" />
<text  x="863.94" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (4 samples, 0.07%)</title><rect x="707.7" y="1797" width="0.9" height="15.0" fill="rgb(254,67,0)" rx="2" ry="2" />
<text  x="710.74" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (1 samples, 0.02%)</title><rect x="755.3" y="1733" width="0.2" height="15.0" fill="rgb(228,24,0)" rx="2" ry="2" />
<text  x="758.29" y="1743.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="696.5" y="1765" width="0.2" height="15.0" fill="rgb(234,77,10)" rx="2" ry="2" />
<text  x="699.52" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::RunFreeHooks (3 samples, 0.06%)</title><rect x="1139.6" y="2053" width="0.7" height="15.0" fill="rgb(227,206,19)" rx="2" ry="2" />
<text  x="1142.60" y="2063.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (32 samples, 0.60%)</title><rect x="525.9" y="1797" width="7.1" height="15.0" fill="rgb(205,90,44)" rx="2" ry="2" />
<text  x="528.93" y="1807.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="29.8" y="1877" width="0.2" height="15.0" fill="rgb(213,110,50)" rx="2" ry="2" />
<text  x="32.81" y="1887.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (2 samples, 0.04%)</title><rect x="202.4" y="1893" width="0.4" height="15.0" fill="rgb(227,34,51)" rx="2" ry="2" />
<text  x="205.37" y="1903.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="757.3" y="1685" width="0.2" height="15.0" fill="rgb(250,51,24)" rx="2" ry="2" />
<text  x="760.27" y="1695.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (2 samples, 0.04%)</title><rect x="551.0" y="1829" width="0.5" height="15.0" fill="rgb(207,61,6)" rx="2" ry="2" />
<text  x="554.03" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="20.8" y="1925" width="0.2" height="15.0" fill="rgb(244,210,31)" rx="2" ry="2" />
<text  x="23.79" y="1935.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (2 samples, 0.04%)</title><rect x="594.8" y="1861" width="0.5" height="15.0" fill="rgb(247,204,19)" rx="2" ry="2" />
<text  x="597.83" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (24 samples, 0.45%)</title><rect x="831.2" y="1813" width="5.3" height="15.0" fill="rgb(229,48,32)" rx="2" ry="2" />
<text  x="834.22" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (33 samples, 0.62%)</title><rect x="1182.5" y="2053" width="7.3" height="15.0" fill="rgb(206,3,20)" rx="2" ry="2" />
<text  x="1185.52" y="2063.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="302.3" y="1781" width="0.2" height="15.0" fill="rgb(232,45,32)" rx="2" ry="2" />
<text  x="305.30" y="1791.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="629.6" y="1909" width="0.2" height="15.0" fill="rgb(238,185,11)" rx="2" ry="2" />
<text  x="632.60" y="1919.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="611.8" y="1813" width="0.2" height="15.0" fill="rgb(230,106,52)" rx="2" ry="2" />
<text  x="614.78" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="760.8" y="1685" width="0.2" height="15.0" fill="rgb(212,196,22)" rx="2" ry="2" />
<text  x="763.79" y="1695.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="46.3" y="1829" width="0.2" height="15.0" fill="rgb(253,56,29)" rx="2" ry="2" />
<text  x="49.32" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (22 samples, 0.41%)</title><rect x="280.3" y="1813" width="4.8" height="15.0" fill="rgb(245,126,40)" rx="2" ry="2" />
<text  x="283.29" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (10 samples, 0.19%)</title><rect x="767.6" y="1797" width="2.2" height="15.0" fill="rgb(229,24,24)" rx="2" ry="2" />
<text  x="770.61" y="1807.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.04%)</title><rect x="109.0" y="1797" width="0.5" height="15.0" fill="rgb(240,206,8)" rx="2" ry="2" />
<text  x="112.05" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (5 samples, 0.09%)</title><rect x="353.4" y="1781" width="1.1" height="15.0" fill="rgb(218,74,50)" rx="2" ry="2" />
<text  x="356.37" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="193.8" y="1861" width="0.2" height="15.0" fill="rgb(243,143,41)" rx="2" ry="2" />
<text  x="196.79" y="1871.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="758.1" y="1701" width="0.3" height="15.0" fill="rgb(235,157,31)" rx="2" ry="2" />
<text  x="761.15" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (58 samples, 1.08%)</title><rect x="943.9" y="885" width="12.8" height="15.0" fill="rgb(247,196,42)" rx="2" ry="2" />
<text  x="946.92" y="895.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="763.4" y="1733" width="0.3" height="15.0" fill="rgb(248,155,15)" rx="2" ry="2" />
<text  x="766.43" y="1743.5" ></text>
</g>
<g >
<title>CalcPSTScore (3 samples, 0.06%)</title><rect x="378.2" y="1797" width="0.7" height="15.0" fill="rgb(229,80,10)" rx="2" ry="2" />
<text  x="381.24" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="382.0" y="1749" width="0.2" height="15.0" fill="rgb(249,212,17)" rx="2" ry="2" />
<text  x="384.98" y="1759.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="762.8" y="1701" width="0.4" height="15.0" fill="rgb(213,122,54)" rx="2" ry="2" />
<text  x="765.77" y="1711.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="451.3" y="1845" width="0.2" height="15.0" fill="rgb(245,223,25)" rx="2" ry="2" />
<text  x="454.32" y="1855.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="384.8" y="1797" width="0.3" height="15.0" fill="rgb(218,14,54)" rx="2" ry="2" />
<text  x="387.84" y="1807.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="747.6" y="1797" width="0.2" height="15.0" fill="rgb(206,145,36)" rx="2" ry="2" />
<text  x="750.58" y="1807.5" ></text>
</g>
<g >
<title>lczero::Position::Position (15 samples, 0.28%)</title><rect x="601.0" y="1877" width="3.3" height="15.0" fill="rgb(247,17,49)" rx="2" ry="2" />
<text  x="603.99" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="49.8" y="1781" width="0.3" height="15.0" fill="rgb(219,197,7)" rx="2" ry="2" />
<text  x="52.84" y="1791.5" ></text>
</g>
<g >
<title>IsCapture (1 samples, 0.02%)</title><rect x="30.0" y="1877" width="0.2" height="15.0" fill="rgb(216,40,25)" rx="2" ry="2" />
<text  x="33.03" y="1887.5" ></text>
</g>
<g >
<title>__pthread_getspecific (11 samples, 0.21%)</title><rect x="987.5" y="2037" width="2.4" height="15.0" fill="rgb(225,170,26)" rx="2" ry="2" />
<text  x="990.50" y="2047.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (3 samples, 0.06%)</title><rect x="175.1" y="1877" width="0.6" height="15.0" fill="rgb(227,228,23)" rx="2" ry="2" />
<text  x="178.08" y="1887.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (3 samples, 0.06%)</title><rect x="612.4" y="1877" width="0.7" height="15.0" fill="rgb(250,182,33)" rx="2" ry="2" />
<text  x="615.44" y="1887.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (4 samples, 0.07%)</title><rect x="966.4" y="2021" width="0.9" height="15.0" fill="rgb(240,17,2)" rx="2" ry="2" />
<text  x="969.37" y="2031.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (21 samples, 0.39%)</title><rect x="918.6" y="1861" width="4.6" height="15.0" fill="rgb(235,147,32)" rx="2" ry="2" />
<text  x="921.61" y="1871.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (2 samples, 0.04%)</title><rect x="929.2" y="1829" width="0.4" height="15.0" fill="rgb(217,71,46)" rx="2" ry="2" />
<text  x="932.17" y="1839.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="499.1" y="1861" width="0.2" height="15.0" fill="rgb(242,215,32)" rx="2" ry="2" />
<text  x="502.08" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (5 samples, 0.09%)</title><rect x="267.5" y="1813" width="1.1" height="15.0" fill="rgb(216,222,9)" rx="2" ry="2" />
<text  x="270.53" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.09%)</title><rect x="1026.0" y="2021" width="1.1" height="15.0" fill="rgb(237,97,10)" rx="2" ry="2" />
<text  x="1029.02" y="2031.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (1 samples, 0.02%)</title><rect x="921.2" y="1797" width="0.3" height="15.0" fill="rgb(208,198,26)" rx="2" ry="2" />
<text  x="924.25" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (6 samples, 0.11%)</title><rect x="634.9" y="1893" width="1.3" height="15.0" fill="rgb(214,127,17)" rx="2" ry="2" />
<text  x="637.89" y="1903.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.04%)</title><rect x="952.3" y="341" width="0.4" height="15.0" fill="rgb(238,3,7)" rx="2" ry="2" />
<text  x="955.28" y="351.5" ></text>
</g>
<g >
<title>GetFenBestMove (1,402 samples, 26.15%)</title><rect x="630.9" y="1989" width="308.6" height="15.0" fill="rgb(219,9,11)" rx="2" ry="2" />
<text  x="633.93" y="1999.5" >GetFenBestMove</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, unsigned long, true&gt;::_S_equals (4 samples, 0.07%)</title><rect x="283.8" y="1797" width="0.9" height="15.0" fill="rgb(227,68,17)" rx="2" ry="2" />
<text  x="286.81" y="1807.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (2 samples, 0.04%)</title><rect x="552.1" y="1829" width="0.5" height="15.0" fill="rgb(230,143,18)" rx="2" ry="2" />
<text  x="555.13" y="1839.5" ></text>
</g>
<g >
<title>IsPromotion (2 samples, 0.04%)</title><rect x="258.3" y="1861" width="0.4" height="15.0" fill="rgb(245,0,6)" rx="2" ry="2" />
<text  x="261.28" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (5 samples, 0.09%)</title><rect x="603.2" y="1861" width="1.1" height="15.0" fill="rgb(220,81,25)" rx="2" ry="2" />
<text  x="606.19" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (28 samples, 0.52%)</title><rect x="613.8" y="1893" width="6.1" height="15.0" fill="rgb(208,201,42)" rx="2" ry="2" />
<text  x="616.76" y="1903.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="967.7" y="2021" width="0.2" height="15.0" fill="rgb(239,228,9)" rx="2" ry="2" />
<text  x="970.69" y="2031.5" ></text>
</g>
<g >
<title>__pthread_getspecific (1 samples, 0.02%)</title><rect x="611.3" y="1845" width="0.3" height="15.0" fill="rgb(206,14,28)" rx="2" ry="2" />
<text  x="614.34" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (6 samples, 0.11%)</title><rect x="22.5" y="1909" width="1.4" height="15.0" fill="rgb(235,179,44)" rx="2" ry="2" />
<text  x="25.55" y="1919.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (3 samples, 0.06%)</title><rect x="816.5" y="1829" width="0.6" height="15.0" fill="rgb(227,98,21)" rx="2" ry="2" />
<text  x="819.48" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="133.7" y="1829" width="0.2" height="15.0" fill="rgb(239,10,4)" rx="2" ry="2" />
<text  x="136.70" y="1839.5" ></text>
</g>
<g >
<title>THistoryHeuristics::GetCounterMove (1 samples, 0.02%)</title><rect x="632.2" y="1893" width="0.3" height="15.0" fill="rgb(247,142,0)" rx="2" ry="2" />
<text  x="635.25" y="1903.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.04%)</title><rect x="963.1" y="1797" width="0.4" height="15.0" fill="rgb(215,179,53)" rx="2" ry="2" />
<text  x="966.07" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.04%)</title><rect x="757.5" y="1701" width="0.4" height="15.0" fill="rgb(222,164,23)" rx="2" ry="2" />
<text  x="760.49" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (57 samples, 1.06%)</title><rect x="943.9" y="853" width="12.6" height="15.0" fill="rgb(244,74,22)" rx="2" ry="2" />
<text  x="946.92" y="863.5" ></text>
</g>
<g >
<title>CalcPSTScore (1 samples, 0.02%)</title><rect x="696.1" y="1797" width="0.2" height="15.0" fill="rgb(234,139,23)" rx="2" ry="2" />
<text  x="699.08" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (1 samples, 0.02%)</title><rect x="238.3" y="1861" width="0.2" height="15.0" fill="rgb(209,107,7)" rx="2" ry="2" />
<text  x="241.25" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.04%)</title><rect x="87.9" y="1781" width="0.5" height="15.0" fill="rgb(249,79,31)" rx="2" ry="2" />
<text  x="90.92" y="1791.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="760.6" y="1621" width="0.2" height="15.0" fill="rgb(244,85,35)" rx="2" ry="2" />
<text  x="763.57" y="1631.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (8 samples, 0.15%)</title><rect x="696.5" y="1797" width="1.8" height="15.0" fill="rgb(212,161,22)" rx="2" ry="2" />
<text  x="699.52" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (811 samples, 15.13%)</title><rect x="24.3" y="1909" width="178.5" height="15.0" fill="rgb(244,80,43)" rx="2" ry="2" />
<text  x="27.31" y="1919.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="534.5" y="1845" width="0.2" height="15.0" fill="rgb(227,167,52)" rx="2" ry="2" />
<text  x="537.52" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (1 samples, 0.02%)</title><rect x="586.0" y="1861" width="0.2" height="15.0" fill="rgb(225,0,34)" rx="2" ry="2" />
<text  x="589.02" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.04%)</title><rect x="641.9" y="1861" width="0.5" height="15.0" fill="rgb(223,175,32)" rx="2" ry="2" />
<text  x="644.93" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="32.2" y="1797" width="0.3" height="15.0" fill="rgb(229,178,28)" rx="2" ry="2" />
<text  x="35.23" y="1807.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="590.6" y="1813" width="0.5" height="15.0" fill="rgb(238,18,13)" rx="2" ry="2" />
<text  x="593.65" y="1823.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.09%)</title><rect x="53.6" y="1829" width="1.1" height="15.0" fill="rgb(239,206,10)" rx="2" ry="2" />
<text  x="56.58" y="1839.5" ></text>
</g>
<g >
<title>GetPieceValue (1 samples, 0.02%)</title><rect x="669.9" y="1829" width="0.2" height="15.0" fill="rgb(234,11,50)" rx="2" ry="2" />
<text  x="672.88" y="1839.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.04%)</title><rect x="897.5" y="1829" width="0.4" height="15.0" fill="rgb(213,183,7)" rx="2" ry="2" />
<text  x="900.48" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (21 samples, 0.39%)</title><rect x="604.5" y="1861" width="4.6" height="15.0" fill="rgb(248,171,33)" rx="2" ry="2" />
<text  x="607.51" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="954.0" y="517" width="0.3" height="15.0" fill="rgb(249,114,48)" rx="2" ry="2" />
<text  x="957.04" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (2 samples, 0.04%)</title><rect x="41.3" y="1845" width="0.4" height="15.0" fill="rgb(224,58,2)" rx="2" ry="2" />
<text  x="44.26" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="761.0" y="1685" width="0.2" height="15.0" fill="rgb(229,93,35)" rx="2" ry="2" />
<text  x="764.01" y="1695.5" ></text>
</g>
<g >
<title>GetPieceValue (1 samples, 0.02%)</title><rect x="32.5" y="1749" width="0.2" height="15.0" fill="rgb(238,209,8)" rx="2" ry="2" />
<text  x="35.45" y="1759.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="32.0" y="1813" width="0.2" height="15.0" fill="rgb(232,26,1)" rx="2" ry="2" />
<text  x="35.01" y="1823.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (7 samples, 0.13%)</title><rect x="984.6" y="2037" width="1.6" height="15.0" fill="rgb(205,77,14)" rx="2" ry="2" />
<text  x="987.64" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="442.1" y="1813" width="0.2" height="15.0" fill="rgb(217,216,24)" rx="2" ry="2" />
<text  x="445.07" y="1823.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (6 samples, 0.11%)</title><rect x="688.8" y="1829" width="1.3" height="15.0" fill="rgb(224,139,26)" rx="2" ry="2" />
<text  x="691.81" y="1839.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="303.4" y="1797" width="0.4" height="15.0" fill="rgb(221,197,18)" rx="2" ry="2" />
<text  x="306.40" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.04%)</title><rect x="498.0" y="1813" width="0.4" height="15.0" fill="rgb(219,91,47)" rx="2" ry="2" />
<text  x="500.98" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="511.4" y="1829" width="0.2" height="15.0" fill="rgb(206,24,22)" rx="2" ry="2" />
<text  x="514.41" y="1839.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="753.1" y="1733" width="0.2" height="15.0" fill="rgb(232,205,5)" rx="2" ry="2" />
<text  x="756.09" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="868.2" y="1813" width="0.2" height="15.0" fill="rgb(248,180,32)" rx="2" ry="2" />
<text  x="871.20" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (7 samples, 0.13%)</title><rect x="476.4" y="1797" width="1.6" height="15.0" fill="rgb(226,213,5)" rx="2" ry="2" />
<text  x="479.41" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (1 samples, 0.02%)</title><rect x="822.2" y="1829" width="0.2" height="15.0" fill="rgb(241,223,28)" rx="2" ry="2" />
<text  x="825.20" y="1839.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (1 samples, 0.02%)</title><rect x="498.9" y="1861" width="0.2" height="15.0" fill="rgb(205,175,38)" rx="2" ry="2" />
<text  x="501.86" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (2 samples, 0.04%)</title><rect x="22.8" y="1877" width="0.4" height="15.0" fill="rgb(212,213,13)" rx="2" ry="2" />
<text  x="25.77" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (1 samples, 0.02%)</title><rect x="957.3" y="997" width="0.3" height="15.0" fill="rgb(207,145,30)" rx="2" ry="2" />
<text  x="960.35" y="1007.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&gt;::pair&lt;std::_Rb_tree_node&lt;std::pair&lt;int const, TSearchNode&gt; &gt;*&amp;, std::_Rb_tree_node_base*&amp;, true&gt; (4 samples, 0.07%)</title><rect x="581.0" y="1829" width="0.8" height="15.0" fill="rgb(212,202,45)" rx="2" ry="2" />
<text  x="583.96" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.04%)</title><rect x="736.1" y="1781" width="0.5" height="15.0" fill="rgb(207,163,6)" rx="2" ry="2" />
<text  x="739.14" y="1791.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="704.4" y="1797" width="0.3" height="15.0" fill="rgb(254,12,38)" rx="2" ry="2" />
<text  x="707.44" y="1807.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="377.4" y="1749" width="0.2" height="15.0" fill="rgb(230,38,0)" rx="2" ry="2" />
<text  x="380.36" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (1 samples, 0.02%)</title><rect x="763.2" y="1717" width="0.2" height="15.0" fill="rgb(205,121,51)" rx="2" ry="2" />
<text  x="766.21" y="1727.5" ></text>
</g>
<g >
<title>lczero::InitializeMagicBitboards (1 samples, 0.02%)</title><rect x="21.2" y="2005" width="0.2" height="15.0" fill="rgb(218,204,36)" rx="2" ry="2" />
<text  x="24.23" y="2015.5" ></text>
</g>
<g >
<title>custom_epd_invoker (1,933 samples, 36.06%)</title><rect x="205.5" y="2021" width="425.4" height="15.0" fill="rgb(237,28,6)" rx="2" ry="2" />
<text  x="208.46" y="2031.5" >custom_epd_invoker</text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="118.5" y="1829" width="0.2" height="15.0" fill="rgb(251,58,43)" rx="2" ry="2" />
<text  x="121.51" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (26 samples, 0.48%)</title><rect x="402.0" y="1749" width="5.7" height="15.0" fill="rgb(225,58,25)" rx="2" ry="2" />
<text  x="405.01" y="1759.5" ></text>
</g>
<g >
<title>__asan::asan_delete (1 samples, 0.02%)</title><rect x="595.9" y="1877" width="0.2" height="15.0" fill="rgb(249,93,20)" rx="2" ry="2" />
<text  x="598.93" y="1887.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="896.8" y="1845" width="0.2" height="15.0" fill="rgb(223,185,35)" rx="2" ry="2" />
<text  x="899.82" y="1855.5" ></text>
</g>
<g >
<title>GetPieceType (3 samples, 0.06%)</title><rect x="228.8" y="1861" width="0.6" height="15.0" fill="rgb(251,169,16)" rx="2" ry="2" />
<text  x="231.79" y="1871.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (3 samples, 0.06%)</title><rect x="191.6" y="1893" width="0.6" height="15.0" fill="rgb(241,104,1)" rx="2" ry="2" />
<text  x="194.59" y="1903.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (2 samples, 0.04%)</title><rect x="494.7" y="1813" width="0.4" height="15.0" fill="rgb(241,57,32)" rx="2" ry="2" />
<text  x="497.68" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (1 samples, 0.02%)</title><rect x="770.5" y="1813" width="0.2" height="15.0" fill="rgb(245,162,41)" rx="2" ry="2" />
<text  x="773.47" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (2 samples, 0.04%)</title><rect x="736.6" y="1781" width="0.4" height="15.0" fill="rgb(206,87,14)" rx="2" ry="2" />
<text  x="739.58" y="1791.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="549.9" y="1861" width="0.2" height="15.0" fill="rgb(236,130,29)" rx="2" ry="2" />
<text  x="552.93" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (4 samples, 0.07%)</title><rect x="668.8" y="1797" width="0.9" height="15.0" fill="rgb(225,112,23)" rx="2" ry="2" />
<text  x="671.78" y="1807.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThreadStats (5 samples, 0.09%)</title><rect x="1115.4" y="2053" width="1.1" height="15.0" fill="rgb(238,138,12)" rx="2" ry="2" />
<text  x="1118.38" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (28 samples, 0.52%)</title><rect x="943.9" y="85" width="6.2" height="15.0" fill="rgb(226,5,34)" rx="2" ry="2" />
<text  x="946.92" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="192.2" y="1829" width="0.3" height="15.0" fill="rgb(220,2,15)" rx="2" ry="2" />
<text  x="195.25" y="1839.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.09%)</title><rect x="383.7" y="1765" width="1.1" height="15.0" fill="rgb(207,117,54)" rx="2" ry="2" />
<text  x="386.74" y="1775.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="205.7" y="1845" width="0.2" height="15.0" fill="rgb(233,72,40)" rx="2" ry="2" />
<text  x="208.68" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;std::array&lt;int, 64ul&gt;, 6ul&gt;::at (1 samples, 0.02%)</title><rect x="229.4" y="1845" width="0.3" height="15.0" fill="rgb(207,21,54)" rx="2" ry="2" />
<text  x="232.45" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="749.8" y="1765" width="0.2" height="15.0" fill="rgb(233,98,53)" rx="2" ry="2" />
<text  x="752.78" y="1775.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (4 samples, 0.07%)</title><rect x="374.7" y="1797" width="0.9" height="15.0" fill="rgb(228,2,3)" rx="2" ry="2" />
<text  x="377.72" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (61 samples, 1.14%)</title><rect x="943.9" y="981" width="13.4" height="15.0" fill="rgb(252,134,47)" rx="2" ry="2" />
<text  x="946.92" y="991.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::insert_or_assign&lt;TTranspositionTable::TNode&gt; (2 samples, 0.04%)</title><rect x="595.5" y="1861" width="0.4" height="15.0" fill="rgb(211,219,35)" rx="2" ry="2" />
<text  x="598.49" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (16 samples, 0.30%)</title><rect x="31.6" y="1893" width="3.5" height="15.0" fill="rgb(239,24,22)" rx="2" ry="2" />
<text  x="34.57" y="1903.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.06%)</title><rect x="805.7" y="1797" width="0.7" height="15.0" fill="rgb(252,137,54)" rx="2" ry="2" />
<text  x="808.69" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (7 samples, 0.13%)</title><rect x="409.1" y="1813" width="1.5" height="15.0" fill="rgb(208,150,20)" rx="2" ry="2" />
<text  x="412.06" y="1823.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::insert_or_assign&lt;TTranspositionTable::TNode&gt; (1 samples, 0.02%)</title><rect x="202.8" y="1893" width="0.2" height="15.0" fill="rgb(229,172,40)" rx="2" ry="2" />
<text  x="205.81" y="1903.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="226.8" y="1829" width="0.2" height="15.0" fill="rgb(229,225,16)" rx="2" ry="2" />
<text  x="229.81" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="698.5" y="1813" width="0.4" height="15.0" fill="rgb(217,61,51)" rx="2" ry="2" />
<text  x="701.50" y="1823.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="89.9" y="1797" width="0.2" height="15.0" fill="rgb(234,179,47)" rx="2" ry="2" />
<text  x="92.90" y="1807.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (4 samples, 0.07%)</title><rect x="376.9" y="1797" width="0.9" height="15.0" fill="rgb(221,165,12)" rx="2" ry="2" />
<text  x="379.92" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="850.8" y="1813" width="0.2" height="15.0" fill="rgb(218,137,28)" rx="2" ry="2" />
<text  x="853.81" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="663.1" y="1781" width="0.4" height="15.0" fill="rgb(240,70,24)" rx="2" ry="2" />
<text  x="666.06" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (13 samples, 0.24%)</title><rect x="614.4" y="1877" width="2.9" height="15.0" fill="rgb(215,225,50)" rx="2" ry="2" />
<text  x="617.42" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (30 samples, 0.56%)</title><rect x="943.9" y="133" width="6.6" height="15.0" fill="rgb(217,15,42)" rx="2" ry="2" />
<text  x="946.92" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="162.1" y="1829" width="0.4" height="15.0" fill="rgb(210,62,22)" rx="2" ry="2" />
<text  x="165.09" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::operator== (1 samples, 0.02%)</title><rect x="492.9" y="1797" width="0.2" height="15.0" fill="rgb(254,35,32)" rx="2" ry="2" />
<text  x="495.92" y="1807.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (48 samples, 0.90%)</title><rect x="522.6" y="1829" width="10.6" height="15.0" fill="rgb(218,61,24)" rx="2" ry="2" />
<text  x="525.63" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (1 samples, 0.02%)</title><rect x="816.7" y="1813" width="0.2" height="15.0" fill="rgb(236,41,3)" rx="2" ry="2" />
<text  x="819.70" y="1823.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="962.8" y="1765" width="0.3" height="15.0" fill="rgb(229,174,32)" rx="2" ry="2" />
<text  x="965.85" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (49 samples, 0.91%)</title><rect x="943.9" y="645" width="10.8" height="15.0" fill="rgb(210,122,42)" rx="2" ry="2" />
<text  x="946.92" y="655.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (7 samples, 0.13%)</title><rect x="360.4" y="1797" width="1.6" height="15.0" fill="rgb(229,217,33)" rx="2" ry="2" />
<text  x="363.41" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (20 samples, 0.37%)</title><rect x="681.6" y="1829" width="4.4" height="15.0" fill="rgb(250,79,0)" rx="2" ry="2" />
<text  x="684.55" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="49.8" y="1749" width="0.3" height="15.0" fill="rgb(223,204,26)" rx="2" ry="2" />
<text  x="52.84" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (50 samples, 0.93%)</title><rect x="771.8" y="1797" width="11.0" height="15.0" fill="rgb(210,92,25)" rx="2" ry="2" />
<text  x="774.79" y="1807.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="735.3" y="1781" width="0.2" height="15.0" fill="rgb(241,137,25)" rx="2" ry="2" />
<text  x="738.26" y="1791.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="637.3" y="1829" width="0.2" height="15.0" fill="rgb(231,71,23)" rx="2" ry="2" />
<text  x="640.31" y="1839.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="220.4" y="1877" width="0.2" height="15.0" fill="rgb(221,224,11)" rx="2" ry="2" />
<text  x="223.42" y="1887.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="491.8" y="1845" width="0.2" height="15.0" fill="rgb(251,51,19)" rx="2" ry="2" />
<text  x="494.82" y="1855.5" ></text>
</g>
<g >
<title>IsPromotion (1 samples, 0.02%)</title><rect x="274.8" y="1845" width="0.2" height="15.0" fill="rgb(213,61,8)" rx="2" ry="2" />
<text  x="277.79" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (1 samples, 0.02%)</title><rect x="398.9" y="1781" width="0.3" height="15.0" fill="rgb(218,95,44)" rx="2" ry="2" />
<text  x="401.93" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="816.5" y="1813" width="0.2" height="15.0" fill="rgb(219,58,1)" rx="2" ry="2" />
<text  x="819.48" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="693.9" y="1813" width="0.2" height="15.0" fill="rgb(215,110,30)" rx="2" ry="2" />
<text  x="696.88" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="119.4" y="1813" width="0.2" height="15.0" fill="rgb(246,219,24)" rx="2" ry="2" />
<text  x="122.39" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.06%)</title><rect x="375.6" y="1781" width="0.7" height="15.0" fill="rgb(244,7,7)" rx="2" ry="2" />
<text  x="378.60" y="1791.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="631.6" y="1877" width="0.2" height="15.0" fill="rgb(222,77,44)" rx="2" ry="2" />
<text  x="634.59" y="1887.5" ></text>
</g>
<g >
<title>__pthread_getspecific (1 samples, 0.02%)</title><rect x="592.0" y="1797" width="0.2" height="15.0" fill="rgb(227,131,15)" rx="2" ry="2" />
<text  x="594.97" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (3 samples, 0.06%)</title><rect x="771.1" y="1797" width="0.7" height="15.0" fill="rgb(210,86,44)" rx="2" ry="2" />
<text  x="774.13" y="1807.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="959.8" y="1445" width="0.2" height="15.0" fill="rgb(212,102,29)" rx="2" ry="2" />
<text  x="962.77" y="1455.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="269.7" y="1813" width="0.2" height="15.0" fill="rgb(220,32,20)" rx="2" ry="2" />
<text  x="272.73" y="1823.5" ></text>
</g>
<g >
<title>CalcPSTScore (70 samples, 1.31%)</title><rect x="242.4" y="1861" width="15.4" height="15.0" fill="rgb(239,78,40)" rx="2" ry="2" />
<text  x="245.43" y="1871.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="612.0" y="1877" width="0.2" height="15.0" fill="rgb(228,46,25)" rx="2" ry="2" />
<text  x="615.00" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (48 samples, 0.90%)</title><rect x="943.9" y="597" width="10.6" height="15.0" fill="rgb(210,43,9)" rx="2" ry="2" />
<text  x="946.92" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (8 samples, 0.15%)</title><rect x="639.7" y="1845" width="1.8" height="15.0" fill="rgb(254,1,26)" rx="2" ry="2" />
<text  x="642.73" y="1855.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (1 samples, 0.02%)</title><rect x="591.7" y="1797" width="0.3" height="15.0" fill="rgb(240,64,9)" rx="2" ry="2" />
<text  x="594.75" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Castlings::operator== (2 samples, 0.04%)</title><rect x="283.4" y="1765" width="0.4" height="15.0" fill="rgb(253,24,7)" rx="2" ry="2" />
<text  x="286.37" y="1775.5" ></text>
</g>
<g >
<title>__asan_memset (1 samples, 0.02%)</title><rect x="421.6" y="1797" width="0.2" height="15.0" fill="rgb(241,131,52)" rx="2" ry="2" />
<text  x="424.60" y="1807.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="32.2" y="1829" width="0.3" height="15.0" fill="rgb(227,147,37)" rx="2" ry="2" />
<text  x="35.23" y="1839.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="310.4" y="1797" width="0.3" height="15.0" fill="rgb(241,219,18)" rx="2" ry="2" />
<text  x="313.45" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (10 samples, 0.19%)</title><rect x="220.6" y="1877" width="2.2" height="15.0" fill="rgb(208,32,8)" rx="2" ry="2" />
<text  x="223.64" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (94 samples, 1.75%)</title><rect x="943.9" y="1941" width="20.7" height="15.0" fill="rgb(222,226,49)" rx="2" ry="2" />
<text  x="946.92" y="1951.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.06%)</title><rect x="601.2" y="1861" width="0.7" height="15.0" fill="rgb(240,105,40)" rx="2" ry="2" />
<text  x="604.21" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="695.4" y="1781" width="0.2" height="15.0" fill="rgb(221,117,28)" rx="2" ry="2" />
<text  x="698.42" y="1791.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="29.4" y="1845" width="0.2" height="15.0" fill="rgb(232,24,29)" rx="2" ry="2" />
<text  x="32.37" y="1855.5" ></text>
</g>
<g >
<title>[[vdso]] (1 samples, 0.02%)</title><rect x="1189.8" y="2021" width="0.2" height="15.0" fill="rgb(235,135,3)" rx="2" ry="2" />
<text  x="1192.78" y="2031.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (5 samples, 0.09%)</title><rect x="752.6" y="1797" width="1.1" height="15.0" fill="rgb(216,132,5)" rx="2" ry="2" />
<text  x="755.65" y="1807.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (1 samples, 0.02%)</title><rect x="611.6" y="1829" width="0.2" height="15.0" fill="rgb(242,33,7)" rx="2" ry="2" />
<text  x="614.56" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (3 samples, 0.06%)</title><rect x="845.1" y="1829" width="0.7" height="15.0" fill="rgb(251,218,47)" rx="2" ry="2" />
<text  x="848.09" y="1839.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (4 samples, 0.07%)</title><rect x="375.6" y="1797" width="0.9" height="15.0" fill="rgb(222,65,22)" rx="2" ry="2" />
<text  x="378.60" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (55 samples, 1.03%)</title><rect x="897.0" y="1845" width="12.1" height="15.0" fill="rgb(235,55,40)" rx="2" ry="2" />
<text  x="900.04" y="1855.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="762.8" y="1717" width="0.4" height="15.0" fill="rgb(220,97,11)" rx="2" ry="2" />
<text  x="765.77" y="1727.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="491.4" y="1845" width="0.2" height="15.0" fill="rgb(215,111,18)" rx="2" ry="2" />
<text  x="494.38" y="1855.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="850.8" y="1765" width="0.2" height="15.0" fill="rgb(205,105,29)" rx="2" ry="2" />
<text  x="853.81" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="761.0" y="1669" width="0.2" height="15.0" fill="rgb(248,55,3)" rx="2" ry="2" />
<text  x="764.01" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (94 samples, 1.75%)</title><rect x="943.9" y="1925" width="20.7" height="15.0" fill="rgb(224,37,16)" rx="2" ry="2" />
<text  x="946.92" y="1935.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="695.4" y="1829" width="0.2" height="15.0" fill="rgb(245,168,24)" rx="2" ry="2" />
<text  x="698.42" y="1839.5" ></text>
</g>
<g >
<title>__asan_memcpy (5 samples, 0.09%)</title><rect x="538.5" y="1845" width="1.1" height="15.0" fill="rgb(216,127,16)" rx="2" ry="2" />
<text  x="541.48" y="1855.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (50 samples, 0.93%)</title><rect x="868.9" y="1813" width="11.0" height="15.0" fill="rgb(220,128,20)" rx="2" ry="2" />
<text  x="871.86" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (3 samples, 0.06%)</title><rect x="304.1" y="1829" width="0.6" height="15.0" fill="rgb(223,65,48)" rx="2" ry="2" />
<text  x="307.06" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (3 samples, 0.06%)</title><rect x="642.6" y="1797" width="0.7" height="15.0" fill="rgb(220,190,54)" rx="2" ry="2" />
<text  x="645.59" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="174.0" y="1845" width="0.2" height="15.0" fill="rgb(247,78,49)" rx="2" ry="2" />
<text  x="176.98" y="1855.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (3 samples, 0.06%)</title><rect x="757.3" y="1733" width="0.6" height="15.0" fill="rgb(210,170,28)" rx="2" ry="2" />
<text  x="760.27" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::bishops (1 samples, 0.02%)</title><rect x="740.8" y="1765" width="0.2" height="15.0" fill="rgb(230,47,38)" rx="2" ry="2" />
<text  x="743.76" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (1 samples, 0.02%)</title><rect x="955.4" y="725" width="0.2" height="15.0" fill="rgb(219,166,54)" rx="2" ry="2" />
<text  x="958.36" y="735.5" ></text>
</g>
<g >
<title>[unknown] (71 samples, 1.32%)</title><rect x="943.9" y="1397" width="15.6" height="15.0" fill="rgb(236,196,18)" rx="2" ry="2" />
<text  x="946.92" y="1407.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (2 samples, 0.04%)</title><rect x="207.7" y="1893" width="0.4" height="15.0" fill="rgb(236,227,4)" rx="2" ry="2" />
<text  x="210.66" y="1903.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (13 samples, 0.24%)</title><rect x="41.0" y="1861" width="2.9" height="15.0" fill="rgb(243,166,51)" rx="2" ry="2" />
<text  x="44.04" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (6 samples, 0.11%)</title><rect x="928.7" y="1845" width="1.4" height="15.0" fill="rgb(220,85,5)" rx="2" ry="2" />
<text  x="931.73" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (1 samples, 0.02%)</title><rect x="728.4" y="1797" width="0.3" height="15.0" fill="rgb(239,12,40)" rx="2" ry="2" />
<text  x="731.43" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (20 samples, 0.37%)</title><rect x="758.1" y="1733" width="4.4" height="15.0" fill="rgb(244,89,32)" rx="2" ry="2" />
<text  x="761.15" y="1743.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (16 samples, 0.30%)</title><rect x="492.0" y="1861" width="3.6" height="15.0" fill="rgb(237,65,15)" rx="2" ry="2" />
<text  x="495.04" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (21 samples, 0.39%)</title><rect x="943.9" y="37" width="4.6" height="15.0" fill="rgb(221,176,42)" rx="2" ry="2" />
<text  x="946.92" y="47.5" ></text>
</g>
<g >
<title>[unknown] (30 samples, 0.56%)</title><rect x="943.9" y="149" width="6.6" height="15.0" fill="rgb(221,97,7)" rx="2" ry="2" />
<text  x="946.92" y="159.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (2 samples, 0.04%)</title><rect x="846.0" y="1845" width="0.4" height="15.0" fill="rgb(239,184,14)" rx="2" ry="2" />
<text  x="848.97" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_insert_node (7 samples, 0.13%)</title><rect x="581.8" y="1845" width="1.6" height="15.0" fill="rgb(235,155,41)" rx="2" ry="2" />
<text  x="584.84" y="1855.5" ></text>
</g>
<g >
<title>CalcPSTScore (5 samples, 0.09%)</title><rect x="84.6" y="1829" width="1.1" height="15.0" fill="rgb(208,170,46)" rx="2" ry="2" />
<text  x="87.62" y="1839.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::at (1 samples, 0.02%)</title><rect x="676.0" y="1829" width="0.3" height="15.0" fill="rgb(247,116,16)" rx="2" ry="2" />
<text  x="679.05" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (2 samples, 0.04%)</title><rect x="191.1" y="1861" width="0.5" height="15.0" fill="rgb(226,122,18)" rx="2" ry="2" />
<text  x="194.15" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (1 samples, 0.02%)</title><rect x="88.1" y="1749" width="0.3" height="15.0" fill="rgb(248,147,29)" rx="2" ry="2" />
<text  x="91.14" y="1759.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (1 samples, 0.02%)</title><rect x="593.3" y="1781" width="0.2" height="15.0" fill="rgb(245,3,38)" rx="2" ry="2" />
<text  x="596.29" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (17 samples, 0.32%)</title><rect x="310.9" y="1813" width="3.7" height="15.0" fill="rgb(222,159,22)" rx="2" ry="2" />
<text  x="313.89" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.04%)</title><rect x="533.2" y="1845" width="0.4" height="15.0" fill="rgb(239,156,52)" rx="2" ry="2" />
<text  x="536.20" y="1855.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (4 samples, 0.07%)</title><rect x="513.2" y="1813" width="0.8" height="15.0" fill="rgb(230,140,45)" rx="2" ry="2" />
<text  x="516.17" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (2 samples, 0.04%)</title><rect x="445.2" y="1829" width="0.4" height="15.0" fill="rgb(226,70,32)" rx="2" ry="2" />
<text  x="448.15" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="697.2" y="1685" width="0.2" height="15.0" fill="rgb(207,134,54)" rx="2" ry="2" />
<text  x="700.18" y="1695.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="741.0" y="1765" width="0.2" height="15.0" fill="rgb(212,184,19)" rx="2" ry="2" />
<text  x="743.98" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::RunMallocHooks (3 samples, 0.06%)</title><rect x="1140.3" y="2053" width="0.6" height="15.0" fill="rgb(246,101,2)" rx="2" ry="2" />
<text  x="1143.26" y="2063.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (14 samples, 0.26%)</title><rect x="134.8" y="1829" width="3.1" height="15.0" fill="rgb(235,208,27)" rx="2" ry="2" />
<text  x="137.80" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::kings (1 samples, 0.02%)</title><rect x="735.5" y="1781" width="0.2" height="15.0" fill="rgb(222,99,33)" rx="2" ry="2" />
<text  x="738.48" y="1791.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="754.2" y="1765" width="0.2" height="15.0" fill="rgb(244,57,24)" rx="2" ry="2" />
<text  x="757.19" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (22 samples, 0.41%)</title><rect x="596.1" y="1877" width="4.9" height="15.0" fill="rgb(232,168,28)" rx="2" ry="2" />
<text  x="599.15" y="1887.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (6 samples, 0.11%)</title><rect x="15.3" y="2037" width="1.3" height="15.0" fill="rgb(236,166,47)" rx="2" ry="2" />
<text  x="18.28" y="2047.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (1 samples, 0.02%)</title><rect x="201.7" y="1877" width="0.2" height="15.0" fill="rgb(248,44,51)" rx="2" ry="2" />
<text  x="204.71" y="1887.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (6 samples, 0.11%)</title><rect x="372.3" y="1797" width="1.3" height="15.0" fill="rgb(247,6,23)" rx="2" ry="2" />
<text  x="375.30" y="1807.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="695.9" y="1813" width="0.2" height="15.0" fill="rgb(223,83,41)" rx="2" ry="2" />
<text  x="698.86" y="1823.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="385.1" y="1797" width="0.2" height="15.0" fill="rgb(244,171,6)" rx="2" ry="2" />
<text  x="388.06" y="1807.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="377.6" y="1781" width="0.2" height="15.0" fill="rgb(223,153,15)" rx="2" ry="2" />
<text  x="380.58" y="1791.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (18 samples, 0.34%)</title><rect x="134.8" y="1861" width="4.0" height="15.0" fill="rgb(216,175,45)" rx="2" ry="2" />
<text  x="137.80" y="1871.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (1 samples, 0.02%)</title><rect x="604.5" y="1845" width="0.2" height="15.0" fill="rgb(217,221,32)" rx="2" ry="2" />
<text  x="607.51" y="1855.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="220.0" y="1781" width="0.2" height="15.0" fill="rgb(230,159,52)" rx="2" ry="2" />
<text  x="222.98" y="1791.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="32.9" y="1829" width="0.2" height="15.0" fill="rgb(234,205,17)" rx="2" ry="2" />
<text  x="35.89" y="1839.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (2 samples, 0.04%)</title><rect x="219.5" y="1861" width="0.5" height="15.0" fill="rgb(219,66,52)" rx="2" ry="2" />
<text  x="222.54" y="1871.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (2 samples, 0.04%)</title><rect x="897.0" y="1829" width="0.5" height="15.0" fill="rgb(214,105,4)" rx="2" ry="2" />
<text  x="900.04" y="1839.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="178.6" y="1829" width="0.2" height="15.0" fill="rgb(236,62,53)" rx="2" ry="2" />
<text  x="181.60" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (11 samples, 0.21%)</title><rect x="846.4" y="1845" width="2.4" height="15.0" fill="rgb(252,124,54)" rx="2" ry="2" />
<text  x="849.41" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="21.4" y="1909" width="0.3" height="15.0" fill="rgb(224,9,4)" rx="2" ry="2" />
<text  x="24.45" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (78 samples, 1.45%)</title><rect x="943.9" y="1621" width="17.2" height="15.0" fill="rgb(211,209,22)" rx="2" ry="2" />
<text  x="946.92" y="1631.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="302.1" y="1813" width="0.4" height="15.0" fill="rgb(253,146,0)" rx="2" ry="2" />
<text  x="305.08" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="266.9" y="1797" width="0.2" height="15.0" fill="rgb(231,96,34)" rx="2" ry="2" />
<text  x="269.87" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="817.1" y="1813" width="0.3" height="15.0" fill="rgb(217,22,42)" rx="2" ry="2" />
<text  x="820.14" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="220.0" y="1813" width="0.2" height="15.0" fill="rgb(208,184,32)" rx="2" ry="2" />
<text  x="222.98" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (2 samples, 0.04%)</title><rect x="219.5" y="1829" width="0.5" height="15.0" fill="rgb(248,179,11)" rx="2" ry="2" />
<text  x="222.54" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="495.8" y="1829" width="0.4" height="15.0" fill="rgb(235,222,9)" rx="2" ry="2" />
<text  x="498.78" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.04%)</title><rect x="181.5" y="1861" width="0.4" height="15.0" fill="rgb(239,98,29)" rx="2" ry="2" />
<text  x="184.46" y="1871.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (1 samples, 0.02%)</title><rect x="932.0" y="1861" width="0.3" height="15.0" fill="rgb(252,80,11)" rx="2" ry="2" />
<text  x="935.03" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="752.2" y="1749" width="0.2" height="15.0" fill="rgb(241,63,50)" rx="2" ry="2" />
<text  x="755.20" y="1759.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="764.1" y="1733" width="0.4" height="15.0" fill="rgb(211,179,6)" rx="2" ry="2" />
<text  x="767.09" y="1743.5" ></text>
</g>
<g >
<title>IsPromotion (1 samples, 0.02%)</title><rect x="40.6" y="1861" width="0.2" height="15.0" fill="rgb(248,107,20)" rx="2" ry="2" />
<text  x="43.60" y="1871.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="696.3" y="1781" width="0.2" height="15.0" fill="rgb(246,44,35)" rx="2" ry="2" />
<text  x="699.30" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.04%)</title><rect x="303.0" y="1797" width="0.4" height="15.0" fill="rgb(238,65,33)" rx="2" ry="2" />
<text  x="305.96" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, unsigned long, true&gt;::_S_equals (2 samples, 0.04%)</title><rect x="285.1" y="1813" width="0.5" height="15.0" fill="rgb(214,38,50)" rx="2" ry="2" />
<text  x="288.14" y="1823.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="765.2" y="1733" width="0.9" height="15.0" fill="rgb(230,127,35)" rx="2" ry="2" />
<text  x="768.19" y="1743.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="237.2" y="1813" width="0.8" height="15.0" fill="rgb(248,50,20)" rx="2" ry="2" />
<text  x="240.15" y="1823.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.04%)</title><rect x="956.7" y="885" width="0.4" height="15.0" fill="rgb(216,147,5)" rx="2" ry="2" />
<text  x="959.69" y="895.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="22.5" y="1893" width="0.3" height="15.0" fill="rgb(234,55,45)" rx="2" ry="2" />
<text  x="25.55" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.04%)</title><rect x="761.7" y="1685" width="0.4" height="15.0" fill="rgb(231,133,30)" rx="2" ry="2" />
<text  x="764.67" y="1695.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (1 samples, 0.02%)</title><rect x="696.5" y="1749" width="0.2" height="15.0" fill="rgb(224,171,11)" rx="2" ry="2" />
<text  x="699.52" y="1759.5" ></text>
</g>
<g >
<title>CalcPSTScore (1 samples, 0.02%)</title><rect x="87.0" y="1797" width="0.3" height="15.0" fill="rgb(228,129,41)" rx="2" ry="2" />
<text  x="90.04" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (1 samples, 0.02%)</title><rect x="302.7" y="1829" width="0.3" height="15.0" fill="rgb(253,103,26)" rx="2" ry="2" />
<text  x="305.74" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 1.87%)</title><rect x="943.9" y="2005" width="22.0" height="15.0" fill="rgb(225,183,54)" rx="2" ry="2" />
<text  x="946.92" y="2015.5" >[..</text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="938.9" y="1893" width="0.2" height="15.0" fill="rgb(234,171,17)" rx="2" ry="2" />
<text  x="941.86" y="1903.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.04%)</title><rect x="629.8" y="1925" width="0.5" height="15.0" fill="rgb(251,97,31)" rx="2" ry="2" />
<text  x="632.82" y="1935.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (6 samples, 0.11%)</title><rect x="626.5" y="1877" width="1.3" height="15.0" fill="rgb(236,107,41)" rx="2" ry="2" />
<text  x="629.52" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, unsigned long, true&gt;::_S_equals (2 samples, 0.04%)</title><rect x="594.8" y="1829" width="0.5" height="15.0" fill="rgb(219,210,42)" rx="2" ry="2" />
<text  x="597.83" y="1839.5" ></text>
</g>
<g >
<title>CalcPSTScore (1 samples, 0.02%)</title><rect x="630.9" y="1909" width="0.2" height="15.0" fill="rgb(253,226,31)" rx="2" ry="2" />
<text  x="633.93" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="179.0" y="1829" width="0.3" height="15.0" fill="rgb(254,108,39)" rx="2" ry="2" />
<text  x="182.04" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="89.5" y="1797" width="0.2" height="15.0" fill="rgb(231,129,27)" rx="2" ry="2" />
<text  x="92.46" y="1807.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="82.9" y="1797" width="0.2" height="15.0" fill="rgb(217,201,18)" rx="2" ry="2" />
<text  x="85.86" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (2 samples, 0.04%)</title><rect x="622.8" y="1877" width="0.4" height="15.0" fill="rgb(233,214,49)" rx="2" ry="2" />
<text  x="625.78" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="179.3" y="1845" width="0.2" height="15.0" fill="rgb(254,207,11)" rx="2" ry="2" />
<text  x="182.26" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="762.5" y="1717" width="0.3" height="15.0" fill="rgb(228,135,34)" rx="2" ry="2" />
<text  x="765.55" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.06%)</title><rect x="497.8" y="1829" width="0.6" height="15.0" fill="rgb(240,26,34)" rx="2" ry="2" />
<text  x="500.76" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (1 samples, 0.02%)</title><rect x="623.9" y="1861" width="0.2" height="15.0" fill="rgb(246,190,33)" rx="2" ry="2" />
<text  x="626.88" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (1 samples, 0.02%)</title><rect x="314.6" y="1813" width="0.2" height="15.0" fill="rgb(209,101,16)" rx="2" ry="2" />
<text  x="317.63" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (5 samples, 0.09%)</title><rect x="373.6" y="1797" width="1.1" height="15.0" fill="rgb(212,223,44)" rx="2" ry="2" />
<text  x="376.62" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (21 samples, 0.39%)</title><rect x="886.7" y="1845" width="4.6" height="15.0" fill="rgb(241,113,4)" rx="2" ry="2" />
<text  x="889.69" y="1855.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="633.3" y="1845" width="0.3" height="15.0" fill="rgb(206,98,42)" rx="2" ry="2" />
<text  x="636.35" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.04%)</title><rect x="663.7" y="1781" width="0.5" height="15.0" fill="rgb(240,29,1)" rx="2" ry="2" />
<text  x="666.72" y="1791.5" ></text>
</g>
<g >
<title>GetPieceType (4 samples, 0.07%)</title><rect x="652.5" y="1845" width="0.9" height="15.0" fill="rgb(213,95,11)" rx="2" ry="2" />
<text  x="655.50" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (1 samples, 0.02%)</title><rect x="957.6" y="1061" width="0.2" height="15.0" fill="rgb(241,112,10)" rx="2" ry="2" />
<text  x="960.57" y="1071.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThreadStats (5 samples, 0.09%)</title><rect x="983.5" y="2037" width="1.1" height="15.0" fill="rgb(224,208,11)" rx="2" ry="2" />
<text  x="986.54" y="2047.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_insert_node (1 samples, 0.02%)</title><rect x="586.2" y="1861" width="0.3" height="15.0" fill="rgb(226,114,3)" rx="2" ry="2" />
<text  x="589.24" y="1871.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="757.9" y="1717" width="0.2" height="15.0" fill="rgb(212,5,44)" rx="2" ry="2" />
<text  x="760.93" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (42 samples, 0.78%)</title><rect x="943.9" y="421" width="9.3" height="15.0" fill="rgb(221,221,50)" rx="2" ry="2" />
<text  x="946.92" y="431.5" ></text>
</g>
<g >
<title>GetPieceType (4 samples, 0.07%)</title><rect x="687.9" y="1829" width="0.9" height="15.0" fill="rgb(237,150,31)" rx="2" ry="2" />
<text  x="690.93" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (1 samples, 0.02%)</title><rect x="194.0" y="1861" width="0.2" height="15.0" fill="rgb(250,42,20)" rx="2" ry="2" />
<text  x="197.01" y="1871.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="1189.8" y="2037" width="0.2" height="15.0" fill="rgb(238,61,10)" rx="2" ry="2" />
<text  x="1192.78" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (5 samples, 0.09%)</title><rect x="803.5" y="1781" width="1.1" height="15.0" fill="rgb(236,202,50)" rx="2" ry="2" />
<text  x="806.49" y="1791.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="379.8" y="1765" width="0.2" height="15.0" fill="rgb(210,118,15)" rx="2" ry="2" />
<text  x="382.78" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.06%)</title><rect x="848.8" y="1845" width="0.7" height="15.0" fill="rgb(250,113,35)" rx="2" ry="2" />
<text  x="851.83" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="754.8" y="1733" width="0.3" height="15.0" fill="rgb(223,134,23)" rx="2" ry="2" />
<text  x="757.85" y="1743.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (2 samples, 0.04%)</title><rect x="628.1" y="1893" width="0.4" height="15.0" fill="rgb(210,142,8)" rx="2" ry="2" />
<text  x="631.06" y="1903.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (1 samples, 0.02%)</title><rect x="32.5" y="1813" width="0.2" height="15.0" fill="rgb(213,222,21)" rx="2" ry="2" />
<text  x="35.45" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (9 samples, 0.17%)</title><rect x="226.6" y="1845" width="2.0" height="15.0" fill="rgb(213,198,10)" rx="2" ry="2" />
<text  x="229.59" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (78 samples, 1.45%)</title><rect x="943.9" y="1589" width="17.2" height="15.0" fill="rgb(207,36,16)" rx="2" ry="2" />
<text  x="946.92" y="1599.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="733.1" y="1733" width="0.2" height="15.0" fill="rgb(235,152,30)" rx="2" ry="2" />
<text  x="736.06" y="1743.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="765.2" y="1749" width="0.9" height="15.0" fill="rgb(252,185,42)" rx="2" ry="2" />
<text  x="768.19" y="1759.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="208.1" y="1861" width="0.2" height="15.0" fill="rgb(242,190,0)" rx="2" ry="2" />
<text  x="211.10" y="1871.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::insert_or_assign&lt;TTranspositionTable::TNode&gt; (1 samples, 0.02%)</title><rect x="176.0" y="1861" width="0.2" height="15.0" fill="rgb(220,45,3)" rx="2" ry="2" />
<text  x="178.96" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (1 samples, 0.02%)</title><rect x="932.0" y="1845" width="0.3" height="15.0" fill="rgb(239,75,0)" rx="2" ry="2" />
<text  x="935.03" y="1855.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="695.6" y="1813" width="0.3" height="15.0" fill="rgb(236,177,35)" rx="2" ry="2" />
<text  x="698.64" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="32.9" y="1797" width="0.2" height="15.0" fill="rgb(236,15,3)" rx="2" ry="2" />
<text  x="35.89" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (13 samples, 0.24%)</title><rect x="176.6" y="1861" width="2.9" height="15.0" fill="rgb(222,181,40)" rx="2" ry="2" />
<text  x="179.62" y="1871.5" ></text>
</g>
<g >
<title>IsTerminal (1 samples, 0.02%)</title><rect x="67.4" y="1861" width="0.3" height="15.0" fill="rgb(242,204,47)" rx="2" ry="2" />
<text  x="70.45" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (10 samples, 0.19%)</title><rect x="41.7" y="1845" width="2.2" height="15.0" fill="rgb(251,183,40)" rx="2" ry="2" />
<text  x="44.70" y="1855.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (3 samples, 0.06%)</title><rect x="754.8" y="1765" width="0.7" height="15.0" fill="rgb(252,224,23)" rx="2" ry="2" />
<text  x="757.85" y="1775.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="628.3" y="1829" width="0.2" height="15.0" fill="rgb(219,228,43)" rx="2" ry="2" />
<text  x="631.28" y="1839.5" ></text>
</g>
<g >
<title>__asan::AsanChunk::UsedSize (8 samples, 0.15%)</title><rect x="1109.9" y="2053" width="1.7" height="15.0" fill="rgb(252,147,16)" rx="2" ry="2" />
<text  x="1112.88" y="2063.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="769.4" y="1781" width="0.4" height="15.0" fill="rgb(220,109,10)" rx="2" ry="2" />
<text  x="772.37" y="1791.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.04%)</title><rect x="29.4" y="1861" width="0.4" height="15.0" fill="rgb(231,164,50)" rx="2" ry="2" />
<text  x="32.37" y="1871.5" ></text>
</g>
<g >
<title>std::array&lt;std::array&lt;std::array&lt;int, 64ul&gt;, 6ul&gt;, 2ul&gt;::at (1 samples, 0.02%)</title><rect x="276.3" y="1829" width="0.3" height="15.0" fill="rgb(209,209,20)" rx="2" ry="2" />
<text  x="279.33" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="762.1" y="1669" width="0.4" height="15.0" fill="rgb(244,39,11)" rx="2" ry="2" />
<text  x="765.11" y="1679.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (1 samples, 0.02%)</title><rect x="613.3" y="1877" width="0.2" height="15.0" fill="rgb(214,94,38)" rx="2" ry="2" />
<text  x="616.32" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (1 samples, 0.02%)</title><rect x="693.4" y="1813" width="0.3" height="15.0" fill="rgb(245,185,10)" rx="2" ry="2" />
<text  x="696.44" y="1823.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (17 samples, 0.32%)</title><rect x="534.7" y="1845" width="3.8" height="15.0" fill="rgb(252,179,1)" rx="2" ry="2" />
<text  x="537.74" y="1855.5" ></text>
</g>
<g >
<title>CalcPSTScore (55 samples, 1.03%)</title><rect x="54.9" y="1861" width="12.1" height="15.0" fill="rgb(230,50,50)" rx="2" ry="2" />
<text  x="57.90" y="1871.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (15 samples, 0.28%)</title><rect x="316.8" y="1813" width="3.3" height="15.0" fill="rgb(238,139,45)" rx="2" ry="2" />
<text  x="319.83" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="32.7" y="1781" width="0.2" height="15.0" fill="rgb(230,209,45)" rx="2" ry="2" />
<text  x="35.67" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (35 samples, 0.65%)</title><rect x="909.1" y="1845" width="7.7" height="15.0" fill="rgb(209,4,40)" rx="2" ry="2" />
<text  x="912.14" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (1 samples, 0.02%)</title><rect x="233.6" y="1829" width="0.3" height="15.0" fill="rgb(210,119,42)" rx="2" ry="2" />
<text  x="236.63" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (5 samples, 0.09%)</title><rect x="313.5" y="1797" width="1.1" height="15.0" fill="rgb(241,180,6)" rx="2" ry="2" />
<text  x="316.53" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (1 samples, 0.02%)</title><rect x="1027.1" y="2005" width="0.2" height="15.0" fill="rgb(224,165,6)" rx="2" ry="2" />
<text  x="1030.12" y="2015.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (5 samples, 0.09%)</title><rect x="91.7" y="1765" width="1.1" height="15.0" fill="rgb(214,151,3)" rx="2" ry="2" />
<text  x="94.66" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2 samples, 0.04%)</title><rect x="175.3" y="1829" width="0.4" height="15.0" fill="rgb(240,154,17)" rx="2" ry="2" />
<text  x="178.30" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (3 samples, 0.06%)</title><rect x="371.6" y="1781" width="0.7" height="15.0" fill="rgb(217,123,46)" rx="2" ry="2" />
<text  x="374.64" y="1791.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (2 samples, 0.04%)</title><rect x="499.3" y="1861" width="0.4" height="15.0" fill="rgb(213,101,16)" rx="2" ry="2" />
<text  x="502.30" y="1871.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="757.3" y="1605" width="0.2" height="15.0" fill="rgb(251,11,37)" rx="2" ry="2" />
<text  x="760.27" y="1615.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (173 samples, 3.23%)</title><rect x="453.3" y="1845" width="38.1" height="15.0" fill="rgb(208,64,3)" rx="2" ry="2" />
<text  x="456.30" y="1855.5" >lcz..</text>
</g>
<g >
<title>[unknown] (54 samples, 1.01%)</title><rect x="943.9" y="757" width="11.9" height="15.0" fill="rgb(243,207,3)" rx="2" ry="2" />
<text  x="946.92" y="767.5" ></text>
</g>
<g >
<title>GetPieceType (7 samples, 0.13%)</title><rect x="341.9" y="1813" width="1.6" height="15.0" fill="rgb(239,5,45)" rx="2" ry="2" />
<text  x="344.92" y="1823.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="903.9" y="1813" width="0.2" height="15.0" fill="rgb(247,58,40)" rx="2" ry="2" />
<text  x="906.86" y="1823.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="593.5" y="1781" width="0.2" height="15.0" fill="rgb(249,121,15)" rx="2" ry="2" />
<text  x="596.51" y="1791.5" ></text>
</g>
<g >
<title>GetPieceType (5 samples, 0.09%)</title><rect x="74.1" y="1829" width="1.1" height="15.0" fill="rgb(253,185,23)" rx="2" ry="2" />
<text  x="77.05" y="1839.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (8 samples, 0.15%)</title><rect x="599.0" y="1861" width="1.8" height="15.0" fill="rgb(240,164,50)" rx="2" ry="2" />
<text  x="602.01" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="20.3" y="1893" width="0.3" height="15.0" fill="rgb(219,198,52)" rx="2" ry="2" />
<text  x="23.35" y="1903.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="630.3" y="1909" width="0.2" height="15.0" fill="rgb(236,115,40)" rx="2" ry="2" />
<text  x="633.26" y="1919.5" ></text>
</g>
<g >
<title>boost::unit_test::ut_detail::global_fixture_impl&lt;F&gt;::setup (1 samples, 0.02%)</title><rect x="21.2" y="2021" width="0.2" height="15.0" fill="rgb(252,222,18)" rx="2" ry="2" />
<text  x="24.23" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (44 samples, 0.82%)</title><rect x="943.9" y="453" width="9.7" height="15.0" fill="rgb(226,22,27)" rx="2" ry="2" />
<text  x="946.92" y="463.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (44 samples, 0.82%)</title><rect x="352.5" y="1829" width="9.7" height="15.0" fill="rgb(212,96,22)" rx="2" ry="2" />
<text  x="355.49" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (179 samples, 3.34%)</title><rect x="94.1" y="1845" width="39.4" height="15.0" fill="rgb(230,24,17)" rx="2" ry="2" />
<text  x="97.08" y="1855.5" >lcz..</text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="234.1" y="1845" width="0.9" height="15.0" fill="rgb(237,113,44)" rx="2" ry="2" />
<text  x="237.07" y="1855.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="956.2" y="837" width="0.3" height="15.0" fill="rgb(249,73,31)" rx="2" ry="2" />
<text  x="959.25" y="847.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (4 samples, 0.07%)</title><rect x="691.2" y="1813" width="0.9" height="15.0" fill="rgb(245,187,30)" rx="2" ry="2" />
<text  x="694.23" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="364.4" y="1749" width="0.2" height="15.0" fill="rgb(248,105,1)" rx="2" ry="2" />
<text  x="367.37" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (27 samples, 0.50%)</title><rect x="166.3" y="1797" width="5.9" height="15.0" fill="rgb(214,174,41)" rx="2" ry="2" />
<text  x="169.28" y="1807.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="693.9" y="1829" width="0.2" height="15.0" fill="rgb(240,64,6)" rx="2" ry="2" />
<text  x="696.88" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="366.1" y="1781" width="0.5" height="15.0" fill="rgb(248,140,30)" rx="2" ry="2" />
<text  x="369.14" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (43 samples, 0.80%)</title><rect x="943.9" y="437" width="9.5" height="15.0" fill="rgb(246,209,51)" rx="2" ry="2" />
<text  x="946.92" y="447.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="208.5" y="1877" width="0.3" height="15.0" fill="rgb(226,165,15)" rx="2" ry="2" />
<text  x="211.54" y="1887.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="303.4" y="1781" width="0.4" height="15.0" fill="rgb(231,121,37)" rx="2" ry="2" />
<text  x="306.40" y="1791.5" ></text>
</g>
<g >
<title>CalcPSTScore (2 samples, 0.04%)</title><rect x="31.6" y="1877" width="0.4" height="15.0" fill="rgb(243,79,13)" rx="2" ry="2" />
<text  x="34.57" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (12 samples, 0.22%)</title><rect x="596.4" y="1861" width="2.6" height="15.0" fill="rgb(205,114,32)" rx="2" ry="2" />
<text  x="599.37" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (1 samples, 0.02%)</title><rect x="137.9" y="1829" width="0.2" height="15.0" fill="rgb(227,203,35)" rx="2" ry="2" />
<text  x="140.88" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (1 samples, 0.02%)</title><rect x="749.6" y="1781" width="0.2" height="15.0" fill="rgb(211,72,17)" rx="2" ry="2" />
<text  x="752.56" y="1791.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (1 samples, 0.02%)</title><rect x="595.3" y="1845" width="0.2" height="15.0" fill="rgb(233,131,28)" rx="2" ry="2" />
<text  x="598.27" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="850.6" y="1813" width="0.2" height="15.0" fill="rgb(253,166,52)" rx="2" ry="2" />
<text  x="853.59" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (86 samples, 1.60%)</title><rect x="943.9" y="1765" width="18.9" height="15.0" fill="rgb(236,224,33)" rx="2" ry="2" />
<text  x="946.92" y="1775.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (1 samples, 0.02%)</title><rect x="87.5" y="1797" width="0.2" height="15.0" fill="rgb(215,3,19)" rx="2" ry="2" />
<text  x="90.48" y="1807.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="205.7" y="1877" width="0.2" height="15.0" fill="rgb(231,176,3)" rx="2" ry="2" />
<text  x="208.68" y="1887.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="752.9" y="1749" width="0.4" height="15.0" fill="rgb(243,82,28)" rx="2" ry="2" />
<text  x="755.87" y="1759.5" ></text>
</g>
<g >
<title>IsTerminal (1 samples, 0.02%)</title><rect x="225.3" y="1877" width="0.2" height="15.0" fill="rgb(254,184,21)" rx="2" ry="2" />
<text  x="228.27" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="228.6" y="1829" width="0.2" height="15.0" fill="rgb(238,132,14)" rx="2" ry="2" />
<text  x="231.57" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (3 samples, 0.06%)</title><rect x="184.3" y="1861" width="0.7" height="15.0" fill="rgb(227,25,52)" rx="2" ry="2" />
<text  x="187.33" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (5 samples, 0.09%)</title><rect x="924.8" y="1861" width="1.1" height="15.0" fill="rgb(215,216,21)" rx="2" ry="2" />
<text  x="927.77" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (50 samples, 0.93%)</title><rect x="943.9" y="661" width="11.0" height="15.0" fill="rgb(210,206,53)" rx="2" ry="2" />
<text  x="946.92" y="671.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (3 samples, 0.06%)</title><rect x="549.3" y="1845" width="0.6" height="15.0" fill="rgb(205,24,17)" rx="2" ry="2" />
<text  x="552.27" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Castlings::operator== (1 samples, 0.02%)</title><rect x="496.0" y="1781" width="0.2" height="15.0" fill="rgb(241,203,13)" rx="2" ry="2" />
<text  x="499.00" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (4 samples, 0.07%)</title><rect x="230.1" y="1845" width="0.9" height="15.0" fill="rgb(253,226,39)" rx="2" ry="2" />
<text  x="233.11" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="89.5" y="1813" width="0.2" height="15.0" fill="rgb(235,81,16)" rx="2" ry="2" />
<text  x="92.46" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.04%)</title><rect x="635.3" y="1813" width="0.5" height="15.0" fill="rgb(231,55,49)" rx="2" ry="2" />
<text  x="638.33" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="34.4" y="1829" width="0.5" height="15.0" fill="rgb(226,156,43)" rx="2" ry="2" />
<text  x="37.43" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (14 samples, 0.26%)</title><rect x="47.9" y="1861" width="3.0" height="15.0" fill="rgb(224,131,53)" rx="2" ry="2" />
<text  x="50.86" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.04%)</title><rect x="739.4" y="1765" width="0.5" height="15.0" fill="rgb(235,201,12)" rx="2" ry="2" />
<text  x="742.44" y="1775.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="611.8" y="1829" width="0.2" height="15.0" fill="rgb(210,186,50)" rx="2" ry="2" />
<text  x="614.78" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (1 samples, 0.02%)</title><rect x="87.5" y="1749" width="0.2" height="15.0" fill="rgb(237,188,2)" rx="2" ry="2" />
<text  x="90.48" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (10 samples, 0.19%)</title><rect x="422.0" y="1797" width="2.2" height="15.0" fill="rgb(237,54,39)" rx="2" ry="2" />
<text  x="425.04" y="1807.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="754.0" y="1765" width="0.2" height="15.0" fill="rgb(218,162,50)" rx="2" ry="2" />
<text  x="756.97" y="1775.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (3 samples, 0.06%)</title><rect x="366.1" y="1813" width="0.7" height="15.0" fill="rgb(244,180,18)" rx="2" ry="2" />
<text  x="369.14" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (1 samples, 0.02%)</title><rect x="596.1" y="1861" width="0.3" height="15.0" fill="rgb(244,123,47)" rx="2" ry="2" />
<text  x="599.15" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (2 samples, 0.04%)</title><rect x="302.1" y="1845" width="0.4" height="15.0" fill="rgb(213,41,0)" rx="2" ry="2" />
<text  x="305.08" y="1855.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (13 samples, 0.24%)</title><rect x="215.1" y="1877" width="2.9" height="15.0" fill="rgb(211,207,35)" rx="2" ry="2" />
<text  x="218.14" y="1887.5" ></text>
</g>
<g >
<title>THistoryHeuristics::GetCounterMove (1 samples, 0.02%)</title><rect x="26.9" y="1893" width="0.3" height="15.0" fill="rgb(230,198,49)" rx="2" ry="2" />
<text  x="29.95" y="1903.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (18 samples, 0.34%)</title><rect x="568.0" y="1813" width="3.9" height="15.0" fill="rgb(252,152,45)" rx="2" ry="2" />
<text  x="570.97" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (1 samples, 0.02%)</title><rect x="693.9" y="1845" width="0.2" height="15.0" fill="rgb(241,33,4)" rx="2" ry="2" />
<text  x="696.88" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (1 samples, 0.02%)</title><rect x="133.3" y="1829" width="0.2" height="15.0" fill="rgb(252,145,1)" rx="2" ry="2" />
<text  x="136.26" y="1839.5" ></text>
</g>
<g >
<title>TTranspositionTable::Insert (13 samples, 0.24%)</title><rect x="495.6" y="1861" width="2.8" height="15.0" fill="rgb(251,229,30)" rx="2" ry="2" />
<text  x="498.56" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.04%)</title><rect x="960.6" y="1557" width="0.5" height="15.0" fill="rgb(214,152,52)" rx="2" ry="2" />
<text  x="963.65" y="1567.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (1 samples, 0.02%)</title><rect x="87.7" y="1781" width="0.2" height="15.0" fill="rgb(220,77,37)" rx="2" ry="2" />
<text  x="90.70" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (1 samples, 0.02%)</title><rect x="919.7" y="1813" width="0.2" height="15.0" fill="rgb(213,41,20)" rx="2" ry="2" />
<text  x="922.71" y="1823.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="214.5" y="1829" width="0.2" height="15.0" fill="rgb(241,193,34)" rx="2" ry="2" />
<text  x="217.48" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (4 samples, 0.07%)</title><rect x="936.9" y="1877" width="0.9" height="15.0" fill="rgb(218,229,35)" rx="2" ry="2" />
<text  x="939.88" y="1887.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (10 samples, 0.19%)</title><rect x="592.6" y="1797" width="2.2" height="15.0" fill="rgb(235,78,17)" rx="2" ry="2" />
<text  x="595.63" y="1807.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="617.1" y="1845" width="0.2" height="15.0" fill="rgb(227,101,25)" rx="2" ry="2" />
<text  x="620.06" y="1855.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (8 samples, 0.15%)</title><rect x="1111.6" y="2053" width="1.8" height="15.0" fill="rgb(225,19,46)" rx="2" ry="2" />
<text  x="1114.64" y="2063.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="800.2" y="1797" width="0.2" height="15.0" fill="rgb(210,124,9)" rx="2" ry="2" />
<text  x="803.19" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (3 samples, 0.06%)</title><rect x="733.5" y="1781" width="0.7" height="15.0" fill="rgb(245,117,25)" rx="2" ry="2" />
<text  x="736.50" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (8 samples, 0.15%)</title><rect x="641.5" y="1877" width="1.8" height="15.0" fill="rgb(254,14,11)" rx="2" ry="2" />
<text  x="644.49" y="1887.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="656.2" y="1861" width="0.3" height="15.0" fill="rgb(221,88,6)" rx="2" ry="2" />
<text  x="659.24" y="1871.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="38.8" y="1845" width="0.3" height="15.0" fill="rgb(250,65,22)" rx="2" ry="2" />
<text  x="41.83" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (9 samples, 0.17%)</title><rect x="759.7" y="1717" width="2.0" height="15.0" fill="rgb(249,198,38)" rx="2" ry="2" />
<text  x="762.69" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 1.04%)</title><rect x="943.9" y="837" width="12.3" height="15.0" fill="rgb(210,14,17)" rx="2" ry="2" />
<text  x="946.92" y="847.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="31.4" y="1845" width="0.2" height="15.0" fill="rgb(245,224,24)" rx="2" ry="2" />
<text  x="34.35" y="1855.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="959.3" y="1333" width="0.2" height="15.0" fill="rgb(207,202,21)" rx="2" ry="2" />
<text  x="962.33" y="1343.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (3 samples, 0.06%)</title><rect x="668.1" y="1797" width="0.7" height="15.0" fill="rgb(206,227,12)" rx="2" ry="2" />
<text  x="671.12" y="1807.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="954.9" y="661" width="0.2" height="15.0" fill="rgb(242,72,22)" rx="2" ry="2" />
<text  x="957.92" y="671.5" ></text>
</g>
<g >
<title>[unknown] (91 samples, 1.70%)</title><rect x="943.9" y="1845" width="20.0" height="15.0" fill="rgb(234,65,0)" rx="2" ry="2" />
<text  x="946.92" y="1855.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="749.8" y="1749" width="0.2" height="15.0" fill="rgb(249,30,22)" rx="2" ry="2" />
<text  x="752.78" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="619.7" y="1861" width="0.2" height="15.0" fill="rgb(234,202,53)" rx="2" ry="2" />
<text  x="622.70" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (79 samples, 1.47%)</title><rect x="943.9" y="1685" width="17.4" height="15.0" fill="rgb(226,81,50)" rx="2" ry="2" />
<text  x="946.92" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (92 samples, 1.72%)</title><rect x="943.9" y="1877" width="20.3" height="15.0" fill="rgb(210,66,28)" rx="2" ry="2" />
<text  x="946.92" y="1887.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="628.3" y="1861" width="0.2" height="15.0" fill="rgb(222,225,47)" rx="2" ry="2" />
<text  x="631.28" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (61 samples, 1.14%)</title><rect x="943.9" y="949" width="13.4" height="15.0" fill="rgb(213,39,39)" rx="2" ry="2" />
<text  x="946.92" y="959.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="697.0" y="1717" width="0.2" height="15.0" fill="rgb(251,202,34)" rx="2" ry="2" />
<text  x="699.96" y="1727.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="87.3" y="1765" width="0.2" height="15.0" fill="rgb(246,20,1)" rx="2" ry="2" />
<text  x="90.26" y="1775.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (1 samples, 0.02%)</title><rect x="20.3" y="1909" width="0.3" height="15.0" fill="rgb(214,45,38)" rx="2" ry="2" />
<text  x="23.35" y="1919.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (12 samples, 0.22%)</title><rect x="691.2" y="1845" width="2.7" height="15.0" fill="rgb(206,34,12)" rx="2" ry="2" />
<text  x="694.23" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (1 samples, 0.02%)</title><rect x="851.5" y="1845" width="0.2" height="15.0" fill="rgb(205,23,41)" rx="2" ry="2" />
<text  x="854.47" y="1855.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (15 samples, 0.28%)</title><rect x="817.4" y="1845" width="3.3" height="15.0" fill="rgb(224,19,5)" rx="2" ry="2" />
<text  x="820.36" y="1855.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (12 samples, 0.22%)</title><rect x="229.7" y="1861" width="2.6" height="15.0" fill="rgb(205,56,49)" rx="2" ry="2" />
<text  x="232.67" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (6 samples, 0.11%)</title><rect x="188.9" y="1861" width="1.4" height="15.0" fill="rgb(246,202,52)" rx="2" ry="2" />
<text  x="191.95" y="1871.5" ></text>
</g>
<g >
<title>CalcPSTScore (2 samples, 0.04%)</title><rect x="86.6" y="1813" width="0.4" height="15.0" fill="rgb(213,208,47)" rx="2" ry="2" />
<text  x="89.60" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (780 samples, 14.55%)</title><rect x="320.4" y="1861" width="171.6" height="15.0" fill="rgb(226,148,49)" rx="2" ry="2" />
<text  x="323.35" y="1871.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (55 samples, 1.03%)</title><rect x="521.1" y="1845" width="12.1" height="15.0" fill="rgb(217,36,53)" rx="2" ry="2" />
<text  x="524.09" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="629.2" y="1877" width="0.2" height="15.0" fill="rgb(238,116,11)" rx="2" ry="2" />
<text  x="632.16" y="1887.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (1 samples, 0.02%)</title><rect x="88.1" y="1765" width="0.3" height="15.0" fill="rgb(240,213,3)" rx="2" ry="2" />
<text  x="91.14" y="1775.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (1 samples, 0.02%)</title><rect x="202.4" y="1877" width="0.2" height="15.0" fill="rgb(253,120,4)" rx="2" ry="2" />
<text  x="205.37" y="1887.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="753.5" y="1765" width="0.2" height="15.0" fill="rgb(227,89,49)" rx="2" ry="2" />
<text  x="756.53" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (6 samples, 0.11%)</title><rect x="15.3" y="2021" width="1.3" height="15.0" fill="rgb(209,55,34)" rx="2" ry="2" />
<text  x="18.28" y="2031.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (7 samples, 0.13%)</title><rect x="732.8" y="1797" width="1.6" height="15.0" fill="rgb(216,51,47)" rx="2" ry="2" />
<text  x="735.84" y="1807.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="268.6" y="1797" width="0.2" height="15.0" fill="rgb(242,164,33)" rx="2" ry="2" />
<text  x="271.63" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (32 samples, 0.60%)</title><rect x="539.6" y="1845" width="7.0" height="15.0" fill="rgb(232,128,32)" rx="2" ry="2" />
<text  x="542.58" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (16 samples, 0.30%)</title><rect x="395.4" y="1781" width="3.5" height="15.0" fill="rgb(247,123,29)" rx="2" ry="2" />
<text  x="398.41" y="1791.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="697.4" y="1701" width="0.2" height="15.0" fill="rgb(212,197,51)" rx="2" ry="2" />
<text  x="700.40" y="1711.5" ></text>
</g>
<g >
<title>__sanitizer::BlockingMutex::Unlock (1 samples, 0.02%)</title><rect x="962.4" y="1733" width="0.2" height="15.0" fill="rgb(216,81,33)" rx="2" ry="2" />
<text  x="965.41" y="1743.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="700.7" y="1781" width="0.4" height="15.0" fill="rgb(214,150,3)" rx="2" ry="2" />
<text  x="703.70" y="1791.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="234.7" y="1829" width="0.3" height="15.0" fill="rgb(239,150,22)" rx="2" ry="2" />
<text  x="237.73" y="1839.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (2 samples, 0.04%)</title><rect x="655.8" y="1845" width="0.4" height="15.0" fill="rgb(212,45,0)" rx="2" ry="2" />
<text  x="658.80" y="1855.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (2 samples, 0.04%)</title><rect x="551.7" y="1829" width="0.4" height="15.0" fill="rgb(212,116,34)" rx="2" ry="2" />
<text  x="554.69" y="1839.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="179.5" y="1845" width="0.9" height="15.0" fill="rgb(248,184,42)" rx="2" ry="2" />
<text  x="182.48" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="760.6" y="1637" width="0.2" height="15.0" fill="rgb(228,129,52)" rx="2" ry="2" />
<text  x="763.57" y="1647.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="861.6" y="1813" width="0.2" height="15.0" fill="rgb(253,88,35)" rx="2" ry="2" />
<text  x="864.60" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (3 samples, 0.06%)</title><rect x="190.5" y="1861" width="0.6" height="15.0" fill="rgb(214,12,45)" rx="2" ry="2" />
<text  x="193.49" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.04%)</title><rect x="377.1" y="1765" width="0.5" height="15.0" fill="rgb(206,216,45)" rx="2" ry="2" />
<text  x="380.14" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (97 samples, 1.81%)</title><rect x="943.9" y="1989" width="21.4" height="15.0" fill="rgb(212,142,6)" rx="2" ry="2" />
<text  x="946.92" y="1999.5" >[..</text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="829.9" y="1797" width="0.2" height="15.0" fill="rgb(248,119,22)" rx="2" ry="2" />
<text  x="832.90" y="1807.5" ></text>
</g>
<g >
<title>bratko_kopec_invoker (836 samples, 15.59%)</title><rect x="21.4" y="2021" width="184.1" height="15.0" fill="rgb(217,171,7)" rx="2" ry="2" />
<text  x="24.45" y="2031.5" >bratko_kopec_invoker</text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="700.5" y="1781" width="0.2" height="15.0" fill="rgb(213,116,2)" rx="2" ry="2" />
<text  x="703.48" y="1791.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (2 samples, 0.04%)</title><rect x="849.7" y="1829" width="0.5" height="15.0" fill="rgb(230,51,26)" rx="2" ry="2" />
<text  x="852.71" y="1839.5" ></text>
</g>
<g >
<title>IsCapture (1 samples, 0.02%)</title><rect x="723.4" y="1845" width="0.2" height="15.0" fill="rgb(228,89,29)" rx="2" ry="2" />
<text  x="726.37" y="1855.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (2 samples, 0.04%)</title><rect x="750.2" y="1797" width="0.5" height="15.0" fill="rgb(232,35,17)" rx="2" ry="2" />
<text  x="753.22" y="1807.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="670.1" y="1829" width="0.2" height="15.0" fill="rgb(205,38,31)" rx="2" ry="2" />
<text  x="673.10" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (1 samples, 0.02%)</title><rect x="362.0" y="1797" width="0.2" height="15.0" fill="rgb(249,132,15)" rx="2" ry="2" />
<text  x="364.95" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.04%)</title><rect x="85.7" y="1797" width="0.5" height="15.0" fill="rgb(239,96,54)" rx="2" ry="2" />
<text  x="88.72" y="1807.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="512.9" y="1813" width="0.3" height="15.0" fill="rgb(243,94,19)" rx="2" ry="2" />
<text  x="515.95" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="630.3" y="1893" width="0.2" height="15.0" fill="rgb(215,164,5)" rx="2" ry="2" />
<text  x="633.26" y="1903.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (80 samples, 1.49%)</title><rect x="277.7" y="1845" width="17.6" height="15.0" fill="rgb(245,100,46)" rx="2" ry="2" />
<text  x="280.65" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (2 samples, 0.04%)</title><rect x="929.6" y="1829" width="0.5" height="15.0" fill="rgb(220,152,23)" rx="2" ry="2" />
<text  x="932.61" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (66 samples, 1.23%)</title><rect x="943.9" y="1221" width="14.5" height="15.0" fill="rgb(213,27,9)" rx="2" ry="2" />
<text  x="946.92" y="1231.5" ></text>
</g>
<g >
<title>GetPieceType (7 samples, 0.13%)</title><rect x="60.6" y="1845" width="1.6" height="15.0" fill="rgb(211,134,32)" rx="2" ry="2" />
<text  x="63.62" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (3 samples, 0.06%)</title><rect x="722.7" y="1829" width="0.7" height="15.0" fill="rgb(210,155,8)" rx="2" ry="2" />
<text  x="725.71" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="633.3" y="1829" width="0.3" height="15.0" fill="rgb(206,122,38)" rx="2" ry="2" />
<text  x="636.35" y="1839.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (1 samples, 0.02%)</title><rect x="816.5" y="1781" width="0.2" height="15.0" fill="rgb(222,3,26)" rx="2" ry="2" />
<text  x="819.48" y="1791.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (5 samples, 0.09%)</title><rect x="216.9" y="1845" width="1.1" height="15.0" fill="rgb(217,0,22)" rx="2" ry="2" />
<text  x="219.90" y="1855.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (6 samples, 0.11%)</title><rect x="748.5" y="1813" width="1.3" height="15.0" fill="rgb(234,20,5)" rx="2" ry="2" />
<text  x="751.46" y="1823.5" ></text>
</g>
<g >
<title>CalcPSTScore (27 samples, 0.50%)</title><rect x="742.5" y="1813" width="6.0" height="15.0" fill="rgb(217,119,46)" rx="2" ry="2" />
<text  x="745.52" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (4 samples, 0.07%)</title><rect x="47.0" y="1861" width="0.9" height="15.0" fill="rgb(220,173,34)" rx="2" ry="2" />
<text  x="49.98" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="765.4" y="1717" width="0.5" height="15.0" fill="rgb(219,180,34)" rx="2" ry="2" />
<text  x="768.41" y="1727.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (93 samples, 1.73%)</title><rect x="141.0" y="1845" width="20.4" height="15.0" fill="rgb(248,32,46)" rx="2" ry="2" />
<text  x="143.96" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (37 samples, 0.69%)</title><rect x="943.9" y="309" width="8.2" height="15.0" fill="rgb(254,209,13)" rx="2" ry="2" />
<text  x="946.92" y="319.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="664.6" y="1797" width="0.2" height="15.0" fill="rgb(249,188,45)" rx="2" ry="2" />
<text  x="667.60" y="1807.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (1 samples, 0.02%)</title><rect x="161.0" y="1813" width="0.2" height="15.0" fill="rgb(212,101,44)" rx="2" ry="2" />
<text  x="163.99" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="733.3" y="1765" width="0.2" height="15.0" fill="rgb(252,177,49)" rx="2" ry="2" />
<text  x="736.28" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="238.0" y="1845" width="0.3" height="15.0" fill="rgb(214,106,2)" rx="2" ry="2" />
<text  x="241.03" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (26 samples, 0.48%)</title><rect x="352.7" y="1813" width="5.7" height="15.0" fill="rgb(247,19,33)" rx="2" ry="2" />
<text  x="355.71" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="133.9" y="1829" width="0.2" height="15.0" fill="rgb(222,48,7)" rx="2" ry="2" />
<text  x="136.92" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.09%)</title><rect x="383.7" y="1749" width="1.1" height="15.0" fill="rgb(212,28,20)" rx="2" ry="2" />
<text  x="386.74" y="1759.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (8 samples, 0.15%)</title><rect x="691.2" y="1829" width="1.8" height="15.0" fill="rgb(205,116,34)" rx="2" ry="2" />
<text  x="694.23" y="1839.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (9 samples, 0.17%)</title><rect x="352.9" y="1797" width="2.0" height="15.0" fill="rgb(236,1,1)" rx="2" ry="2" />
<text  x="355.93" y="1807.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="751.8" y="1781" width="0.2" height="15.0" fill="rgb(252,178,21)" rx="2" ry="2" />
<text  x="754.76" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (17 samples, 0.32%)</title><rect x="16.6" y="2037" width="3.7" height="15.0" fill="rgb(250,193,6)" rx="2" ry="2" />
<text  x="19.60" y="2047.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (1 samples, 0.02%)</title><rect x="709.3" y="1797" width="0.2" height="15.0" fill="rgb(206,202,40)" rx="2" ry="2" />
<text  x="712.28" y="1807.5" ></text>
</g>
<g >
<title>lczero::Position::Position (4 samples, 0.07%)</title><rect x="693.0" y="1829" width="0.9" height="15.0" fill="rgb(208,208,3)" rx="2" ry="2" />
<text  x="696.00" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (62 samples, 1.16%)</title><rect x="943.9" y="1045" width="13.7" height="15.0" fill="rgb(236,184,46)" rx="2" ry="2" />
<text  x="946.92" y="1055.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="47.2" y="1797" width="0.2" height="15.0" fill="rgb(215,31,25)" rx="2" ry="2" />
<text  x="50.20" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="666.1" y="1781" width="0.3" height="15.0" fill="rgb(227,190,22)" rx="2" ry="2" />
<text  x="669.14" y="1791.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="161.2" y="1813" width="0.2" height="15.0" fill="rgb(250,53,15)" rx="2" ry="2" />
<text  x="164.21" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="90.1" y="1797" width="0.2" height="15.0" fill="rgb(225,158,9)" rx="2" ry="2" />
<text  x="93.12" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="214.7" y="1845" width="0.2" height="15.0" fill="rgb(252,107,4)" rx="2" ry="2" />
<text  x="217.70" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (28 samples, 0.52%)</title><rect x="809.9" y="1765" width="6.1" height="15.0" fill="rgb(226,83,29)" rx="2" ry="2" />
<text  x="812.87" y="1775.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="301.4" y="1829" width="0.2" height="15.0" fill="rgb(245,71,44)" rx="2" ry="2" />
<text  x="304.42" y="1839.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (61 samples, 1.14%)</title><rect x="119.6" y="1813" width="13.4" height="15.0" fill="rgb(222,228,51)" rx="2" ry="2" />
<text  x="122.61" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.04%)</title><rect x="221.1" y="1845" width="0.4" height="15.0" fill="rgb(206,191,47)" rx="2" ry="2" />
<text  x="224.08" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 1.21%)</title><rect x="943.9" y="1189" width="14.3" height="15.0" fill="rgb(206,169,4)" rx="2" ry="2" />
<text  x="946.92" y="1199.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="154.2" y="1829" width="0.2" height="15.0" fill="rgb(207,153,37)" rx="2" ry="2" />
<text  x="157.17" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (70 samples, 1.31%)</title><rect x="943.9" y="1301" width="15.4" height="15.0" fill="rgb(208,220,31)" rx="2" ry="2" />
<text  x="946.92" y="1311.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (5 samples, 0.09%)</title><rect x="382.4" y="1781" width="1.1" height="15.0" fill="rgb(244,199,21)" rx="2" ry="2" />
<text  x="385.42" y="1791.5" ></text>
</g>
<g >
<title>THistoryHeuristics::Get (1 samples, 0.02%)</title><rect x="214.9" y="1877" width="0.2" height="15.0" fill="rgb(229,94,36)" rx="2" ry="2" />
<text  x="217.92" y="1887.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="26.1" y="1877" width="0.2" height="15.0" fill="rgb(223,153,42)" rx="2" ry="2" />
<text  x="29.07" y="1887.5" ></text>
</g>
<g >
<title>__asan_memset (1 samples, 0.02%)</title><rect x="596.1" y="1845" width="0.3" height="15.0" fill="rgb(217,225,50)" rx="2" ry="2" />
<text  x="599.15" y="1855.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (1 samples, 0.02%)</title><rect x="444.5" y="1781" width="0.2" height="15.0" fill="rgb(220,107,6)" rx="2" ry="2" />
<text  x="447.49" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (1 samples, 0.02%)</title><rect x="32.2" y="1861" width="0.3" height="15.0" fill="rgb(220,140,49)" rx="2" ry="2" />
<text  x="35.23" y="1871.5" ></text>
</g>
<g >
<title>std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;::pair&lt;lczero::Position const&amp;, 0ul, TTranspositionTable::TNode&amp;&amp;, 0ul&gt; (1 samples, 0.02%)</title><rect x="850.8" y="1781" width="0.2" height="15.0" fill="rgb(249,208,8)" rx="2" ry="2" />
<text  x="853.81" y="1791.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="87.3" y="1749" width="0.2" height="15.0" fill="rgb(218,196,49)" rx="2" ry="2" />
<text  x="90.26" y="1759.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="314.8" y="1797" width="0.3" height="15.0" fill="rgb(237,132,15)" rx="2" ry="2" />
<text  x="317.85" y="1807.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="49.4" y="1797" width="0.2" height="15.0" fill="rgb(219,54,30)" rx="2" ry="2" />
<text  x="52.40" y="1807.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (1 samples, 0.02%)</title><rect x="697.0" y="1749" width="0.2" height="15.0" fill="rgb(230,109,36)" rx="2" ry="2" />
<text  x="699.96" y="1759.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="301.6" y="1797" width="0.3" height="15.0" fill="rgb(251,63,5)" rx="2" ry="2" />
<text  x="304.64" y="1807.5" ></text>
</g>
<g >
<title>IsCapture (4 samples, 0.07%)</title><rect x="674.7" y="1845" width="0.9" height="15.0" fill="rgb(220,135,26)" rx="2" ry="2" />
<text  x="677.73" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (55 samples, 1.03%)</title><rect x="943.9" y="789" width="12.1" height="15.0" fill="rgb(224,186,16)" rx="2" ry="2" />
<text  x="946.92" y="799.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.04%)</title><rect x="635.8" y="1861" width="0.4" height="15.0" fill="rgb(242,164,13)" rx="2" ry="2" />
<text  x="638.77" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="216.2" y="1845" width="0.7" height="15.0" fill="rgb(220,102,13)" rx="2" ry="2" />
<text  x="219.24" y="1855.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="22.3" y="1893" width="0.2" height="15.0" fill="rgb(251,141,29)" rx="2" ry="2" />
<text  x="25.33" y="1903.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="202.8" y="1877" width="0.2" height="15.0" fill="rgb(233,126,27)" rx="2" ry="2" />
<text  x="205.81" y="1887.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.02%)</title><rect x="627.8" y="1877" width="0.3" height="15.0" fill="rgb(245,170,14)" rx="2" ry="2" />
<text  x="630.84" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (36 samples, 0.67%)</title><rect x="470.0" y="1813" width="8.0" height="15.0" fill="rgb(222,14,5)" rx="2" ry="2" />
<text  x="473.03" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="617.3" y="1861" width="0.2" height="15.0" fill="rgb(234,94,19)" rx="2" ry="2" />
<text  x="620.28" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (2 samples, 0.04%)</title><rect x="365.7" y="1781" width="0.4" height="15.0" fill="rgb(252,152,45)" rx="2" ry="2" />
<text  x="368.69" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 1.51%)</title><rect x="943.9" y="1701" width="17.8" height="15.0" fill="rgb(212,197,53)" rx="2" ry="2" />
<text  x="946.92" y="1711.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="34.9" y="1877" width="0.2" height="15.0" fill="rgb(232,179,6)" rx="2" ry="2" />
<text  x="37.87" y="1887.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (13 samples, 0.24%)</title><rect x="739.0" y="1813" width="2.9" height="15.0" fill="rgb(246,149,17)" rx="2" ry="2" />
<text  x="742.00" y="1823.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="770.3" y="1813" width="0.2" height="15.0" fill="rgb(212,99,39)" rx="2" ry="2" />
<text  x="773.25" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="230.5" y="1813" width="0.3" height="15.0" fill="rgb(246,74,26)" rx="2" ry="2" />
<text  x="233.55" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (2 samples, 0.04%)</title><rect x="634.2" y="1845" width="0.5" height="15.0" fill="rgb(241,152,6)" rx="2" ry="2" />
<text  x="637.23" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (1 samples, 0.02%)</title><rect x="378.9" y="1749" width="0.2" height="15.0" fill="rgb(228,12,35)" rx="2" ry="2" />
<text  x="381.90" y="1759.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (2 samples, 0.04%)</title><rect x="37.5" y="1861" width="0.5" height="15.0" fill="rgb(235,31,11)" rx="2" ry="2" />
<text  x="40.51" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (1 samples, 0.02%)</title><rect x="382.2" y="1781" width="0.2" height="15.0" fill="rgb(250,175,3)" rx="2" ry="2" />
<text  x="385.20" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (1 samples, 0.02%)</title><rect x="964.8" y="1941" width="0.2" height="15.0" fill="rgb(245,30,8)" rx="2" ry="2" />
<text  x="967.83" y="1951.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (1 samples, 0.02%)</title><rect x="20.3" y="1877" width="0.3" height="15.0" fill="rgb(242,117,16)" rx="2" ry="2" />
<text  x="23.35" y="1887.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="601.0" y="1861" width="0.2" height="15.0" fill="rgb(238,192,4)" rx="2" ry="2" />
<text  x="603.99" y="1871.5" ></text>
</g>
<g >
<title>CalcPSTScore (37 samples, 0.69%)</title><rect x="724.3" y="1829" width="8.1" height="15.0" fill="rgb(215,212,36)" rx="2" ry="2" />
<text  x="727.25" y="1839.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="630.3" y="1877" width="0.2" height="15.0" fill="rgb(239,99,22)" rx="2" ry="2" />
<text  x="633.26" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="220.0" y="1749" width="0.2" height="15.0" fill="rgb(207,30,38)" rx="2" ry="2" />
<text  x="222.98" y="1759.5" ></text>
</g>
<g >
<title>__asan_set_shadow_00 (1 samples, 0.02%)</title><rect x="663.5" y="1781" width="0.2" height="15.0" fill="rgb(239,207,50)" rx="2" ry="2" />
<text  x="666.50" y="1791.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (15 samples, 0.28%)</title><rect x="1121.5" y="2053" width="3.3" height="15.0" fill="rgb(224,221,34)" rx="2" ry="2" />
<text  x="1124.55" y="2063.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="958.7" y="1253" width="0.2" height="15.0" fill="rgb(232,21,1)" rx="2" ry="2" />
<text  x="961.67" y="1263.5" ></text>
</g>
<g >
<title>lczero::Position::Position (18 samples, 0.34%)</title><rect x="181.0" y="1877" width="4.0" height="15.0" fill="rgb(213,29,54)" rx="2" ry="2" />
<text  x="184.02" y="1887.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (836 samples, 15.59%)</title><rect x="21.4" y="1941" width="184.1" height="15.0" fill="rgb(229,110,39)" rx="2" ry="2" />
<text  x="24.45" y="1951.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="698.9" y="1797" width="0.3" height="15.0" fill="rgb(219,12,45)" rx="2" ry="2" />
<text  x="701.94" y="1807.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="301.6" y="1829" width="0.3" height="15.0" fill="rgb(238,49,18)" rx="2" ry="2" />
<text  x="304.64" y="1839.5" ></text>
</g>
<g >
<title>GetPieceType (10 samples, 0.19%)</title><rect x="327.8" y="1829" width="2.2" height="15.0" fill="rgb(220,85,39)" rx="2" ry="2" />
<text  x="330.84" y="1839.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="754.2" y="1733" width="0.2" height="15.0" fill="rgb(207,111,16)" rx="2" ry="2" />
<text  x="757.19" y="1743.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="956.5" y="853" width="0.2" height="15.0" fill="rgb(207,166,37)" rx="2" ry="2" />
<text  x="959.47" y="863.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="301.6" y="1813" width="0.3" height="15.0" fill="rgb(223,124,3)" rx="2" ry="2" />
<text  x="304.64" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (10 samples, 0.19%)</title><rect x="926.3" y="1877" width="2.2" height="15.0" fill="rgb(244,183,47)" rx="2" ry="2" />
<text  x="929.31" y="1887.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (38 samples, 0.71%)</title><rect x="586.5" y="1861" width="8.3" height="15.0" fill="rgb(221,164,41)" rx="2" ry="2" />
<text  x="589.46" y="1871.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (25 samples, 0.47%)</title><rect x="343.5" y="1813" width="5.5" height="15.0" fill="rgb(254,124,10)" rx="2" ry="2" />
<text  x="346.46" y="1823.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (2 samples, 0.04%)</title><rect x="936.2" y="1845" width="0.5" height="15.0" fill="rgb(246,193,36)" rx="2" ry="2" />
<text  x="939.22" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (92 samples, 1.72%)</title><rect x="410.6" y="1813" width="20.2" height="15.0" fill="rgb(220,142,41)" rx="2" ry="2" />
<text  x="413.60" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.04%)</title><rect x="663.1" y="1765" width="0.4" height="15.0" fill="rgb(207,15,40)" rx="2" ry="2" />
<text  x="666.06" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="759.0" y="1669" width="0.7" height="15.0" fill="rgb(237,90,24)" rx="2" ry="2" />
<text  x="762.03" y="1679.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (1 samples, 0.02%)</title><rect x="20.3" y="1925" width="0.3" height="15.0" fill="rgb(243,164,29)" rx="2" ry="2" />
<text  x="23.35" y="1935.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (711 samples, 13.26%)</title><rect x="35.1" y="1893" width="156.5" height="15.0" fill="rgb(218,160,41)" rx="2" ry="2" />
<text  x="38.09" y="1903.5" >TSearchStrategy::Sea..</text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="192.2" y="1845" width="0.3" height="15.0" fill="rgb(210,58,53)" rx="2" ry="2" />
<text  x="195.25" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (5 samples, 0.09%)</title><rect x="847.7" y="1813" width="1.1" height="15.0" fill="rgb(216,179,29)" rx="2" ry="2" />
<text  x="850.73" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="208.8" y="1893" width="0.2" height="15.0" fill="rgb(218,193,20)" rx="2" ry="2" />
<text  x="211.76" y="1903.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.04%)</title><rect x="46.5" y="1845" width="0.5" height="15.0" fill="rgb(240,63,8)" rx="2" ry="2" />
<text  x="49.54" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="923.0" y="1749" width="0.2" height="15.0" fill="rgb(213,140,33)" rx="2" ry="2" />
<text  x="926.01" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="639.1" y="1829" width="0.6" height="15.0" fill="rgb(229,84,6)" rx="2" ry="2" />
<text  x="642.07" y="1839.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="266.6" y="1781" width="0.3" height="15.0" fill="rgb(229,95,22)" rx="2" ry="2" />
<text  x="269.65" y="1791.5" ></text>
</g>
<g >
<title>CalcPSTScore (8 samples, 0.15%)</title><rect x="25.0" y="1893" width="1.7" height="15.0" fill="rgb(243,181,28)" rx="2" ry="2" />
<text  x="27.97" y="1903.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (3 samples, 0.06%)</title><rect x="611.3" y="1877" width="0.7" height="15.0" fill="rgb(252,146,30)" rx="2" ry="2" />
<text  x="614.34" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (1 samples, 0.02%)</title><rect x="951.4" y="213" width="0.2" height="15.0" fill="rgb(246,207,35)" rx="2" ry="2" />
<text  x="954.40" y="223.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (2 samples, 0.04%)</title><rect x="138.3" y="1813" width="0.5" height="15.0" fill="rgb(226,131,15)" rx="2" ry="2" />
<text  x="141.32" y="1823.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (3 samples, 0.06%)</title><rect x="799.1" y="1797" width="0.6" height="15.0" fill="rgb(208,89,21)" rx="2" ry="2" />
<text  x="802.09" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (7 samples, 0.13%)</title><rect x="355.3" y="1797" width="1.6" height="15.0" fill="rgb(216,229,9)" rx="2" ry="2" />
<text  x="358.35" y="1807.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (24 samples, 0.45%)</title><rect x="782.8" y="1797" width="5.3" height="15.0" fill="rgb(246,173,25)" rx="2" ry="2" />
<text  x="785.80" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="613.5" y="1845" width="0.3" height="15.0" fill="rgb(225,87,44)" rx="2" ry="2" />
<text  x="616.54" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (14 samples, 0.26%)</title><rect x="89.7" y="1829" width="3.1" height="15.0" fill="rgb(242,210,50)" rx="2" ry="2" />
<text  x="92.68" y="1839.5" ></text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (1 samples, 0.02%)</title><rect x="216.5" y="1829" width="0.2" height="15.0" fill="rgb(235,201,8)" rx="2" ry="2" />
<text  x="219.46" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="49.4" y="1781" width="0.2" height="15.0" fill="rgb(227,196,1)" rx="2" ry="2" />
<text  x="52.40" y="1791.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="788.3" y="1797" width="0.2" height="15.0" fill="rgb(247,66,28)" rx="2" ry="2" />
<text  x="791.30" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.06%)</title><rect x="642.6" y="1861" width="0.7" height="15.0" fill="rgb(218,128,10)" rx="2" ry="2" />
<text  x="645.59" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="21.7" y="1893" width="0.2" height="15.0" fill="rgb(248,63,41)" rx="2" ry="2" />
<text  x="24.67" y="1903.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (1 samples, 0.02%)</title><rect x="693.7" y="1813" width="0.2" height="15.0" fill="rgb(231,218,44)" rx="2" ry="2" />
<text  x="696.66" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::BlockingMutex::Unlock (1 samples, 0.02%)</title><rect x="952.9" y="389" width="0.3" height="15.0" fill="rgb(215,87,29)" rx="2" ry="2" />
<text  x="955.94" y="399.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (57 samples, 1.06%)</title><rect x="867.5" y="1845" width="12.6" height="15.0" fill="rgb(217,85,21)" rx="2" ry="2" />
<text  x="870.54" y="1855.5" ></text>
</g>
<g >
<title>__lsan::LsanMetadata::LsanMetadata (1 samples, 0.02%)</title><rect x="986.6" y="2037" width="0.2" height="15.0" fill="rgb(227,197,27)" rx="2" ry="2" />
<text  x="989.62" y="2047.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (32 samples, 0.60%)</title><rect x="694.1" y="1845" width="7.0" height="15.0" fill="rgb(244,38,32)" rx="2" ry="2" />
<text  x="697.10" y="1855.5" ></text>
</g>
<g >
<title>THistoryHeuristics::GetCounterMove (5 samples, 0.09%)</title><rect x="676.5" y="1845" width="1.1" height="15.0" fill="rgb(217,101,11)" rx="2" ry="2" />
<text  x="679.49" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (1 samples, 0.02%)</title><rect x="208.3" y="1877" width="0.2" height="15.0" fill="rgb(248,136,40)" rx="2" ry="2" />
<text  x="211.32" y="1887.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (40 samples, 0.75%)</title><rect x="677.6" y="1845" width="8.8" height="15.0" fill="rgb(245,58,4)" rx="2" ry="2" />
<text  x="680.59" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (87 samples, 1.62%)</title><rect x="943.9" y="1781" width="19.2" height="15.0" fill="rgb(244,133,17)" rx="2" ry="2" />
<text  x="946.92" y="1791.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="399.2" y="1781" width="0.4" height="15.0" fill="rgb(248,41,46)" rx="2" ry="2" />
<text  x="402.15" y="1791.5" ></text>
</g>
<g >
<title>IsCapture (1 samples, 0.02%)</title><rect x="755.5" y="1765" width="0.2" height="15.0" fill="rgb(206,87,45)" rx="2" ry="2" />
<text  x="758.51" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="50.3" y="1845" width="0.4" height="15.0" fill="rgb(205,186,35)" rx="2" ry="2" />
<text  x="53.28" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (1 samples, 0.02%)</title><rect x="34.0" y="1845" width="0.2" height="15.0" fill="rgb(207,209,44)" rx="2" ry="2" />
<text  x="36.99" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 1.21%)</title><rect x="943.9" y="1173" width="14.3" height="15.0" fill="rgb(249,95,28)" rx="2" ry="2" />
<text  x="946.92" y="1183.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="600.8" y="1845" width="0.2" height="15.0" fill="rgb(210,56,36)" rx="2" ry="2" />
<text  x="603.77" y="1855.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="960.4" y="1541" width="0.2" height="15.0" fill="rgb(249,40,19)" rx="2" ry="2" />
<text  x="963.43" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (72 samples, 1.34%)</title><rect x="943.9" y="1445" width="15.9" height="15.0" fill="rgb(251,67,17)" rx="2" ry="2" />
<text  x="946.92" y="1455.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (1,906 samples, 35.55%)</title><rect x="209.0" y="1909" width="419.5" height="15.0" fill="rgb(226,173,12)" rx="2" ry="2" />
<text  x="211.98" y="1919.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="754.6" y="1749" width="0.2" height="15.0" fill="rgb(245,190,48)" rx="2" ry="2" />
<text  x="757.63" y="1759.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="87.5" y="1781" width="0.2" height="15.0" fill="rgb(239,120,13)" rx="2" ry="2" />
<text  x="90.48" y="1791.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="737.5" y="1797" width="0.2" height="15.0" fill="rgb(229,40,11)" rx="2" ry="2" />
<text  x="740.46" y="1807.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (10 samples, 0.19%)</title><rect x="617.5" y="1861" width="2.2" height="15.0" fill="rgb(206,121,10)" rx="2" ry="2" />
<text  x="620.50" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.04%)</title><rect x="490.3" y="1797" width="0.4" height="15.0" fill="rgb(210,86,52)" rx="2" ry="2" />
<text  x="493.28" y="1807.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, true&gt; &gt;::construct&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="613.5" y="1829" width="0.3" height="15.0" fill="rgb(228,181,40)" rx="2" ry="2" />
<text  x="616.54" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="628.5" y="1909" width="0.4" height="15.0" fill="rgb(224,18,37)" rx="2" ry="2" />
<text  x="631.50" y="1919.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="22.8" y="1861" width="0.4" height="15.0" fill="rgb(251,116,21)" rx="2" ry="2" />
<text  x="25.77" y="1871.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (6 samples, 0.11%)</title><rect x="350.9" y="1813" width="1.4" height="15.0" fill="rgb(246,55,26)" rx="2" ry="2" />
<text  x="353.95" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.09%)</title><rect x="216.9" y="1861" width="1.1" height="15.0" fill="rgb(241,204,45)" rx="2" ry="2" />
<text  x="219.90" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (7 samples, 0.13%)</title><rect x="152.6" y="1829" width="1.6" height="15.0" fill="rgb(243,218,45)" rx="2" ry="2" />
<text  x="155.63" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (1 samples, 0.02%)</title><rect x="926.1" y="1861" width="0.2" height="15.0" fill="rgb(222,127,28)" rx="2" ry="2" />
<text  x="929.09" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (7 samples, 0.13%)</title><rect x="924.8" y="1877" width="1.5" height="15.0" fill="rgb(225,218,9)" rx="2" ry="2" />
<text  x="927.77" y="1887.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (1 samples, 0.02%)</title><rect x="208.3" y="1829" width="0.2" height="15.0" fill="rgb(241,128,53)" rx="2" ry="2" />
<text  x="211.32" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (60 samples, 1.12%)</title><rect x="943.9" y="901" width="13.2" height="15.0" fill="rgb(239,172,27)" rx="2" ry="2" />
<text  x="946.92" y="911.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (20 samples, 0.37%)</title><rect x="783.7" y="1765" width="4.4" height="15.0" fill="rgb(251,1,18)" rx="2" ry="2" />
<text  x="786.68" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (39 samples, 0.73%)</title><rect x="124.2" y="1781" width="8.6" height="15.0" fill="rgb(235,59,19)" rx="2" ry="2" />
<text  x="127.24" y="1791.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="376.9" y="1749" width="0.2" height="15.0" fill="rgb(229,202,10)" rx="2" ry="2" />
<text  x="379.92" y="1759.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (50 samples, 0.93%)</title><rect x="805.3" y="1813" width="11.0" height="15.0" fill="rgb(232,29,28)" rx="2" ry="2" />
<text  x="808.25" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="762.8" y="1685" width="0.4" height="15.0" fill="rgb(217,110,42)" rx="2" ry="2" />
<text  x="765.77" y="1695.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="629.6" y="1877" width="0.2" height="15.0" fill="rgb(233,143,54)" rx="2" ry="2" />
<text  x="632.60" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="32.7" y="1749" width="0.2" height="15.0" fill="rgb(241,135,7)" rx="2" ry="2" />
<text  x="35.67" y="1759.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (2 samples, 0.04%)</title><rect x="628.9" y="1909" width="0.5" height="15.0" fill="rgb(240,69,29)" rx="2" ry="2" />
<text  x="631.94" y="1919.5" ></text>
</g>
<g >
<title>lczero::Position::Position (7 samples, 0.13%)</title><rect x="356.9" y="1797" width="1.5" height="15.0" fill="rgb(219,222,38)" rx="2" ry="2" />
<text  x="359.89" y="1807.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="161.4" y="1845" width="0.3" height="15.0" fill="rgb(206,220,12)" rx="2" ry="2" />
<text  x="164.43" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (1 samples, 0.02%)</title><rect x="959.1" y="1285" width="0.2" height="15.0" fill="rgb(215,53,51)" rx="2" ry="2" />
<text  x="962.11" y="1295.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.04%)</title><rect x="761.7" y="1701" width="0.4" height="15.0" fill="rgb(248,197,10)" rx="2" ry="2" />
<text  x="764.67" y="1711.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (3 samples, 0.06%)</title><rect x="594.8" y="1877" width="0.7" height="15.0" fill="rgb(241,38,43)" rx="2" ry="2" />
<text  x="597.83" y="1887.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (5 samples, 0.09%)</title><rect x="42.8" y="1829" width="1.1" height="15.0" fill="rgb(216,26,3)" rx="2" ry="2" />
<text  x="45.80" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="964.6" y="1941" width="0.2" height="15.0" fill="rgb(226,148,33)" rx="2" ry="2" />
<text  x="967.61" y="1951.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="208.1" y="1877" width="0.2" height="15.0" fill="rgb(247,208,32)" rx="2" ry="2" />
<text  x="211.10" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (9 samples, 0.17%)</title><rect x="699.2" y="1829" width="1.9" height="15.0" fill="rgb(238,130,2)" rx="2" ry="2" />
<text  x="702.16" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (2 samples, 0.04%)</title><rect x="385.3" y="1797" width="0.4" height="15.0" fill="rgb(230,43,52)" rx="2" ry="2" />
<text  x="388.28" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.04%)</title><rect x="692.1" y="1813" width="0.5" height="15.0" fill="rgb(206,165,33)" rx="2" ry="2" />
<text  x="695.12" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="364.4" y="1781" width="0.4" height="15.0" fill="rgb(206,30,31)" rx="2" ry="2" />
<text  x="367.37" y="1791.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="756.6" y="1733" width="0.2" height="15.0" fill="rgb(231,195,13)" rx="2" ry="2" />
<text  x="759.61" y="1743.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="381.5" y="1765" width="0.5" height="15.0" fill="rgb(248,113,35)" rx="2" ry="2" />
<text  x="384.54" y="1775.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="629.4" y="1893" width="0.2" height="15.0" fill="rgb(230,88,25)" rx="2" ry="2" />
<text  x="632.38" y="1903.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (1 samples, 0.02%)</title><rect x="935.3" y="1877" width="0.3" height="15.0" fill="rgb(227,28,9)" rx="2" ry="2" />
<text  x="938.33" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="924.5" y="1845" width="0.3" height="15.0" fill="rgb(238,17,17)" rx="2" ry="2" />
<text  x="927.55" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (12 samples, 0.22%)</title><rect x="583.4" y="1845" width="2.6" height="15.0" fill="rgb(220,101,41)" rx="2" ry="2" />
<text  x="586.38" y="1855.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (4 samples, 0.07%)</title><rect x="41.9" y="1829" width="0.9" height="15.0" fill="rgb(216,74,34)" rx="2" ry="2" />
<text  x="44.92" y="1839.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="227.5" y="1829" width="0.2" height="15.0" fill="rgb(217,21,19)" rx="2" ry="2" />
<text  x="230.47" y="1839.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (48 samples, 0.90%)</title><rect x="162.5" y="1829" width="10.6" height="15.0" fill="rgb(240,29,45)" rx="2" ry="2" />
<text  x="165.53" y="1839.5" ></text>
</g>
<g >
<title>std::array&lt;std::array&lt;lczero::Move, 64ul&gt;, 64ul&gt;::at (1 samples, 0.02%)</title><rect x="677.4" y="1829" width="0.2" height="15.0" fill="rgb(226,48,20)" rx="2" ry="2" />
<text  x="680.37" y="1839.5" ></text>
</g>
<g >
<title>CalcPSTScore (62 samples, 1.16%)</title><rect x="321.5" y="1845" width="13.6" height="15.0" fill="rgb(210,13,20)" rx="2" ry="2" />
<text  x="324.45" y="1855.5" ></text>
</g>
<g >
<title>__asan_memcpy (5 samples, 0.09%)</title><rect x="885.6" y="1845" width="1.1" height="15.0" fill="rgb(224,5,30)" rx="2" ry="2" />
<text  x="888.59" y="1855.5" ></text>
</g>
<g >
<title>CalcPSTScore (1 samples, 0.02%)</title><rect x="756.4" y="1749" width="0.2" height="15.0" fill="rgb(239,211,49)" rx="2" ry="2" />
<text  x="759.39" y="1759.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.04%)</title><rect x="195.1" y="1877" width="0.5" height="15.0" fill="rgb(252,35,38)" rx="2" ry="2" />
<text  x="198.11" y="1887.5" ></text>
</g>
<g >
<title>std::array&lt;std::array&lt;lczero::Move, 64ul&gt;, 64ul&gt;::at (1 samples, 0.02%)</title><rect x="277.4" y="1829" width="0.3" height="15.0" fill="rgb(225,99,28)" rx="2" ry="2" />
<text  x="280.43" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_drop_node (1 samples, 0.02%)</title><rect x="592.4" y="1797" width="0.2" height="15.0" fill="rgb(211,6,7)" rx="2" ry="2" />
<text  x="595.41" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (2 samples, 0.04%)</title><rect x="931.6" y="1797" width="0.4" height="15.0" fill="rgb(207,178,38)" rx="2" ry="2" />
<text  x="934.59" y="1807.5" ></text>
</g>
<g >
<title>GetPieceType (12 samples, 0.22%)</title><rect x="270.8" y="1845" width="2.7" height="15.0" fill="rgb(229,67,45)" rx="2" ry="2" />
<text  x="273.83" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (49 samples, 0.91%)</title><rect x="43.9" y="1877" width="10.8" height="15.0" fill="rgb(218,216,22)" rx="2" ry="2" />
<text  x="46.90" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (1 samples, 0.02%)</title><rect x="956.0" y="805" width="0.2" height="15.0" fill="rgb(227,157,14)" rx="2" ry="2" />
<text  x="959.02" y="815.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (3 samples, 0.06%)</title><rect x="759.0" y="1685" width="0.7" height="15.0" fill="rgb(228,178,19)" rx="2" ry="2" />
<text  x="762.03" y="1695.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (1 samples, 0.02%)</title><rect x="848.8" y="1829" width="0.3" height="15.0" fill="rgb(218,20,21)" rx="2" ry="2" />
<text  x="851.83" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (2 samples, 0.04%)</title><rect x="701.1" y="1829" width="0.5" height="15.0" fill="rgb(222,159,35)" rx="2" ry="2" />
<text  x="704.14" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (6 samples, 0.11%)</title><rect x="865.8" y="1813" width="1.3" height="15.0" fill="rgb(234,125,32)" rx="2" ry="2" />
<text  x="868.78" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (1 samples, 0.02%)</title><rect x="755.1" y="1717" width="0.2" height="15.0" fill="rgb(218,80,37)" rx="2" ry="2" />
<text  x="758.07" y="1727.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (4 samples, 0.07%)</title><rect x="196.2" y="1877" width="0.9" height="15.0" fill="rgb(207,7,1)" rx="2" ry="2" />
<text  x="199.21" y="1887.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="586.5" y="1845" width="0.2" height="15.0" fill="rgb(211,196,41)" rx="2" ry="2" />
<text  x="589.46" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (74 samples, 1.38%)</title><rect x="943.9" y="1509" width="16.3" height="15.0" fill="rgb(250,104,25)" rx="2" ry="2" />
<text  x="946.92" y="1519.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (67 samples, 1.25%)</title><rect x="993.2" y="2037" width="14.8" height="15.0" fill="rgb(254,39,30)" rx="2" ry="2" />
<text  x="996.22" y="2047.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="203.5" y="1893" width="0.2" height="15.0" fill="rgb(237,72,13)" rx="2" ry="2" />
<text  x="206.48" y="1903.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.04%)</title><rect x="965.5" y="1989" width="0.4" height="15.0" fill="rgb(229,63,11)" rx="2" ry="2" />
<text  x="968.49" y="1999.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="214.3" y="1861" width="0.4" height="15.0" fill="rgb(223,9,11)" rx="2" ry="2" />
<text  x="217.26" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 1.19%)</title><rect x="943.9" y="1093" width="14.1" height="15.0" fill="rgb(216,214,47)" rx="2" ry="2" />
<text  x="946.92" y="1103.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="174.2" y="1861" width="0.2" height="15.0" fill="rgb(230,146,49)" rx="2" ry="2" />
<text  x="177.20" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="208.8" y="1845" width="0.2" height="15.0" fill="rgb(211,126,51)" rx="2" ry="2" />
<text  x="211.76" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (1,273 samples, 23.75%)</title><rect x="643.3" y="1877" width="280.1" height="15.0" fill="rgb(225,47,49)" rx="2" ry="2" />
<text  x="646.25" y="1887.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="637.1" y="1861" width="0.2" height="15.0" fill="rgb(251,46,19)" rx="2" ry="2" />
<text  x="640.09" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (4 samples, 0.07%)</title><rect x="778.4" y="1781" width="0.9" height="15.0" fill="rgb(232,78,25)" rx="2" ry="2" />
<text  x="781.40" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (1 samples, 0.02%)</title><rect x="641.7" y="1861" width="0.2" height="15.0" fill="rgb(217,220,8)" rx="2" ry="2" />
<text  x="644.71" y="1871.5" ></text>
</g>
<g >
<title>IsCapture (1 samples, 0.02%)</title><rect x="86.4" y="1829" width="0.2" height="15.0" fill="rgb(237,161,36)" rx="2" ry="2" />
<text  x="89.38" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (5 samples, 0.09%)</title><rect x="1026.0" y="2005" width="1.1" height="15.0" fill="rgb(221,117,35)" rx="2" ry="2" />
<text  x="1029.02" y="2015.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="87.3" y="1781" width="0.2" height="15.0" fill="rgb(241,164,4)" rx="2" ry="2" />
<text  x="90.26" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="30.7" y="1845" width="0.2" height="15.0" fill="rgb(218,215,45)" rx="2" ry="2" />
<text  x="33.69" y="1855.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (23 samples, 0.43%)</title><rect x="445.8" y="1845" width="5.1" height="15.0" fill="rgb(205,145,45)" rx="2" ry="2" />
<text  x="448.81" y="1855.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="550.6" y="1845" width="0.2" height="15.0" fill="rgb(210,137,54)" rx="2" ry="2" />
<text  x="553.59" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (1 samples, 0.02%)</title><rect x="382.0" y="1765" width="0.2" height="15.0" fill="rgb(226,103,53)" rx="2" ry="2" />
<text  x="384.98" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="295.3" y="1845" width="0.2" height="15.0" fill="rgb(218,156,53)" rx="2" ry="2" />
<text  x="298.26" y="1855.5" ></text>
</g>
<g >
<title>__pthread_getspecific (1 samples, 0.02%)</title><rect x="185.0" y="1845" width="0.2" height="15.0" fill="rgb(219,29,13)" rx="2" ry="2" />
<text  x="187.99" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (52 samples, 0.97%)</title><rect x="943.9" y="725" width="11.5" height="15.0" fill="rgb(254,154,9)" rx="2" ry="2" />
<text  x="946.92" y="735.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (14 samples, 0.26%)</title><rect x="86.6" y="1829" width="3.1" height="15.0" fill="rgb(213,215,5)" rx="2" ry="2" />
<text  x="89.60" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (3 samples, 0.06%)</title><rect x="195.6" y="1877" width="0.6" height="15.0" fill="rgb(248,145,41)" rx="2" ry="2" />
<text  x="198.55" y="1887.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.06%)</title><rect x="620.6" y="1877" width="0.6" height="15.0" fill="rgb(228,78,38)" rx="2" ry="2" />
<text  x="623.58" y="1887.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="50.7" y="1845" width="0.2" height="15.0" fill="rgb(209,32,33)" rx="2" ry="2" />
<text  x="53.72" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (1 samples, 0.02%)</title><rect x="782.4" y="1781" width="0.2" height="15.0" fill="rgb(212,161,23)" rx="2" ry="2" />
<text  x="785.36" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="21.0" y="1925" width="0.2" height="15.0" fill="rgb(254,43,40)" rx="2" ry="2" />
<text  x="24.01" y="1935.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (1 samples, 0.02%)</title><rect x="616.8" y="1845" width="0.3" height="15.0" fill="rgb(241,150,47)" rx="2" ry="2" />
<text  x="619.84" y="1855.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="961.7" y="1701" width="0.3" height="15.0" fill="rgb(216,38,2)" rx="2" ry="2" />
<text  x="964.75" y="1711.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (47 samples, 0.88%)</title><rect x="304.7" y="1829" width="10.4" height="15.0" fill="rgb(209,21,22)" rx="2" ry="2" />
<text  x="307.72" y="1839.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (1 samples, 0.02%)</title><rect x="88.1" y="1717" width="0.3" height="15.0" fill="rgb(218,209,50)" rx="2" ry="2" />
<text  x="91.14" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (4 samples, 0.07%)</title><rect x="236.1" y="1829" width="0.8" height="15.0" fill="rgb(227,87,15)" rx="2" ry="2" />
<text  x="239.05" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2 samples, 0.04%)</title><rect x="284.7" y="1797" width="0.4" height="15.0" fill="rgb(212,176,38)" rx="2" ry="2" />
<text  x="287.70" y="1807.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="934.2" y="1877" width="0.3" height="15.0" fill="rgb(207,191,15)" rx="2" ry="2" />
<text  x="937.23" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (64 samples, 1.19%)</title><rect x="701.1" y="1845" width="14.1" height="15.0" fill="rgb(223,165,2)" rx="2" ry="2" />
<text  x="704.14" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::rooks (1 samples, 0.02%)</title><rect x="269.1" y="1781" width="0.2" height="15.0" fill="rgb(219,16,26)" rx="2" ry="2" />
<text  x="272.07" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (48 samples, 0.90%)</title><rect x="943.9" y="613" width="10.6" height="15.0" fill="rgb(237,147,42)" rx="2" ry="2" />
<text  x="946.92" y="623.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="194.2" y="1877" width="0.9" height="15.0" fill="rgb(234,157,51)" rx="2" ry="2" />
<text  x="197.23" y="1887.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="696.3" y="1797" width="0.2" height="15.0" fill="rgb(213,146,36)" rx="2" ry="2" />
<text  x="699.30" y="1807.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="931.2" y="1829" width="0.2" height="15.0" fill="rgb(228,95,26)" rx="2" ry="2" />
<text  x="934.15" y="1839.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (50 samples, 0.93%)</title><rect x="431.1" y="1813" width="11.0" height="15.0" fill="rgb(217,24,18)" rx="2" ry="2" />
<text  x="434.07" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (38 samples, 0.71%)</title><rect x="943.9" y="325" width="8.4" height="15.0" fill="rgb(212,102,27)" rx="2" ry="2" />
<text  x="946.92" y="335.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="693.9" y="1797" width="0.2" height="15.0" fill="rgb(210,193,53)" rx="2" ry="2" />
<text  x="696.88" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (21 samples, 0.39%)</title><rect x="862.5" y="1829" width="4.6" height="15.0" fill="rgb(227,149,37)" rx="2" ry="2" />
<text  x="865.48" y="1839.5" ></text>
</g>
<g >
<title>CalcPSTScore (67 samples, 1.25%)</title><rect x="337.5" y="1829" width="14.8" height="15.0" fill="rgb(237,120,1)" rx="2" ry="2" />
<text  x="340.52" y="1839.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="757.3" y="1637" width="0.2" height="15.0" fill="rgb(205,118,22)" rx="2" ry="2" />
<text  x="760.27" y="1647.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (4 samples, 0.07%)</title><rect x="931.2" y="1845" width="0.8" height="15.0" fill="rgb(246,147,5)" rx="2" ry="2" />
<text  x="934.15" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.04%)</title><rect x="630.5" y="1957" width="0.4" height="15.0" fill="rgb(224,123,50)" rx="2" ry="2" />
<text  x="633.48" y="1967.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (2 samples, 0.04%)</title><rect x="611.6" y="1845" width="0.4" height="15.0" fill="rgb(239,71,2)" rx="2" ry="2" />
<text  x="614.56" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (1 samples, 0.02%)</title><rect x="688.6" y="1813" width="0.2" height="15.0" fill="rgb(242,189,11)" rx="2" ry="2" />
<text  x="691.59" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="49.0" y="1813" width="0.2" height="15.0" fill="rgb(231,29,2)" rx="2" ry="2" />
<text  x="51.96" y="1823.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="39.7" y="1829" width="0.2" height="15.0" fill="rgb(253,160,37)" rx="2" ry="2" />
<text  x="42.71" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 1.21%)</title><rect x="943.9" y="1109" width="14.3" height="15.0" fill="rgb(234,89,38)" rx="2" ry="2" />
<text  x="946.92" y="1119.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="233.2" y="1845" width="0.2" height="15.0" fill="rgb(243,15,38)" rx="2" ry="2" />
<text  x="236.19" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (4 samples, 0.07%)</title><rect x="216.0" y="1861" width="0.9" height="15.0" fill="rgb(207,152,24)" rx="2" ry="2" />
<text  x="219.02" y="1871.5" ></text>
</g>
<g >
<title>IsCapture (1 samples, 0.02%)</title><rect x="696.7" y="1781" width="0.3" height="15.0" fill="rgb(233,66,46)" rx="2" ry="2" />
<text  x="699.74" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (3 samples, 0.06%)</title><rect x="930.1" y="1861" width="0.6" height="15.0" fill="rgb(226,13,30)" rx="2" ry="2" />
<text  x="933.05" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="377.8" y="1765" width="0.4" height="15.0" fill="rgb(222,87,30)" rx="2" ry="2" />
<text  x="380.80" y="1775.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.04%)</title><rect x="964.2" y="1877" width="0.4" height="15.0" fill="rgb(220,163,11)" rx="2" ry="2" />
<text  x="967.17" y="1887.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="194.9" y="1845" width="0.2" height="15.0" fill="rgb(245,28,10)" rx="2" ry="2" />
<text  x="197.89" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (16 samples, 0.30%)</title><rect x="605.6" y="1845" width="3.5" height="15.0" fill="rgb(205,128,13)" rx="2" ry="2" />
<text  x="608.61" y="1855.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="697.4" y="1685" width="0.2" height="15.0" fill="rgb(229,57,34)" rx="2" ry="2" />
<text  x="700.40" y="1695.5" ></text>
</g>
<g >
<title>lczero::Position::Position (13 samples, 0.24%)</title><rect x="359.3" y="1813" width="2.9" height="15.0" fill="rgb(235,16,5)" rx="2" ry="2" />
<text  x="362.31" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (71 samples, 1.32%)</title><rect x="943.9" y="1413" width="15.6" height="15.0" fill="rgb(234,49,5)" rx="2" ry="2" />
<text  x="946.92" y="1423.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="191.6" y="1861" width="0.6" height="15.0" fill="rgb(242,100,32)" rx="2" ry="2" />
<text  x="194.59" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (14 samples, 0.26%)</title><rect x="134.8" y="1845" width="3.1" height="15.0" fill="rgb(240,56,35)" rx="2" ry="2" />
<text  x="137.80" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="445.6" y="1829" width="0.2" height="15.0" fill="rgb(214,92,18)" rx="2" ry="2" />
<text  x="448.59" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (111 samples, 2.07%)</title><rect x="295.9" y="1861" width="24.5" height="15.0" fill="rgb(222,180,20)" rx="2" ry="2" />
<text  x="298.92" y="1871.5" >T..</text>
</g>
<g >
<title>lczero::Position::Position (11 samples, 0.21%)</title><rect x="195.1" y="1893" width="2.4" height="15.0" fill="rgb(233,164,52)" rx="2" ry="2" />
<text  x="198.11" y="1903.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="614.2" y="1861" width="0.2" height="15.0" fill="rgb(215,187,31)" rx="2" ry="2" />
<text  x="617.20" y="1871.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (14 samples, 0.26%)</title><rect x="62.2" y="1845" width="3.0" height="15.0" fill="rgb(241,98,52)" rx="2" ry="2" />
<text  x="65.17" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (89 samples, 1.66%)</title><rect x="943.9" y="1813" width="19.6" height="15.0" fill="rgb(248,150,46)" rx="2" ry="2" />
<text  x="946.92" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="741.0" y="1781" width="0.2" height="15.0" fill="rgb(214,24,46)" rx="2" ry="2" />
<text  x="743.98" y="1791.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="28.9" y="1861" width="0.5" height="15.0" fill="rgb(238,91,17)" rx="2" ry="2" />
<text  x="31.93" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (3 samples, 0.06%)</title><rect x="790.1" y="1813" width="0.6" height="15.0" fill="rgb(222,160,52)" rx="2" ry="2" />
<text  x="793.06" y="1823.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="32.5" y="1733" width="0.2" height="15.0" fill="rgb(235,101,19)" rx="2" ry="2" />
<text  x="35.45" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="132.8" y="1797" width="0.2" height="15.0" fill="rgb(215,83,36)" rx="2" ry="2" />
<text  x="135.82" y="1807.5" ></text>
</g>
<g >
<title>CalcPSTScore (24 samples, 0.45%)</title><rect x="296.4" y="1845" width="5.2" height="15.0" fill="rgb(205,12,7)" rx="2" ry="2" />
<text  x="299.36" y="1855.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="695.4" y="1765" width="0.2" height="15.0" fill="rgb(246,27,36)" rx="2" ry="2" />
<text  x="698.42" y="1775.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="394.1" y="1781" width="0.2" height="15.0" fill="rgb(205,54,32)" rx="2" ry="2" />
<text  x="397.09" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (1 samples, 0.02%)</title><rect x="800.0" y="1797" width="0.2" height="15.0" fill="rgb(236,160,23)" rx="2" ry="2" />
<text  x="802.97" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (63 samples, 1.18%)</title><rect x="753.7" y="1797" width="13.9" height="15.0" fill="rgb(246,197,6)" rx="2" ry="2" />
<text  x="756.75" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (68 samples, 1.27%)</title><rect x="943.9" y="1285" width="15.0" height="15.0" fill="rgb(216,210,9)" rx="2" ry="2" />
<text  x="946.92" y="1295.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.06%)</title><rect x="642.6" y="1845" width="0.7" height="15.0" fill="rgb(234,119,22)" rx="2" ry="2" />
<text  x="645.59" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::operator== (2 samples, 0.04%)</title><rect x="495.8" y="1797" width="0.4" height="15.0" fill="rgb(245,183,9)" rx="2" ry="2" />
<text  x="498.78" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="750.0" y="1765" width="0.2" height="15.0" fill="rgb(205,98,5)" rx="2" ry="2" />
<text  x="753.00" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (1 samples, 0.02%)</title><rect x="735.7" y="1797" width="0.2" height="15.0" fill="rgb(212,132,35)" rx="2" ry="2" />
<text  x="738.70" y="1807.5" ></text>
</g>
<g >
<title>alpha_beta_invoker (4 samples, 0.07%)</title><rect x="20.3" y="2021" width="0.9" height="15.0" fill="rgb(215,228,20)" rx="2" ry="2" />
<text  x="23.35" y="2031.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.04%)</title><rect x="441.6" y="1781" width="0.5" height="15.0" fill="rgb(243,173,54)" rx="2" ry="2" />
<text  x="444.63" y="1791.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (12 samples, 0.22%)</title><rect x="977.2" y="2037" width="2.6" height="15.0" fill="rgb(217,169,54)" rx="2" ry="2" />
<text  x="980.16" y="2047.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (3 samples, 0.06%)</title><rect x="49.6" y="1829" width="0.7" height="15.0" fill="rgb(249,64,46)" rx="2" ry="2" />
<text  x="52.62" y="1839.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (5 samples, 0.09%)</title><rect x="859.8" y="1829" width="1.1" height="15.0" fill="rgb(226,189,19)" rx="2" ry="2" />
<text  x="862.84" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (1 samples, 0.02%)</title><rect x="499.7" y="1861" width="0.3" height="15.0" fill="rgb(215,196,31)" rx="2" ry="2" />
<text  x="502.74" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (1 samples, 0.02%)</title><rect x="955.6" y="725" width="0.2" height="15.0" fill="rgb(211,148,21)" rx="2" ry="2" />
<text  x="958.58" y="735.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="799.7" y="1797" width="0.3" height="15.0" fill="rgb(205,148,32)" rx="2" ry="2" />
<text  x="802.75" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (19 samples, 0.35%)</title><rect x="637.3" y="1877" width="4.2" height="15.0" fill="rgb(229,100,34)" rx="2" ry="2" />
<text  x="640.31" y="1887.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.06%)</title><rect x="642.6" y="1813" width="0.7" height="15.0" fill="rgb(225,160,36)" rx="2" ry="2" />
<text  x="645.59" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="234.7" y="1797" width="0.3" height="15.0" fill="rgb(232,101,38)" rx="2" ry="2" />
<text  x="237.73" y="1807.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="376.3" y="1781" width="0.2" height="15.0" fill="rgb(250,26,34)" rx="2" ry="2" />
<text  x="379.26" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (36 samples, 0.67%)</title><rect x="943.9" y="277" width="7.9" height="15.0" fill="rgb(219,131,17)" rx="2" ry="2" />
<text  x="946.92" y="287.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (1 samples, 0.02%)</title><rect x="764.8" y="1733" width="0.2" height="15.0" fill="rgb(223,75,38)" rx="2" ry="2" />
<text  x="767.75" y="1743.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (5 samples, 0.09%)</title><rect x="266.0" y="1813" width="1.1" height="15.0" fill="rgb(229,25,45)" rx="2" ry="2" />
<text  x="268.99" y="1823.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (11 samples, 0.21%)</title><rect x="565.6" y="1813" width="2.4" height="15.0" fill="rgb(247,93,41)" rx="2" ry="2" />
<text  x="568.55" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (1 samples, 0.02%)</title><rect x="21.7" y="1925" width="0.2" height="15.0" fill="rgb(208,128,20)" rx="2" ry="2" />
<text  x="24.67" y="1935.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (4 samples, 0.07%)</title><rect x="760.1" y="1701" width="0.9" height="15.0" fill="rgb(231,123,52)" rx="2" ry="2" />
<text  x="763.13" y="1711.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="933.6" y="1829" width="0.2" height="15.0" fill="rgb(241,29,53)" rx="2" ry="2" />
<text  x="936.57" y="1839.5" ></text>
</g>
<g >
<title>IsCapture (6 samples, 0.11%)</title><rect x="737.7" y="1829" width="1.3" height="15.0" fill="rgb(246,228,13)" rx="2" ry="2" />
<text  x="740.68" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (2 samples, 0.04%)</title><rect x="366.1" y="1797" width="0.5" height="15.0" fill="rgb(244,38,22)" rx="2" ry="2" />
<text  x="369.14" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (4 samples, 0.07%)</title><rect x="88.6" y="1797" width="0.9" height="15.0" fill="rgb(252,49,53)" rx="2" ry="2" />
<text  x="91.58" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (66 samples, 1.23%)</title><rect x="790.7" y="1813" width="14.6" height="15.0" fill="rgb(230,1,39)" rx="2" ry="2" />
<text  x="793.72" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (2 samples, 0.04%)</title><rect x="45.2" y="1845" width="0.5" height="15.0" fill="rgb(218,190,33)" rx="2" ry="2" />
<text  x="48.22" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (15 samples, 0.28%)</title><rect x="198.4" y="1861" width="3.3" height="15.0" fill="rgb(212,225,41)" rx="2" ry="2" />
<text  x="201.41" y="1871.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (1 samples, 0.02%)</title><rect x="923.0" y="1733" width="0.2" height="15.0" fill="rgb(232,151,26)" rx="2" ry="2" />
<text  x="926.01" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="533.0" y="1813" width="0.2" height="15.0" fill="rgb(232,83,10)" rx="2" ry="2" />
<text  x="535.98" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="365.0" y="1765" width="0.3" height="15.0" fill="rgb(225,31,13)" rx="2" ry="2" />
<text  x="368.03" y="1775.5" ></text>
</g>
<g >
<title>TTranspositionTable::Insert (7 samples, 0.13%)</title><rect x="849.5" y="1861" width="1.5" height="15.0" fill="rgb(224,31,37)" rx="2" ry="2" />
<text  x="852.49" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (35 samples, 0.65%)</title><rect x="400.0" y="1765" width="7.7" height="15.0" fill="rgb(240,42,48)" rx="2" ry="2" />
<text  x="403.03" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (4 samples, 0.07%)</title><rect x="250.4" y="1829" width="0.8" height="15.0" fill="rgb(219,13,24)" rx="2" ry="2" />
<text  x="253.36" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="90.3" y="1781" width="0.3" height="15.0" fill="rgb(216,122,34)" rx="2" ry="2" />
<text  x="93.34" y="1791.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.09%)</title><rect x="221.7" y="1861" width="1.1" height="15.0" fill="rgb(227,10,27)" rx="2" ry="2" />
<text  x="224.74" y="1871.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="226.8" y="1797" width="0.2" height="15.0" fill="rgb(251,25,28)" rx="2" ry="2" />
<text  x="229.81" y="1807.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="49.6" y="1797" width="0.2" height="15.0" fill="rgb(245,59,16)" rx="2" ry="2" />
<text  x="52.62" y="1807.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="565.3" y="1813" width="0.3" height="15.0" fill="rgb(220,84,2)" rx="2" ry="2" />
<text  x="568.33" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (3 samples, 0.06%)</title><rect x="931.4" y="1829" width="0.6" height="15.0" fill="rgb(224,165,29)" rx="2" ry="2" />
<text  x="934.37" y="1839.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="754.8" y="1749" width="0.5" height="15.0" fill="rgb(235,172,35)" rx="2" ry="2" />
<text  x="757.85" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="630.5" y="1973" width="0.4" height="15.0" fill="rgb(232,201,27)" rx="2" ry="2" />
<text  x="633.48" y="1983.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="755.1" y="1733" width="0.2" height="15.0" fill="rgb(236,107,12)" rx="2" ry="2" />
<text  x="758.07" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (41 samples, 0.76%)</title><rect x="943.9" y="389" width="9.0" height="15.0" fill="rgb(209,200,51)" rx="2" ry="2" />
<text  x="946.92" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (3 samples, 0.06%)</title><rect x="88.8" y="1781" width="0.7" height="15.0" fill="rgb(232,21,38)" rx="2" ry="2" />
<text  x="91.80" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="788.1" y="1781" width="0.2" height="15.0" fill="rgb(223,141,16)" rx="2" ry="2" />
<text  x="791.08" y="1791.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (4 samples, 0.07%)</title><rect x="468.7" y="1797" width="0.9" height="15.0" fill="rgb(215,111,25)" rx="2" ry="2" />
<text  x="471.71" y="1807.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (2 samples, 0.04%)</title><rect x="205.7" y="1909" width="0.4" height="15.0" fill="rgb(219,125,49)" rx="2" ry="2" />
<text  x="208.68" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (71 samples, 1.32%)</title><rect x="943.9" y="1365" width="15.6" height="15.0" fill="rgb(213,96,24)" rx="2" ry="2" />
<text  x="946.92" y="1375.5" ></text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (2 samples, 0.04%)</title><rect x="495.8" y="1813" width="0.4" height="15.0" fill="rgb(231,223,44)" rx="2" ry="2" />
<text  x="498.78" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (4 samples, 0.07%)</title><rect x="364.4" y="1797" width="0.9" height="15.0" fill="rgb(252,4,10)" rx="2" ry="2" />
<text  x="367.37" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.04%)</title><rect x="764.1" y="1685" width="0.4" height="15.0" fill="rgb(215,192,5)" rx="2" ry="2" />
<text  x="767.09" y="1695.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (2 samples, 0.04%)</title><rect x="451.5" y="1845" width="0.5" height="15.0" fill="rgb(238,18,44)" rx="2" ry="2" />
<text  x="454.54" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (3 samples, 0.06%)</title><rect x="217.3" y="1829" width="0.7" height="15.0" fill="rgb(225,61,54)" rx="2" ry="2" />
<text  x="220.34" y="1839.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (1 samples, 0.02%)</title><rect x="430.4" y="1781" width="0.2" height="15.0" fill="rgb(218,17,2)" rx="2" ry="2" />
<text  x="433.41" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (132 samples, 2.46%)</title><rect x="851.3" y="1861" width="29.0" height="15.0" fill="rgb(219,187,29)" rx="2" ry="2" />
<text  x="854.25" y="1871.5" >lc..</text>
</g>
<g >
<title>[unknown] (47 samples, 0.88%)</title><rect x="943.9" y="533" width="10.4" height="15.0" fill="rgb(218,226,35)" rx="2" ry="2" />
<text  x="946.92" y="543.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="39.5" y="1829" width="0.2" height="15.0" fill="rgb(224,185,5)" rx="2" ry="2" />
<text  x="42.49" y="1839.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="225.0" y="1877" width="0.3" height="15.0" fill="rgb(211,6,53)" rx="2" ry="2" />
<text  x="228.05" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (28 samples, 0.52%)</title><rect x="943.9" y="69" width="6.2" height="15.0" fill="rgb(211,51,6)" rx="2" ry="2" />
<text  x="946.92" y="79.5" ></text>
</g>
<g >
<title>GetPieceValue (1 samples, 0.02%)</title><rect x="760.3" y="1605" width="0.3" height="15.0" fill="rgb(245,228,21)" rx="2" ry="2" />
<text  x="763.35" y="1615.5" ></text>
</g>
<g >
<title>memcpy (1 samples, 0.02%)</title><rect x="895.9" y="1845" width="0.3" height="15.0" fill="rgb(238,168,0)" rx="2" ry="2" />
<text  x="898.94" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (1 samples, 0.02%)</title><rect x="500.0" y="1845" width="0.2" height="15.0" fill="rgb(239,146,51)" rx="2" ry="2" />
<text  x="502.96" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (1 samples, 0.02%)</title><rect x="203.0" y="1893" width="0.3" height="15.0" fill="rgb(237,62,34)" rx="2" ry="2" />
<text  x="206.03" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="641.9" y="1813" width="0.3" height="15.0" fill="rgb(241,117,11)" rx="2" ry="2" />
<text  x="644.93" y="1823.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (18 samples, 0.34%)</title><rect x="75.2" y="1829" width="3.9" height="15.0" fill="rgb(251,206,33)" rx="2" ry="2" />
<text  x="78.15" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="220.2" y="1829" width="0.2" height="15.0" fill="rgb(225,17,22)" rx="2" ry="2" />
<text  x="223.20" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="208.3" y="1813" width="0.2" height="15.0" fill="rgb(252,2,38)" rx="2" ry="2" />
<text  x="211.32" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (10 samples, 0.19%)</title><rect x="670.3" y="1829" width="2.2" height="15.0" fill="rgb(243,58,20)" rx="2" ry="2" />
<text  x="673.32" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (4 samples, 0.07%)</title><rect x="87.7" y="1797" width="0.9" height="15.0" fill="rgb(207,35,16)" rx="2" ry="2" />
<text  x="90.70" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (1 samples, 0.02%)</title><rect x="358.2" y="1781" width="0.2" height="15.0" fill="rgb(215,47,42)" rx="2" ry="2" />
<text  x="361.21" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="46.1" y="1813" width="0.2" height="15.0" fill="rgb(229,40,54)" rx="2" ry="2" />
<text  x="49.10" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.04%)</title><rect x="490.9" y="1829" width="0.5" height="15.0" fill="rgb(211,40,5)" rx="2" ry="2" />
<text  x="493.94" y="1839.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="376.9" y="1765" width="0.2" height="15.0" fill="rgb(252,150,44)" rx="2" ry="2" />
<text  x="379.92" y="1775.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2 samples, 0.04%)</title><rect x="204.1" y="1861" width="0.5" height="15.0" fill="rgb(247,102,39)" rx="2" ry="2" />
<text  x="207.14" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="89.5" y="1781" width="0.2" height="15.0" fill="rgb(248,24,10)" rx="2" ry="2" />
<text  x="92.46" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (13 samples, 0.24%)</title><rect x="678.7" y="1813" width="2.9" height="15.0" fill="rgb(222,63,15)" rx="2" ry="2" />
<text  x="681.69" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (3 samples, 0.06%)</title><rect x="740.3" y="1781" width="0.7" height="15.0" fill="rgb(221,2,17)" rx="2" ry="2" />
<text  x="743.32" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (1 samples, 0.02%)</title><rect x="24.1" y="1845" width="0.2" height="15.0" fill="rgb(228,136,20)" rx="2" ry="2" />
<text  x="27.09" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (1 samples, 0.02%)</title><rect x="590.4" y="1813" width="0.2" height="15.0" fill="rgb(250,92,52)" rx="2" ry="2" />
<text  x="593.43" y="1823.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="49.0" y="1797" width="0.2" height="15.0" fill="rgb(231,54,0)" rx="2" ry="2" />
<text  x="51.96" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="595.3" y="1861" width="0.2" height="15.0" fill="rgb(231,186,24)" rx="2" ry="2" />
<text  x="598.27" y="1871.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (5 samples, 0.09%)</title><rect x="22.8" y="1893" width="1.1" height="15.0" fill="rgb(229,72,11)" rx="2" ry="2" />
<text  x="25.77" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (94 samples, 1.75%)</title><rect x="943.9" y="1893" width="20.7" height="15.0" fill="rgb(239,110,13)" rx="2" ry="2" />
<text  x="946.92" y="1903.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="757.0" y="1717" width="0.3" height="15.0" fill="rgb(230,226,24)" rx="2" ry="2" />
<text  x="760.05" y="1727.5" ></text>
</g>
<g >
<title>CalcPSTScore (4 samples, 0.07%)</title><rect x="751.1" y="1797" width="0.9" height="15.0" fill="rgb(249,73,40)" rx="2" ry="2" />
<text  x="754.10" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (31 samples, 0.58%)</title><rect x="943.9" y="181" width="6.8" height="15.0" fill="rgb(250,0,13)" rx="2" ry="2" />
<text  x="946.92" y="191.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="235.8" y="1813" width="0.3" height="15.0" fill="rgb(228,96,0)" rx="2" ry="2" />
<text  x="238.83" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="879.9" y="1813" width="0.2" height="15.0" fill="rgb(216,145,21)" rx="2" ry="2" />
<text  x="882.87" y="1823.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (2 samples, 0.04%)</title><rect x="206.3" y="1893" width="0.5" height="15.0" fill="rgb(216,83,24)" rx="2" ry="2" />
<text  x="209.34" y="1903.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (15 samples, 0.28%)</title><rect x="817.4" y="1829" width="3.3" height="15.0" fill="rgb(249,223,2)" rx="2" ry="2" />
<text  x="820.36" y="1839.5" ></text>
</g>
<g >
<title>std::array&lt;lczero::Move, 64ul&gt;::at (2 samples, 0.04%)</title><rect x="676.9" y="1829" width="0.5" height="15.0" fill="rgb(227,202,22)" rx="2" ry="2" />
<text  x="679.93" y="1839.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (4 samples, 0.07%)</title><rect x="255.9" y="1845" width="0.8" height="15.0" fill="rgb(233,84,51)" rx="2" ry="2" />
<text  x="258.86" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="768.9" y="1765" width="0.3" height="15.0" fill="rgb(248,224,26)" rx="2" ry="2" />
<text  x="771.93" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::StackTrace::GetCurrentPc (1 samples, 0.02%)</title><rect x="922.6" y="1781" width="0.2" height="15.0" fill="rgb(211,196,27)" rx="2" ry="2" />
<text  x="925.57" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="628.3" y="1845" width="0.2" height="15.0" fill="rgb(254,225,8)" rx="2" ry="2" />
<text  x="631.28" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="90.8" y="1781" width="0.2" height="15.0" fill="rgb(250,136,5)" rx="2" ry="2" />
<text  x="93.78" y="1791.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="632.9" y="1845" width="0.2" height="15.0" fill="rgb(229,110,47)" rx="2" ry="2" />
<text  x="635.91" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="38.8" y="1829" width="0.3" height="15.0" fill="rgb(229,21,15)" rx="2" ry="2" />
<text  x="41.83" y="1839.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="236.9" y="1813" width="0.3" height="15.0" fill="rgb(244,209,38)" rx="2" ry="2" />
<text  x="239.93" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (2 samples, 0.04%)</title><rect x="750.2" y="1781" width="0.5" height="15.0" fill="rgb(247,190,53)" rx="2" ry="2" />
<text  x="753.22" y="1791.5" ></text>
</g>
<g >
<title>__asan::Allocator::GetAsanChunkByAddrFastLocked (41 samples, 0.76%)</title><rect x="968.1" y="2037" width="9.1" height="15.0" fill="rgb(251,156,12)" rx="2" ry="2" />
<text  x="971.13" y="2047.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (14 samples, 0.26%)</title><rect x="739.0" y="1829" width="3.1" height="15.0" fill="rgb(247,101,26)" rx="2" ry="2" />
<text  x="742.00" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="214.3" y="1829" width="0.2" height="15.0" fill="rgb(223,191,7)" rx="2" ry="2" />
<text  x="217.26" y="1839.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (15 samples, 0.28%)</title><rect x="904.3" y="1813" width="3.3" height="15.0" fill="rgb(218,106,16)" rx="2" ry="2" />
<text  x="907.30" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (1 samples, 0.02%)</title><rect x="270.4" y="1813" width="0.2" height="15.0" fill="rgb(213,99,18)" rx="2" ry="2" />
<text  x="273.39" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="32.5" y="1765" width="0.2" height="15.0" fill="rgb(252,155,42)" rx="2" ry="2" />
<text  x="35.45" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (3 samples, 0.06%)</title><rect x="479.1" y="1797" width="0.6" height="15.0" fill="rgb(219,102,1)" rx="2" ry="2" />
<text  x="482.05" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.04%)</title><rect x="206.8" y="1893" width="0.4" height="15.0" fill="rgb(230,46,46)" rx="2" ry="2" />
<text  x="209.78" y="1903.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="399.4" y="1765" width="0.2" height="15.0" fill="rgb(239,14,48)" rx="2" ry="2" />
<text  x="402.37" y="1775.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="228.6" y="1845" width="0.2" height="15.0" fill="rgb(250,77,15)" rx="2" ry="2" />
<text  x="231.57" y="1855.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (45 samples, 0.84%)</title><rect x="555.4" y="1813" width="9.9" height="15.0" fill="rgb(248,166,22)" rx="2" ry="2" />
<text  x="558.43" y="1823.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="85.5" y="1813" width="0.2" height="15.0" fill="rgb(244,134,25)" rx="2" ry="2" />
<text  x="88.50" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="752.2" y="1765" width="0.2" height="15.0" fill="rgb(219,134,21)" rx="2" ry="2" />
<text  x="755.20" y="1775.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="32.7" y="1797" width="0.2" height="15.0" fill="rgb(243,133,43)" rx="2" ry="2" />
<text  x="35.67" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (26 samples, 0.48%)</title><rect x="424.5" y="1797" width="5.7" height="15.0" fill="rgb(254,86,52)" rx="2" ry="2" />
<text  x="427.46" y="1807.5" ></text>
</g>
<g >
<title>GetPieceValue (1 samples, 0.02%)</title><rect x="86.2" y="1813" width="0.2" height="15.0" fill="rgb(224,166,5)" rx="2" ry="2" />
<text  x="89.16" y="1823.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (5 samples, 0.09%)</title><rect x="38.8" y="1861" width="1.1" height="15.0" fill="rgb(215,3,44)" rx="2" ry="2" />
<text  x="41.83" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (1,400 samples, 26.11%)</title><rect x="630.9" y="1925" width="308.2" height="15.0" fill="rgb(238,104,48)" rx="2" ry="2" />
<text  x="633.93" y="1935.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="301.9" y="1845" width="0.2" height="15.0" fill="rgb(205,120,33)" rx="2" ry="2" />
<text  x="304.86" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="770.0" y="1797" width="0.3" height="15.0" fill="rgb(243,139,24)" rx="2" ry="2" />
<text  x="773.03" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.04%)</title><rect x="375.8" y="1765" width="0.5" height="15.0" fill="rgb(238,99,44)" rx="2" ry="2" />
<text  x="378.82" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (26 samples, 0.48%)</title><rect x="279.9" y="1829" width="5.7" height="15.0" fill="rgb(224,72,11)" rx="2" ry="2" />
<text  x="282.85" y="1839.5" ></text>
</g>
<g >
<title>CalcPSTScore (37 samples, 0.69%)</title><rect x="648.1" y="1861" width="8.1" height="15.0" fill="rgb(221,187,15)" rx="2" ry="2" />
<text  x="651.09" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (4 samples, 0.07%)</title><rect x="20.3" y="1941" width="0.9" height="15.0" fill="rgb(224,6,54)" rx="2" ry="2" />
<text  x="23.35" y="1951.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="133.9" y="1845" width="0.2" height="15.0" fill="rgb(205,192,28)" rx="2" ry="2" />
<text  x="136.92" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="763.0" y="1669" width="0.2" height="15.0" fill="rgb(251,27,29)" rx="2" ry="2" />
<text  x="765.99" y="1679.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="633.8" y="1877" width="0.2" height="15.0" fill="rgb(237,3,6)" rx="2" ry="2" />
<text  x="636.79" y="1887.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="700.7" y="1797" width="0.4" height="15.0" fill="rgb(251,189,11)" rx="2" ry="2" />
<text  x="703.70" y="1807.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="92.8" y="1829" width="0.2" height="15.0" fill="rgb(209,31,31)" rx="2" ry="2" />
<text  x="95.76" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (8 samples, 0.15%)</title><rect x="443.0" y="1829" width="1.7" height="15.0" fill="rgb(253,103,38)" rx="2" ry="2" />
<text  x="445.95" y="1839.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (1 samples, 0.02%)</title><rect x="850.2" y="1813" width="0.2" height="15.0" fill="rgb(224,189,7)" rx="2" ry="2" />
<text  x="853.15" y="1823.5" ></text>
</g>
<g >
<title>GetPieceValue (2 samples, 0.04%)</title><rect x="354.9" y="1797" width="0.4" height="15.0" fill="rgb(211,85,8)" rx="2" ry="2" />
<text  x="357.91" y="1807.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="50.1" y="1797" width="0.2" height="15.0" fill="rgb(250,109,39)" rx="2" ry="2" />
<text  x="53.06" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="203.0" y="1909" width="0.5" height="15.0" fill="rgb(213,166,3)" rx="2" ry="2" />
<text  x="206.03" y="1919.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (19 samples, 0.35%)</title><rect x="197.5" y="1877" width="4.2" height="15.0" fill="rgb(206,122,38)" rx="2" ry="2" />
<text  x="200.53" y="1887.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="49.4" y="1813" width="0.2" height="15.0" fill="rgb(241,89,19)" rx="2" ry="2" />
<text  x="52.40" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="82.6" y="1781" width="0.3" height="15.0" fill="rgb(228,97,34)" rx="2" ry="2" />
<text  x="85.64" y="1791.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="233.9" y="1829" width="0.2" height="15.0" fill="rgb(228,146,31)" rx="2" ry="2" />
<text  x="236.85" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="532.8" y="1781" width="0.2" height="15.0" fill="rgb(210,194,0)" rx="2" ry="2" />
<text  x="535.76" y="1791.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (4 samples, 0.07%)</title><rect x="152.9" y="1813" width="0.8" height="15.0" fill="rgb(207,178,19)" rx="2" ry="2" />
<text  x="155.85" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="697.6" y="1733" width="0.2" height="15.0" fill="rgb(209,85,40)" rx="2" ry="2" />
<text  x="700.62" y="1743.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (5 samples, 0.09%)</title><rect x="1026.0" y="2037" width="1.1" height="15.0" fill="rgb(224,25,26)" rx="2" ry="2" />
<text  x="1029.02" y="2047.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (45 samples, 0.84%)</title><rect x="806.4" y="1797" width="9.9" height="15.0" fill="rgb(220,58,20)" rx="2" ry="2" />
<text  x="809.35" y="1807.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (3 samples, 0.06%)</title><rect x="139.9" y="1861" width="0.6" height="15.0" fill="rgb(208,71,18)" rx="2" ry="2" />
<text  x="142.86" y="1871.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (1 samples, 0.02%)</title><rect x="821.3" y="1845" width="0.2" height="15.0" fill="rgb(213,136,44)" rx="2" ry="2" />
<text  x="824.32" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="761.7" y="1717" width="0.8" height="15.0" fill="rgb(246,88,21)" rx="2" ry="2" />
<text  x="764.67" y="1727.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (1 samples, 0.02%)</title><rect x="208.3" y="1845" width="0.2" height="15.0" fill="rgb(239,189,25)" rx="2" ry="2" />
<text  x="211.32" y="1855.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (1 samples, 0.02%)</title><rect x="117.6" y="1797" width="0.3" height="15.0" fill="rgb(239,124,51)" rx="2" ry="2" />
<text  x="120.63" y="1807.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="762.1" y="1701" width="0.4" height="15.0" fill="rgb(239,107,47)" rx="2" ry="2" />
<text  x="765.11" y="1711.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (39 samples, 0.73%)</title><rect x="755.9" y="1765" width="8.6" height="15.0" fill="rgb(220,71,15)" rx="2" ry="2" />
<text  x="758.95" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (15 samples, 0.28%)</title><rect x="678.2" y="1829" width="3.4" height="15.0" fill="rgb(230,111,14)" rx="2" ry="2" />
<text  x="681.25" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (5 samples, 0.09%)</title><rect x="697.0" y="1781" width="1.1" height="15.0" fill="rgb(245,195,53)" rx="2" ry="2" />
<text  x="699.96" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (3 samples, 0.06%)</title><rect x="316.2" y="1797" width="0.6" height="15.0" fill="rgb(222,43,37)" rx="2" ry="2" />
<text  x="319.17" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="220.2" y="1845" width="0.2" height="15.0" fill="rgb(224,100,43)" rx="2" ry="2" />
<text  x="223.20" y="1855.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="520.9" y="1813" width="0.2" height="15.0" fill="rgb(246,32,50)" rx="2" ry="2" />
<text  x="523.87" y="1823.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::insert_or_assign&lt;TTranspositionTable::TNode&gt; (6 samples, 0.11%)</title><rect x="923.4" y="1861" width="1.4" height="15.0" fill="rgb(245,191,50)" rx="2" ry="2" />
<text  x="926.45" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="421.8" y="1797" width="0.2" height="15.0" fill="rgb(225,115,23)" rx="2" ry="2" />
<text  x="424.82" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (4 samples, 0.07%)</title><rect x="20.3" y="1957" width="0.9" height="15.0" fill="rgb(240,0,4)" rx="2" ry="2" />
<text  x="23.35" y="1967.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.06%)</title><rect x="204.6" y="1925" width="0.6" height="15.0" fill="rgb(240,199,45)" rx="2" ry="2" />
<text  x="207.58" y="1935.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (3 samples, 0.06%)</title><rect x="179.7" y="1813" width="0.7" height="15.0" fill="rgb(218,182,5)" rx="2" ry="2" />
<text  x="182.70" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (76 samples, 1.42%)</title><rect x="943.9" y="1557" width="16.7" height="15.0" fill="rgb(249,68,18)" rx="2" ry="2" />
<text  x="946.92" y="1567.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="86.8" y="1797" width="0.2" height="15.0" fill="rgb(222,190,51)" rx="2" ry="2" />
<text  x="89.82" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (1 samples, 0.02%)</title><rect x="201.5" y="1845" width="0.2" height="15.0" fill="rgb(214,43,35)" rx="2" ry="2" />
<text  x="204.49" y="1855.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="750.0" y="1749" width="0.2" height="15.0" fill="rgb(238,97,6)" rx="2" ry="2" />
<text  x="753.00" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (1 samples, 0.02%)</title><rect x="692.8" y="1797" width="0.2" height="15.0" fill="rgb(249,78,48)" rx="2" ry="2" />
<text  x="695.78" y="1807.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.04%)</title><rect x="354.0" y="1765" width="0.5" height="15.0" fill="rgb(233,141,1)" rx="2" ry="2" />
<text  x="357.03" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.04%)</title><rect x="761.2" y="1637" width="0.5" height="15.0" fill="rgb(224,201,10)" rx="2" ry="2" />
<text  x="764.23" y="1647.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::kings (1 samples, 0.02%)</title><rect x="633.8" y="1861" width="0.2" height="15.0" fill="rgb(219,132,4)" rx="2" ry="2" />
<text  x="636.79" y="1871.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="733.7" y="1765" width="0.2" height="15.0" fill="rgb(226,133,4)" rx="2" ry="2" />
<text  x="736.72" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (1 samples, 0.02%)</title><rect x="229.2" y="1845" width="0.2" height="15.0" fill="rgb(220,206,41)" rx="2" ry="2" />
<text  x="232.23" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (2 samples, 0.04%)</title><rect x="628.1" y="1877" width="0.4" height="15.0" fill="rgb(223,93,51)" rx="2" ry="2" />
<text  x="631.06" y="1887.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="760.6" y="1669" width="0.2" height="15.0" fill="rgb(251,136,28)" rx="2" ry="2" />
<text  x="763.57" y="1679.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="139.2" y="1861" width="0.2" height="15.0" fill="rgb(213,15,7)" rx="2" ry="2" />
<text  x="142.20" y="1871.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="379.8" y="1749" width="0.2" height="15.0" fill="rgb(224,33,45)" rx="2" ry="2" />
<text  x="382.78" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (42 samples, 0.78%)</title><rect x="943.9" y="405" width="9.3" height="15.0" fill="rgb(214,142,11)" rx="2" ry="2" />
<text  x="946.92" y="415.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="962.6" y="1749" width="0.2" height="15.0" fill="rgb(248,121,30)" rx="2" ry="2" />
<text  x="965.63" y="1759.5" ></text>
</g>
<g >
<title>CalcPSTScore (2 samples, 0.04%)</title><rect x="636.9" y="1877" width="0.4" height="15.0" fill="rgb(211,21,25)" rx="2" ry="2" />
<text  x="639.87" y="1887.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="32.2" y="1813" width="0.3" height="15.0" fill="rgb(221,135,44)" rx="2" ry="2" />
<text  x="35.23" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="385.3" y="1781" width="0.2" height="15.0" fill="rgb(229,99,11)" rx="2" ry="2" />
<text  x="388.28" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="759.5" y="1653" width="0.2" height="15.0" fill="rgb(220,94,23)" rx="2" ry="2" />
<text  x="762.47" y="1663.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="664.2" y="1797" width="0.2" height="15.0" fill="rgb(212,119,22)" rx="2" ry="2" />
<text  x="667.16" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (47 samples, 0.88%)</title><rect x="943.9" y="581" width="10.4" height="15.0" fill="rgb(217,74,7)" rx="2" ry="2" />
<text  x="946.92" y="591.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.04%)</title><rect x="621.2" y="1877" width="0.5" height="15.0" fill="rgb(252,26,45)" rx="2" ry="2" />
<text  x="624.24" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="133.5" y="1845" width="0.2" height="15.0" fill="rgb(231,212,23)" rx="2" ry="2" />
<text  x="136.48" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (6 samples, 0.11%)</title><rect x="599.4" y="1813" width="1.4" height="15.0" fill="rgb(245,103,22)" rx="2" ry="2" />
<text  x="602.45" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (47 samples, 0.88%)</title><rect x="943.9" y="549" width="10.4" height="15.0" fill="rgb(224,226,17)" rx="2" ry="2" />
<text  x="946.92" y="559.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::operator== (1 samples, 0.02%)</title><rect x="23.0" y="1829" width="0.2" height="15.0" fill="rgb(232,176,53)" rx="2" ry="2" />
<text  x="25.99" y="1839.5" ></text>
</g>
<g >
<title>CalcPSTScore (2 samples, 0.04%)</title><rect x="206.3" y="1909" width="0.5" height="15.0" fill="rgb(221,9,46)" rx="2" ry="2" />
<text  x="209.34" y="1919.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="205.7" y="1893" width="0.4" height="15.0" fill="rgb(224,108,35)" rx="2" ry="2" />
<text  x="208.68" y="1903.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="88.6" y="1813" width="0.9" height="15.0" fill="rgb(230,27,40)" rx="2" ry="2" />
<text  x="91.58" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="133.0" y="1829" width="0.3" height="15.0" fill="rgb(221,7,52)" rx="2" ry="2" />
<text  x="136.04" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (1 samples, 0.02%)</title><rect x="140.5" y="1861" width="0.2" height="15.0" fill="rgb(244,103,46)" rx="2" ry="2" />
<text  x="143.52" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="220.2" y="1813" width="0.2" height="15.0" fill="rgb(235,64,16)" rx="2" ry="2" />
<text  x="223.20" y="1823.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="965.3" y="1989" width="0.2" height="15.0" fill="rgb(251,64,14)" rx="2" ry="2" />
<text  x="968.27" y="1999.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (16 samples, 0.30%)</title><rect x="662.8" y="1813" width="3.6" height="15.0" fill="rgb(222,41,23)" rx="2" ry="2" />
<text  x="665.84" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (4 samples, 0.07%)</title><rect x="117.6" y="1813" width="0.9" height="15.0" fill="rgb(230,167,1)" rx="2" ry="2" />
<text  x="120.63" y="1823.5" ></text>
</g>
<g >
<title>std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;::pair&lt;lczero::Position const&amp;, 0ul, TTranspositionTable::TNode&amp;&amp;, 0ul&gt; (1 samples, 0.02%)</title><rect x="613.5" y="1813" width="0.3" height="15.0" fill="rgb(242,16,9)" rx="2" ry="2" />
<text  x="616.54" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (2 samples, 0.04%)</title><rect x="269.9" y="1813" width="0.5" height="15.0" fill="rgb(253,97,27)" rx="2" ry="2" />
<text  x="272.95" y="1823.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="669.7" y="1829" width="0.2" height="15.0" fill="rgb(234,190,19)" rx="2" ry="2" />
<text  x="672.66" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (1 samples, 0.02%)</title><rect x="88.1" y="1733" width="0.3" height="15.0" fill="rgb(246,159,16)" rx="2" ry="2" />
<text  x="91.14" y="1743.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="88.4" y="1733" width="0.2" height="15.0" fill="rgb(240,217,40)" rx="2" ry="2" />
<text  x="91.36" y="1743.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="951.6" y="229" width="0.2" height="15.0" fill="rgb(236,222,51)" rx="2" ry="2" />
<text  x="954.62" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, unsigned long, true&gt;::_S_equals (1 samples, 0.02%)</title><rect x="819.6" y="1797" width="0.2" height="15.0" fill="rgb(229,197,50)" rx="2" ry="2" />
<text  x="822.56" y="1807.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="212.9" y="1877" width="0.3" height="15.0" fill="rgb(243,47,33)" rx="2" ry="2" />
<text  x="215.94" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (1 samples, 0.02%)</title><rect x="497.5" y="1765" width="0.3" height="15.0" fill="rgb(229,5,47)" rx="2" ry="2" />
<text  x="500.54" y="1775.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (1 samples, 0.02%)</title><rect x="21.0" y="1909" width="0.2" height="15.0" fill="rgb(234,44,30)" rx="2" ry="2" />
<text  x="24.01" y="1919.5" ></text>
</g>
<g >
<title>lczero::Position::Position (3 samples, 0.06%)</title><rect x="39.3" y="1845" width="0.6" height="15.0" fill="rgb(207,1,46)" rx="2" ry="2" />
<text  x="42.27" y="1855.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.04%)</title><rect x="139.4" y="1861" width="0.5" height="15.0" fill="rgb(216,2,37)" rx="2" ry="2" />
<text  x="142.42" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="961.1" y="1653" width="0.2" height="15.0" fill="rgb(224,48,22)" rx="2" ry="2" />
<text  x="964.09" y="1663.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (41 samples, 0.76%)</title><rect x="399.2" y="1797" width="9.0" height="15.0" fill="rgb(236,174,21)" rx="2" ry="2" />
<text  x="402.15" y="1807.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (39 samples, 0.73%)</title><rect x="399.6" y="1781" width="8.6" height="15.0" fill="rgb(236,212,28)" rx="2" ry="2" />
<text  x="402.59" y="1791.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (2 samples, 0.04%)</title><rect x="279.4" y="1829" width="0.5" height="15.0" fill="rgb(205,212,50)" rx="2" ry="2" />
<text  x="282.41" y="1839.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (26 samples, 0.48%)</title><rect x="709.5" y="1813" width="5.7" height="15.0" fill="rgb(242,196,5)" rx="2" ry="2" />
<text  x="712.50" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (137 samples, 2.56%)</title><rect x="656.5" y="1861" width="30.1" height="15.0" fill="rgb(215,99,16)" rx="2" ry="2" />
<text  x="659.46" y="1871.5" >TS..</text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.06%)</title><rect x="950.7" y="181" width="0.7" height="15.0" fill="rgb(232,33,33)" rx="2" ry="2" />
<text  x="953.74" y="191.5" ></text>
</g>
<g >
<title>lczero::Position::Position (3 samples, 0.06%)</title><rect x="749.1" y="1797" width="0.7" height="15.0" fill="rgb(228,169,42)" rx="2" ry="2" />
<text  x="752.12" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 1.21%)</title><rect x="943.9" y="1157" width="14.3" height="15.0" fill="rgb(247,20,39)" rx="2" ry="2" />
<text  x="946.92" y="1167.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (13 samples, 0.24%)</title><rect x="638.6" y="1861" width="2.9" height="15.0" fill="rgb(207,74,43)" rx="2" ry="2" />
<text  x="641.63" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (1 samples, 0.02%)</title><rect x="24.1" y="1861" width="0.2" height="15.0" fill="rgb(244,161,33)" rx="2" ry="2" />
<text  x="27.09" y="1871.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="179.5" y="1861" width="0.9" height="15.0" fill="rgb(218,91,33)" rx="2" ry="2" />
<text  x="182.48" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (1 samples, 0.02%)</title><rect x="635.3" y="1797" width="0.2" height="15.0" fill="rgb(249,1,22)" rx="2" ry="2" />
<text  x="638.33" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (17 samples, 0.32%)</title><rect x="16.6" y="2021" width="3.7" height="15.0" fill="rgb(227,225,9)" rx="2" ry="2" />
<text  x="19.60" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (46 samples, 0.86%)</title><rect x="943.9" y="501" width="10.1" height="15.0" fill="rgb(205,229,31)" rx="2" ry="2" />
<text  x="946.92" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (1 samples, 0.02%)</title><rect x="850.6" y="1797" width="0.2" height="15.0" fill="rgb(242,40,39)" rx="2" ry="2" />
<text  x="853.59" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_begin (1 samples, 0.02%)</title><rect x="937.3" y="1861" width="0.2" height="15.0" fill="rgb(216,46,50)" rx="2" ry="2" />
<text  x="940.32" y="1871.5" ></text>
</g>
<g >
<title>__asan_set_shadow_00 (1 samples, 0.02%)</title><rect x="851.3" y="1845" width="0.2" height="15.0" fill="rgb(239,209,46)" rx="2" ry="2" />
<text  x="854.25" y="1855.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="133.7" y="1845" width="0.2" height="15.0" fill="rgb(218,184,21)" rx="2" ry="2" />
<text  x="136.70" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="266.9" y="1781" width="0.2" height="15.0" fill="rgb(230,32,29)" rx="2" ry="2" />
<text  x="269.87" y="1791.5" ></text>
</g>
<g >
<title>alpha_beta::test_method (4 samples, 0.07%)</title><rect x="20.3" y="2005" width="0.9" height="15.0" fill="rgb(224,163,26)" rx="2" ry="2" />
<text  x="23.35" y="2015.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="175.1" y="1845" width="0.6" height="15.0" fill="rgb(237,88,22)" rx="2" ry="2" />
<text  x="178.08" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, unsigned long, true&gt;::_S_equals (3 samples, 0.06%)</title><rect x="136.3" y="1813" width="0.7" height="15.0" fill="rgb(215,209,5)" rx="2" ry="2" />
<text  x="139.34" y="1823.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="696.3" y="1749" width="0.2" height="15.0" fill="rgb(248,13,3)" rx="2" ry="2" />
<text  x="699.30" y="1759.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="829.5" y="1813" width="0.2" height="15.0" fill="rgb(248,228,48)" rx="2" ry="2" />
<text  x="832.46" y="1823.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (26 samples, 0.48%)</title><rect x="709.5" y="1829" width="5.7" height="15.0" fill="rgb(219,149,34)" rx="2" ry="2" />
<text  x="712.50" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="867.3" y="1813" width="0.2" height="15.0" fill="rgb(238,136,23)" rx="2" ry="2" />
<text  x="870.32" y="1823.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.04%)</title><rect x="859.4" y="1829" width="0.4" height="15.0" fill="rgb(223,88,49)" rx="2" ry="2" />
<text  x="862.40" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="850.4" y="1813" width="0.2" height="15.0" fill="rgb(206,95,48)" rx="2" ry="2" />
<text  x="853.37" y="1823.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (1 samples, 0.02%)</title><rect x="551.5" y="1829" width="0.2" height="15.0" fill="rgb(237,208,17)" rx="2" ry="2" />
<text  x="554.47" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="179.5" y="1829" width="0.9" height="15.0" fill="rgb(243,73,42)" rx="2" ry="2" />
<text  x="182.48" y="1839.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (1 samples, 0.02%)</title><rect x="983.3" y="2037" width="0.2" height="15.0" fill="rgb(241,85,51)" rx="2" ry="2" />
<text  x="986.32" y="2047.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="641.9" y="1829" width="0.3" height="15.0" fill="rgb(210,149,14)" rx="2" ry="2" />
<text  x="644.93" y="1839.5" ></text>
</g>
<g >
<title>__pthread_getspecific (1 samples, 0.02%)</title><rect x="922.1" y="1781" width="0.2" height="15.0" fill="rgb(254,129,34)" rx="2" ry="2" />
<text  x="925.13" y="1791.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="46.5" y="1829" width="0.3" height="15.0" fill="rgb(222,71,15)" rx="2" ry="2" />
<text  x="49.54" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (2 samples, 0.04%)</title><rect x="52.3" y="1829" width="0.4" height="15.0" fill="rgb(228,131,47)" rx="2" ry="2" />
<text  x="55.26" y="1839.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::fill (2 samples, 0.04%)</title><rect x="79.1" y="1829" width="0.5" height="15.0" fill="rgb(249,77,52)" rx="2" ry="2" />
<text  x="82.11" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.04%)</title><rect x="769.4" y="1733" width="0.4" height="15.0" fill="rgb(237,52,20)" rx="2" ry="2" />
<text  x="772.37" y="1743.5" ></text>
</g>
<g >
<title>IsTerminal (1 samples, 0.02%)</title><rect x="363.5" y="1829" width="0.2" height="15.0" fill="rgb(224,7,52)" rx="2" ry="2" />
<text  x="366.49" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="230.8" y="1829" width="0.2" height="15.0" fill="rgb(243,81,29)" rx="2" ry="2" />
<text  x="233.77" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (52 samples, 0.97%)</title><rect x="754.6" y="1781" width="11.5" height="15.0" fill="rgb(243,26,45)" rx="2" ry="2" />
<text  x="757.63" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;, __sanitizer::SizeClassAllocatorLocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;, __sanitizer::LargeMmapAllocator&lt;__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt; &gt;::Allocate (24 samples, 0.45%)</title><rect x="1134.3" y="2053" width="5.3" height="15.0" fill="rgb(254,53,29)" rx="2" ry="2" />
<text  x="1137.31" y="2063.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="665.5" y="1781" width="0.2" height="15.0" fill="rgb(223,149,35)" rx="2" ry="2" />
<text  x="668.48" y="1791.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="634.9" y="1829" width="0.2" height="15.0" fill="rgb(212,4,37)" rx="2" ry="2" />
<text  x="637.89" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (1 samples, 0.02%)</title><rect x="923.4" y="1797" width="0.3" height="15.0" fill="rgb(217,164,43)" rx="2" ry="2" />
<text  x="926.45" y="1807.5" ></text>
</g>
<g >
<title>THistoryHeuristics::Get (1 samples, 0.02%)</title><rect x="229.4" y="1861" width="0.3" height="15.0" fill="rgb(205,76,27)" rx="2" ry="2" />
<text  x="232.45" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="845.5" y="1813" width="0.3" height="15.0" fill="rgb(239,96,38)" rx="2" ry="2" />
<text  x="848.53" y="1823.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (3 samples, 0.06%)</title><rect x="608.0" y="1829" width="0.7" height="15.0" fill="rgb(214,87,19)" rx="2" ry="2" />
<text  x="611.03" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="302.3" y="1797" width="0.2" height="15.0" fill="rgb(233,88,40)" rx="2" ry="2" />
<text  x="305.30" y="1807.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="28.9" y="1845" width="0.2" height="15.0" fill="rgb(249,74,7)" rx="2" ry="2" />
<text  x="31.93" y="1855.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.04%)</title><rect x="768.3" y="1765" width="0.4" height="15.0" fill="rgb(215,14,42)" rx="2" ry="2" />
<text  x="771.27" y="1775.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (3 samples, 0.06%)</title><rect x="760.1" y="1685" width="0.7" height="15.0" fill="rgb(221,156,33)" rx="2" ry="2" />
<text  x="763.13" y="1695.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (28 samples, 0.52%)</title><rect x="435.5" y="1765" width="6.1" height="15.0" fill="rgb(216,191,49)" rx="2" ry="2" />
<text  x="438.47" y="1775.5" ></text>
</g>
<g >
<title>THistoryHeuristics::GetCounterMove (5 samples, 0.09%)</title><rect x="276.6" y="1845" width="1.1" height="15.0" fill="rgb(222,169,39)" rx="2" ry="2" />
<text  x="279.55" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (1 samples, 0.02%)</title><rect x="695.6" y="1829" width="0.3" height="15.0" fill="rgb(221,110,14)" rx="2" ry="2" />
<text  x="698.64" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="192.5" y="1845" width="0.2" height="15.0" fill="rgb(206,15,18)" rx="2" ry="2" />
<text  x="195.47" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="194.9" y="1829" width="0.2" height="15.0" fill="rgb(251,80,4)" rx="2" ry="2" />
<text  x="197.89" y="1839.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (50 samples, 0.93%)</title><rect x="479.7" y="1813" width="11.0" height="15.0" fill="rgb(217,114,39)" rx="2" ry="2" />
<text  x="482.71" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (131 samples, 2.44%)</title><rect x="686.6" y="1861" width="28.8" height="15.0" fill="rgb(236,153,15)" rx="2" ry="2" />
<text  x="689.61" y="1871.5" >TS..</text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="704.2" y="1813" width="0.2" height="15.0" fill="rgb(217,223,29)" rx="2" ry="2" />
<text  x="707.22" y="1823.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="959.5" y="1429" width="0.3" height="15.0" fill="rgb(251,44,52)" rx="2" ry="2" />
<text  x="962.55" y="1439.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.04%)</title><rect x="197.5" y="1861" width="0.5" height="15.0" fill="rgb(240,112,51)" rx="2" ry="2" />
<text  x="200.53" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="82.9" y="1813" width="0.2" height="15.0" fill="rgb(247,56,35)" rx="2" ry="2" />
<text  x="85.86" y="1823.5" ></text>
</g>
<g >
<title>TTranspositionTable::Insert (2 samples, 0.04%)</title><rect x="613.3" y="1893" width="0.5" height="15.0" fill="rgb(246,100,23)" rx="2" ry="2" />
<text  x="616.32" y="1903.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (10 samples, 0.19%)</title><rect x="617.5" y="1845" width="2.2" height="15.0" fill="rgb(245,167,0)" rx="2" ry="2" />
<text  x="620.50" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (12 samples, 0.22%)</title><rect x="492.0" y="1829" width="2.7" height="15.0" fill="rgb(242,137,0)" rx="2" ry="2" />
<text  x="495.04" y="1839.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="633.6" y="1861" width="0.2" height="15.0" fill="rgb(233,2,7)" rx="2" ry="2" />
<text  x="636.57" y="1871.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="788.5" y="1813" width="0.2" height="15.0" fill="rgb(216,214,18)" rx="2" ry="2" />
<text  x="791.52" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="697.2" y="1701" width="0.2" height="15.0" fill="rgb(232,17,8)" rx="2" ry="2" />
<text  x="700.18" y="1711.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="765.9" y="1717" width="0.2" height="15.0" fill="rgb(253,2,8)" rx="2" ry="2" />
<text  x="768.85" y="1727.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.04%)</title><rect x="628.5" y="1893" width="0.4" height="15.0" fill="rgb(237,133,41)" rx="2" ry="2" />
<text  x="631.50" y="1903.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (1 samples, 0.02%)</title><rect x="191.4" y="1813" width="0.2" height="15.0" fill="rgb(221,94,48)" rx="2" ry="2" />
<text  x="194.37" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="698.1" y="1781" width="0.2" height="15.0" fill="rgb(210,217,42)" rx="2" ry="2" />
<text  x="701.06" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="635.3" y="1781" width="0.2" height="15.0" fill="rgb(215,103,47)" rx="2" ry="2" />
<text  x="638.33" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, false, true&gt;::operator (2 samples, 0.04%)</title><rect x="686.0" y="1829" width="0.4" height="15.0" fill="rgb(251,87,44)" rx="2" ry="2" />
<text  x="688.95" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (1 samples, 0.02%)</title><rect x="21.7" y="1861" width="0.2" height="15.0" fill="rgb(205,124,50)" rx="2" ry="2" />
<text  x="24.67" y="1871.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (10 samples, 0.19%)</title><rect x="363.9" y="1813" width="2.2" height="15.0" fill="rgb(211,163,20)" rx="2" ry="2" />
<text  x="366.93" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (1 samples, 0.02%)</title><rect x="385.3" y="1765" width="0.2" height="15.0" fill="rgb(251,111,8)" rx="2" ry="2" />
<text  x="388.28" y="1775.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="87.3" y="1797" width="0.2" height="15.0" fill="rgb(210,228,1)" rx="2" ry="2" />
<text  x="90.26" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="314.6" y="1797" width="0.2" height="15.0" fill="rgb(235,11,3)" rx="2" ry="2" />
<text  x="317.63" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (5 samples, 0.09%)</title><rect x="32.2" y="1877" width="1.1" height="15.0" fill="rgb(212,191,42)" rx="2" ry="2" />
<text  x="35.23" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (1 samples, 0.02%)</title><rect x="720.1" y="1813" width="0.2" height="15.0" fill="rgb(235,45,51)" rx="2" ry="2" />
<text  x="723.07" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (1 samples, 0.02%)</title><rect x="757.9" y="1733" width="0.2" height="15.0" fill="rgb(237,191,8)" rx="2" ry="2" />
<text  x="760.93" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="696.3" y="1765" width="0.2" height="15.0" fill="rgb(228,52,30)" rx="2" ry="2" />
<text  x="699.30" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (1 samples, 0.02%)</title><rect x="74.9" y="1813" width="0.3" height="15.0" fill="rgb(222,73,42)" rx="2" ry="2" />
<text  x="77.93" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="754.8" y="1717" width="0.3" height="15.0" fill="rgb(218,43,34)" rx="2" ry="2" />
<text  x="757.85" y="1727.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (45 samples, 0.84%)</title><rect x="571.9" y="1845" width="9.9" height="15.0" fill="rgb(229,140,2)" rx="2" ry="2" />
<text  x="574.94" y="1855.5" ></text>
</g>
<g >
<title>THistoryHeuristics::Get (4 samples, 0.07%)</title><rect x="675.6" y="1845" width="0.9" height="15.0" fill="rgb(207,219,23)" rx="2" ry="2" />
<text  x="678.61" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (2 samples, 0.04%)</title><rect x="204.1" y="1893" width="0.5" height="15.0" fill="rgb(217,107,12)" rx="2" ry="2" />
<text  x="207.14" y="1903.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (7 samples, 0.13%)</title><rect x="333.6" y="1829" width="1.5" height="15.0" fill="rgb(226,188,24)" rx="2" ry="2" />
<text  x="336.56" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (1 samples, 0.02%)</title><rect x="220.0" y="1829" width="0.2" height="15.0" fill="rgb(240,90,16)" rx="2" ry="2" />
<text  x="222.98" y="1839.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (17 samples, 0.32%)</title><rect x="681.6" y="1813" width="3.7" height="15.0" fill="rgb(209,168,14)" rx="2" ry="2" />
<text  x="684.55" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="314.8" y="1813" width="0.3" height="15.0" fill="rgb(235,198,5)" rx="2" ry="2" />
<text  x="317.85" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="134.6" y="1845" width="0.2" height="15.0" fill="rgb(250,24,11)" rx="2" ry="2" />
<text  x="137.58" y="1855.5" ></text>
</g>
<g >
<title>IsCapture (1 samples, 0.02%)</title><rect x="741.9" y="1813" width="0.2" height="15.0" fill="rgb(237,194,21)" rx="2" ry="2" />
<text  x="744.86" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="230.1" y="1829" width="0.7" height="15.0" fill="rgb(213,73,12)" rx="2" ry="2" />
<text  x="233.11" y="1839.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::insert_or_assign&lt;TTranspositionTable::TNode&gt; (4 samples, 0.07%)</title><rect x="850.2" y="1845" width="0.8" height="15.0" fill="rgb(236,36,7)" rx="2" ry="2" />
<text  x="853.15" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (3 samples, 0.06%)</title><rect x="931.4" y="1813" width="0.6" height="15.0" fill="rgb(242,30,27)" rx="2" ry="2" />
<text  x="934.37" y="1823.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="696.5" y="1781" width="0.2" height="15.0" fill="rgb(239,67,33)" rx="2" ry="2" />
<text  x="699.52" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.06%)</title><rect x="23.2" y="1877" width="0.7" height="15.0" fill="rgb(226,61,14)" rx="2" ry="2" />
<text  x="26.21" y="1887.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (3 samples, 0.06%)</title><rect x="637.3" y="1861" width="0.7" height="15.0" fill="rgb(239,178,35)" rx="2" ry="2" />
<text  x="640.31" y="1871.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (25 samples, 0.47%)</title><rect x="265.3" y="1845" width="5.5" height="15.0" fill="rgb(231,0,51)" rx="2" ry="2" />
<text  x="268.33" y="1855.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="214.7" y="1861" width="0.2" height="15.0" fill="rgb(220,210,49)" rx="2" ry="2" />
<text  x="217.70" y="1871.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (3 samples, 0.06%)</title><rect x="200.8" y="1845" width="0.7" height="15.0" fill="rgb(207,145,26)" rx="2" ry="2" />
<text  x="203.83" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::at (1 samples, 0.02%)</title><rect x="214.9" y="1861" width="0.2" height="15.0" fill="rgb(225,78,25)" rx="2" ry="2" />
<text  x="217.92" y="1871.5" ></text>
</g>
<g >
<title>memcpy (1 samples, 0.02%)</title><rect x="197.3" y="1877" width="0.2" height="15.0" fill="rgb(241,124,22)" rx="2" ry="2" />
<text  x="200.31" y="1887.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (82 samples, 1.53%)</title><rect x="1008.0" y="2037" width="18.0" height="15.0" fill="rgb(246,75,12)" rx="2" ry="2" />
<text  x="1010.97" y="2047.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (7 samples, 0.13%)</title><rect x="699.2" y="1813" width="1.5" height="15.0" fill="rgb(214,12,54)" rx="2" ry="2" />
<text  x="702.16" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (16 samples, 0.30%)</title><rect x="51.2" y="1861" width="3.5" height="15.0" fill="rgb(236,215,34)" rx="2" ry="2" />
<text  x="54.16" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (1 samples, 0.02%)</title><rect x="629.4" y="1909" width="0.2" height="15.0" fill="rgb(252,36,39)" rx="2" ry="2" />
<text  x="632.38" y="1919.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_begin (2 samples, 0.04%)</title><rect x="580.5" y="1829" width="0.5" height="15.0" fill="rgb(247,131,3)" rx="2" ry="2" />
<text  x="583.52" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (1 samples, 0.02%)</title><rect x="938.0" y="1893" width="0.2" height="15.0" fill="rgb(213,170,23)" rx="2" ry="2" />
<text  x="940.98" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="469.8" y="1813" width="0.2" height="15.0" fill="rgb(208,60,50)" rx="2" ry="2" />
<text  x="472.81" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="365.0" y="1781" width="0.3" height="15.0" fill="rgb(253,140,3)" rx="2" ry="2" />
<text  x="368.03" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="617.3" y="1845" width="0.2" height="15.0" fill="rgb(243,191,12)" rx="2" ry="2" />
<text  x="620.28" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="845.8" y="1845" width="0.2" height="15.0" fill="rgb(220,98,16)" rx="2" ry="2" />
<text  x="848.75" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (3 samples, 0.06%)</title><rect x="635.1" y="1861" width="0.7" height="15.0" fill="rgb(206,17,24)" rx="2" ry="2" />
<text  x="638.11" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (31 samples, 0.58%)</title><rect x="756.8" y="1749" width="6.9" height="15.0" fill="rgb(215,50,50)" rx="2" ry="2" />
<text  x="759.83" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (57 samples, 1.06%)</title><rect x="386.6" y="1797" width="12.6" height="15.0" fill="rgb(224,229,3)" rx="2" ry="2" />
<text  x="389.61" y="1807.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (8 samples, 0.15%)</title><rect x="91.0" y="1781" width="1.8" height="15.0" fill="rgb(248,97,53)" rx="2" ry="2" />
<text  x="94.00" y="1791.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="222.0" y="1845" width="0.8" height="15.0" fill="rgb(250,159,47)" rx="2" ry="2" />
<text  x="224.96" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="938.0" y="1877" width="0.2" height="15.0" fill="rgb(232,174,43)" rx="2" ry="2" />
<text  x="940.98" y="1887.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.04%)</title><rect x="778.0" y="1781" width="0.4" height="15.0" fill="rgb(210,206,3)" rx="2" ry="2" />
<text  x="780.96" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="938.0" y="1813" width="0.2" height="15.0" fill="rgb(212,170,21)" rx="2" ry="2" />
<text  x="940.98" y="1823.5" ></text>
</g>
<g >
<title>std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;::pair&lt;lczero::Position const&amp;, 0ul, TTranspositionTable::TNode&amp;&amp;, 0ul&gt; (2 samples, 0.04%)</title><rect x="923.7" y="1797" width="0.4" height="15.0" fill="rgb(230,36,48)" rx="2" ry="2" />
<text  x="926.67" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (79 samples, 1.47%)</title><rect x="770.9" y="1813" width="17.4" height="15.0" fill="rgb(239,125,27)" rx="2" ry="2" />
<text  x="773.91" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (8 samples, 0.15%)</title><rect x="767.6" y="1781" width="1.8" height="15.0" fill="rgb(215,6,49)" rx="2" ry="2" />
<text  x="770.61" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.04%)</title><rect x="50.3" y="1829" width="0.4" height="15.0" fill="rgb(208,176,33)" rx="2" ry="2" />
<text  x="53.28" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="90.1" y="1781" width="0.2" height="15.0" fill="rgb(222,45,39)" rx="2" ry="2" />
<text  x="93.12" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (3 samples, 0.06%)</title><rect x="685.3" y="1813" width="0.7" height="15.0" fill="rgb(241,73,54)" rx="2" ry="2" />
<text  x="688.29" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (2 samples, 0.04%)</title><rect x="674.3" y="1829" width="0.4" height="15.0" fill="rgb(238,158,45)" rx="2" ry="2" />
<text  x="677.29" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.04%)</title><rect x="698.5" y="1797" width="0.4" height="15.0" fill="rgb(223,15,39)" rx="2" ry="2" />
<text  x="701.50" y="1807.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="837.2" y="1813" width="0.2" height="15.0" fill="rgb(213,174,19)" rx="2" ry="2" />
<text  x="840.17" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2 samples, 0.04%)</title><rect x="639.3" y="1813" width="0.4" height="15.0" fill="rgb(225,38,17)" rx="2" ry="2" />
<text  x="642.29" y="1823.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (3 samples, 0.06%)</title><rect x="224.4" y="1861" width="0.6" height="15.0" fill="rgb(237,63,33)" rx="2" ry="2" />
<text  x="227.39" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (1 samples, 0.02%)</title><rect x="821.5" y="1845" width="0.3" height="15.0" fill="rgb(254,213,18)" rx="2" ry="2" />
<text  x="824.54" y="1855.5" ></text>
</g>
<g >
<title>GetPieceValue (1 samples, 0.02%)</title><rect x="664.4" y="1797" width="0.2" height="15.0" fill="rgb(223,116,40)" rx="2" ry="2" />
<text  x="667.38" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (1 samples, 0.02%)</title><rect x="919.9" y="1813" width="0.2" height="15.0" fill="rgb(207,127,20)" rx="2" ry="2" />
<text  x="922.93" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (5 samples, 0.09%)</title><rect x="621.7" y="1877" width="1.1" height="15.0" fill="rgb(233,4,48)" rx="2" ry="2" />
<text  x="624.68" y="1887.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (20 samples, 0.37%)</title><rect x="939.5" y="2037" width="4.4" height="15.0" fill="rgb(250,77,50)" rx="2" ry="2" />
<text  x="942.52" y="2047.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (1 samples, 0.02%)</title><rect x="442.7" y="1813" width="0.3" height="15.0" fill="rgb(227,17,40)" rx="2" ry="2" />
<text  x="445.73" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="176.0" y="1845" width="0.2" height="15.0" fill="rgb(250,81,2)" rx="2" ry="2" />
<text  x="178.96" y="1855.5" ></text>
</g>
<g >
<title>GetPieceType (6 samples, 0.11%)</title><rect x="727.3" y="1813" width="1.4" height="15.0" fill="rgb(238,217,28)" rx="2" ry="2" />
<text  x="730.33" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (1 samples, 0.02%)</title><rect x="208.3" y="1861" width="0.2" height="15.0" fill="rgb(208,142,8)" rx="2" ry="2" />
<text  x="211.32" y="1871.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="758.6" y="1717" width="0.2" height="15.0" fill="rgb(251,46,45)" rx="2" ry="2" />
<text  x="761.59" y="1727.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.04%)</title><rect x="665.7" y="1781" width="0.4" height="15.0" fill="rgb(228,114,38)" rx="2" ry="2" />
<text  x="668.70" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_drop_node (1 samples, 0.02%)</title><rect x="588.9" y="1829" width="0.2" height="15.0" fill="rgb(234,65,43)" rx="2" ry="2" />
<text  x="591.88" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="316.0" y="1813" width="0.8" height="15.0" fill="rgb(220,43,40)" rx="2" ry="2" />
<text  x="318.95" y="1823.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="85.3" y="1813" width="0.2" height="15.0" fill="rgb(248,69,11)" rx="2" ry="2" />
<text  x="88.28" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (18 samples, 0.34%)</title><rect x="185.0" y="1861" width="3.9" height="15.0" fill="rgb(232,187,19)" rx="2" ry="2" />
<text  x="187.99" y="1871.5" ></text>
</g>
<g >
<title>search (5,361 samples, 100.00%)</title><rect x="10.0" y="2069" width="1180.0" height="15.0" fill="rgb(240,119,5)" rx="2" ry="2" />
<text  x="13.00" y="2079.5" >search</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (4 samples, 0.07%)</title><rect x="680.7" y="1797" width="0.9" height="15.0" fill="rgb(205,143,39)" rx="2" ry="2" />
<text  x="683.67" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (12 samples, 0.22%)</title><rect x="492.0" y="1845" width="2.7" height="15.0" fill="rgb(231,69,24)" rx="2" ry="2" />
<text  x="495.04" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (95 samples, 1.77%)</title><rect x="500.2" y="1845" width="20.9" height="15.0" fill="rgb(229,217,24)" rx="2" ry="2" />
<text  x="503.18" y="1855.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="927.2" y="1861" width="0.2" height="15.0" fill="rgb(236,46,20)" rx="2" ry="2" />
<text  x="930.19" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (7 samples, 0.13%)</title><rect x="192.7" y="1877" width="1.5" height="15.0" fill="rgb(233,193,37)" rx="2" ry="2" />
<text  x="195.69" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (90 samples, 1.68%)</title><rect x="943.9" y="1829" width="19.8" height="15.0" fill="rgb(251,21,26)" rx="2" ry="2" />
<text  x="946.92" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (27 samples, 0.50%)</title><rect x="38.0" y="1877" width="5.9" height="15.0" fill="rgb(215,146,25)" rx="2" ry="2" />
<text  x="40.95" y="1887.5" ></text>
</g>
<g >
<title>CalcPSTScore (1 samples, 0.02%)</title><rect x="635.1" y="1845" width="0.2" height="15.0" fill="rgb(246,124,13)" rx="2" ry="2" />
<text  x="638.11" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (5 samples, 0.09%)</title><rect x="601.9" y="1861" width="1.1" height="15.0" fill="rgb(213,40,11)" rx="2" ry="2" />
<text  x="604.87" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (38 samples, 0.71%)</title><rect x="943.9" y="341" width="8.4" height="15.0" fill="rgb(228,123,31)" rx="2" ry="2" />
<text  x="946.92" y="351.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="47.6" y="1829" width="0.3" height="15.0" fill="rgb(248,79,28)" rx="2" ry="2" />
<text  x="50.64" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="176.0" y="1829" width="0.2" height="15.0" fill="rgb(215,169,11)" rx="2" ry="2" />
<text  x="178.96" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (1 samples, 0.02%)</title><rect x="754.0" y="1749" width="0.2" height="15.0" fill="rgb(250,216,9)" rx="2" ry="2" />
<text  x="756.97" y="1759.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (830 samples, 15.48%)</title><rect x="21.9" y="1925" width="182.7" height="15.0" fill="rgb(240,64,18)" rx="2" ry="2" />
<text  x="24.89" y="1935.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="628.7" y="1861" width="0.2" height="15.0" fill="rgb(254,44,13)" rx="2" ry="2" />
<text  x="631.72" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="755.7" y="1733" width="0.2" height="15.0" fill="rgb(215,32,43)" rx="2" ry="2" />
<text  x="758.73" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (4 samples, 0.07%)</title><rect x="830.3" y="1813" width="0.9" height="15.0" fill="rgb(237,138,21)" rx="2" ry="2" />
<text  x="833.34" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (191 samples, 3.56%)</title><rect x="366.8" y="1829" width="42.0" height="15.0" fill="rgb(249,205,12)" rx="2" ry="2" />
<text  x="369.80" y="1839.5" >TSe..</text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="760.3" y="1653" width="0.3" height="15.0" fill="rgb(239,5,8)" rx="2" ry="2" />
<text  x="763.35" y="1663.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (6 samples, 0.11%)</title><rect x="431.5" y="1797" width="1.3" height="15.0" fill="rgb(239,164,19)" rx="2" ry="2" />
<text  x="434.51" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="734.2" y="1765" width="0.2" height="15.0" fill="rgb(228,202,3)" rx="2" ry="2" />
<text  x="737.16" y="1775.5" ></text>
</g>
<g >
<title>Evaluate (2 samples, 0.04%)</title><rect x="67.0" y="1861" width="0.4" height="15.0" fill="rgb(215,128,5)" rx="2" ry="2" />
<text  x="70.01" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (73 samples, 1.36%)</title><rect x="943.9" y="1493" width="16.1" height="15.0" fill="rgb(249,156,25)" rx="2" ry="2" />
<text  x="946.92" y="1503.5" ></text>
</g>
<g >
<title>[unknown] (28 samples, 0.52%)</title><rect x="943.9" y="53" width="6.2" height="15.0" fill="rgb(228,198,2)" rx="2" ry="2" />
<text  x="946.92" y="63.5" ></text>
</g>
<g >
<title>[unknown] (67 samples, 1.25%)</title><rect x="943.9" y="1253" width="14.8" height="15.0" fill="rgb(236,200,19)" rx="2" ry="2" />
<text  x="946.92" y="1263.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::kings (1 samples, 0.02%)</title><rect x="371.4" y="1781" width="0.2" height="15.0" fill="rgb(245,133,46)" rx="2" ry="2" />
<text  x="374.42" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="629.4" y="1845" width="0.2" height="15.0" fill="rgb(248,193,10)" rx="2" ry="2" />
<text  x="632.38" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (66 samples, 1.23%)</title><rect x="943.9" y="1237" width="14.5" height="15.0" fill="rgb(221,151,24)" rx="2" ry="2" />
<text  x="946.92" y="1247.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (163 samples, 3.04%)</title><rect x="550.1" y="1861" width="35.9" height="15.0" fill="rgb(213,89,27)" rx="2" ry="2" />
<text  x="553.15" y="1871.5" >std..</text>
</g>
<g >
<title>TSearchStrategy::Search (1,400 samples, 26.11%)</title><rect x="630.9" y="1957" width="308.2" height="15.0" fill="rgb(229,160,0)" rx="2" ry="2" />
<text  x="633.93" y="1967.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>[unknown] (41 samples, 0.76%)</title><rect x="943.9" y="373" width="9.0" height="15.0" fill="rgb(234,11,52)" rx="2" ry="2" />
<text  x="946.92" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="938.0" y="1861" width="0.2" height="15.0" fill="rgb(227,188,38)" rx="2" ry="2" />
<text  x="940.98" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (1 samples, 0.02%)</title><rect x="923.4" y="1813" width="0.3" height="15.0" fill="rgb(216,220,38)" rx="2" ry="2" />
<text  x="926.45" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="932.0" y="1877" width="0.3" height="15.0" fill="rgb(232,210,6)" rx="2" ry="2" />
<text  x="935.03" y="1887.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (5 samples, 0.09%)</title><rect x="28.7" y="1877" width="1.1" height="15.0" fill="rgb(231,41,6)" rx="2" ry="2" />
<text  x="31.71" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="698.3" y="1765" width="0.2" height="15.0" fill="rgb(229,83,45)" rx="2" ry="2" />
<text  x="701.28" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="203.3" y="1893" width="0.2" height="15.0" fill="rgb(244,134,28)" rx="2" ry="2" />
<text  x="206.25" y="1903.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (7 samples, 0.13%)</title><rect x="299.4" y="1829" width="1.6" height="15.0" fill="rgb(227,189,43)" rx="2" ry="2" />
<text  x="302.44" y="1839.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (2 samples, 0.04%)</title><rect x="23.4" y="1861" width="0.5" height="15.0" fill="rgb(226,206,25)" rx="2" ry="2" />
<text  x="26.43" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (94 samples, 1.75%)</title><rect x="943.9" y="1909" width="20.7" height="15.0" fill="rgb(230,204,32)" rx="2" ry="2" />
<text  x="946.92" y="1919.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (37 samples, 0.69%)</title><rect x="1027.3" y="2005" width="8.2" height="15.0" fill="rgb(217,203,19)" rx="2" ry="2" />
<text  x="1030.34" y="2015.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (3 samples, 0.06%)</title><rect x="625.9" y="1845" width="0.6" height="15.0" fill="rgb(244,124,19)" rx="2" ry="2" />
<text  x="628.86" y="1855.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="760.1" y="1653" width="0.2" height="15.0" fill="rgb(229,0,28)" rx="2" ry="2" />
<text  x="763.13" y="1663.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.04%)</title><rect x="697.2" y="1733" width="0.4" height="15.0" fill="rgb(209,150,34)" rx="2" ry="2" />
<text  x="700.18" y="1743.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="749.8" y="1781" width="0.4" height="15.0" fill="rgb(233,110,36)" rx="2" ry="2" />
<text  x="752.78" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (1 samples, 0.02%)</title><rect x="520.7" y="1813" width="0.2" height="15.0" fill="rgb(217,126,20)" rx="2" ry="2" />
<text  x="523.65" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="636.0" y="1829" width="0.2" height="15.0" fill="rgb(221,15,29)" rx="2" ry="2" />
<text  x="638.99" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (120 samples, 2.24%)</title><rect x="789.8" y="1829" width="26.5" height="15.0" fill="rgb(228,44,17)" rx="2" ry="2" />
<text  x="792.84" y="1839.5" >l..</text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="923.4" y="1829" width="0.3" height="15.0" fill="rgb(207,41,13)" rx="2" ry="2" />
<text  x="926.45" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (32 samples, 0.60%)</title><rect x="837.4" y="1797" width="7.0" height="15.0" fill="rgb(242,35,17)" rx="2" ry="2" />
<text  x="840.39" y="1807.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="764.1" y="1701" width="0.4" height="15.0" fill="rgb(236,177,9)" rx="2" ry="2" />
<text  x="767.09" y="1711.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="20.6" y="1909" width="0.2" height="15.0" fill="rgb(227,196,28)" rx="2" ry="2" />
<text  x="23.57" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (2 samples, 0.04%)</title><rect x="804.8" y="1797" width="0.5" height="15.0" fill="rgb(221,35,20)" rx="2" ry="2" />
<text  x="807.81" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (15 samples, 0.28%)</title><rect x="235.0" y="1861" width="3.3" height="15.0" fill="rgb(212,50,25)" rx="2" ry="2" />
<text  x="237.95" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Castlings::operator== (1 samples, 0.02%)</title><rect x="282.7" y="1781" width="0.2" height="15.0" fill="rgb(236,164,13)" rx="2" ry="2" />
<text  x="285.71" y="1791.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="357.1" y="1781" width="0.2" height="15.0" fill="rgb(236,172,14)" rx="2" ry="2" />
<text  x="360.11" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="49.8" y="1765" width="0.3" height="15.0" fill="rgb(220,43,40)" rx="2" ry="2" />
<text  x="52.84" y="1775.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (1 samples, 0.02%)</title><rect x="753.5" y="1781" width="0.2" height="15.0" fill="rgb(230,101,30)" rx="2" ry="2" />
<text  x="756.53" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (425 samples, 7.93%)</title><rect x="723.8" y="1845" width="93.6" height="15.0" fill="rgb(214,12,36)" rx="2" ry="2" />
<text  x="726.81" y="1855.5" >TSearchStra..</text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="958.9" y="1285" width="0.2" height="15.0" fill="rgb(229,31,36)" rx="2" ry="2" />
<text  x="961.89" y="1295.5" ></text>
</g>
<g >
<title>IsCapture (1 samples, 0.02%)</title><rect x="759.9" y="1701" width="0.2" height="15.0" fill="rgb(214,54,34)" rx="2" ry="2" />
<text  x="762.91" y="1711.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (3 samples, 0.06%)</title><rect x="214.3" y="1877" width="0.6" height="15.0" fill="rgb(232,41,18)" rx="2" ry="2" />
<text  x="217.26" y="1887.5" ></text>
</g>
<g >
<title>lczero::Position::Position (9 samples, 0.17%)</title><rect x="667.7" y="1813" width="2.0" height="15.0" fill="rgb(231,9,33)" rx="2" ry="2" />
<text  x="670.68" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, true&gt; &gt;::construct&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="497.5" y="1797" width="0.3" height="15.0" fill="rgb(231,118,13)" rx="2" ry="2" />
<text  x="500.54" y="1807.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="700.7" y="1813" width="0.4" height="15.0" fill="rgb(229,58,18)" rx="2" ry="2" />
<text  x="703.70" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (836 samples, 15.59%)</title><rect x="21.4" y="1957" width="184.1" height="15.0" fill="rgb(205,205,13)" rx="2" ry="2" />
<text  x="24.45" y="1967.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (2 samples, 0.04%)</title><rect x="949.6" y="37" width="0.5" height="15.0" fill="rgb(211,171,33)" rx="2" ry="2" />
<text  x="952.64" y="47.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (6 samples, 0.11%)</title><rect x="443.4" y="1813" width="1.3" height="15.0" fill="rgb(240,18,51)" rx="2" ry="2" />
<text  x="446.39" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (78 samples, 1.45%)</title><rect x="943.9" y="1637" width="17.2" height="15.0" fill="rgb(231,56,51)" rx="2" ry="2" />
<text  x="946.92" y="1647.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="635.3" y="1749" width="0.2" height="15.0" fill="rgb(238,212,3)" rx="2" ry="2" />
<text  x="638.33" y="1759.5" ></text>
</g>
<g >
<title>__sanitizer::StackTrace::GetCurrentPc (1 samples, 0.02%)</title><rect x="93.4" y="1845" width="0.2" height="15.0" fill="rgb(220,225,7)" rx="2" ry="2" />
<text  x="96.42" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="47.0" y="1813" width="0.2" height="15.0" fill="rgb(251,162,29)" rx="2" ry="2" />
<text  x="49.98" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="693.2" y="1813" width="0.2" height="15.0" fill="rgb(254,31,5)" rx="2" ry="2" />
<text  x="696.22" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="205.0" y="1877" width="0.2" height="15.0" fill="rgb(213,56,45)" rx="2" ry="2" />
<text  x="208.02" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (108 samples, 2.01%)</title><rect x="822.0" y="1845" width="23.8" height="15.0" fill="rgb(241,53,39)" rx="2" ry="2" />
<text  x="824.98" y="1855.5" >l..</text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.04%)</title><rect x="178.8" y="1845" width="0.5" height="15.0" fill="rgb(243,94,33)" rx="2" ry="2" />
<text  x="181.82" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.06%)</title><rect x="757.3" y="1717" width="0.6" height="15.0" fill="rgb(239,112,49)" rx="2" ry="2" />
<text  x="760.27" y="1727.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (12 samples, 0.22%)</title><rect x="623.9" y="1877" width="2.6" height="15.0" fill="rgb(233,1,32)" rx="2" ry="2" />
<text  x="626.88" y="1887.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="378.2" y="1781" width="0.3" height="15.0" fill="rgb(217,183,14)" rx="2" ry="2" />
<text  x="381.24" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (9 samples, 0.17%)</title><rect x="448.9" y="1797" width="2.0" height="15.0" fill="rgb(211,140,10)" rx="2" ry="2" />
<text  x="451.90" y="1807.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="208.8" y="1877" width="0.2" height="15.0" fill="rgb(209,63,27)" rx="2" ry="2" />
<text  x="211.76" y="1887.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (1 samples, 0.02%)</title><rect x="220.0" y="1845" width="0.2" height="15.0" fill="rgb(208,183,41)" rx="2" ry="2" />
<text  x="222.98" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="380.2" y="1765" width="0.2" height="15.0" fill="rgb(241,7,3)" rx="2" ry="2" />
<text  x="383.22" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="923.7" y="1829" width="0.4" height="15.0" fill="rgb(240,176,34)" rx="2" ry="2" />
<text  x="926.67" y="1839.5" ></text>
</g>
<g >
<title>__pthread_getspecific (1 samples, 0.02%)</title><rect x="628.3" y="1781" width="0.2" height="15.0" fill="rgb(233,165,7)" rx="2" ry="2" />
<text  x="631.28" y="1791.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (2 samples, 0.04%)</title><rect x="749.8" y="1797" width="0.4" height="15.0" fill="rgb(229,10,31)" rx="2" ry="2" />
<text  x="752.78" y="1807.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (1 samples, 0.02%)</title><rect x="642.4" y="1861" width="0.2" height="15.0" fill="rgb(250,202,11)" rx="2" ry="2" />
<text  x="645.37" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (1 samples, 0.02%)</title><rect x="769.8" y="1797" width="0.2" height="15.0" fill="rgb(207,142,9)" rx="2" ry="2" />
<text  x="772.81" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="20.6" y="1893" width="0.2" height="15.0" fill="rgb(233,150,29)" rx="2" ry="2" />
<text  x="23.57" y="1903.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (1 samples, 0.02%)</title><rect x="32.7" y="1813" width="0.2" height="15.0" fill="rgb(234,38,17)" rx="2" ry="2" />
<text  x="35.67" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="769.8" y="1781" width="0.2" height="15.0" fill="rgb(221,3,1)" rx="2" ry="2" />
<text  x="772.81" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (7 samples, 0.13%)</title><rect x="928.5" y="1861" width="1.6" height="15.0" fill="rgb(252,33,27)" rx="2" ry="2" />
<text  x="931.51" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="496.2" y="1845" width="0.5" height="15.0" fill="rgb(233,176,47)" rx="2" ry="2" />
<text  x="499.22" y="1855.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="761.2" y="1653" width="0.5" height="15.0" fill="rgb(232,138,49)" rx="2" ry="2" />
<text  x="764.23" y="1663.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (2 samples, 0.04%)</title><rect x="594.4" y="1765" width="0.4" height="15.0" fill="rgb(249,187,26)" rx="2" ry="2" />
<text  x="597.39" y="1775.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="933.4" y="1861" width="0.4" height="15.0" fill="rgb(242,104,47)" rx="2" ry="2" />
<text  x="936.35" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="205.2" y="1893" width="0.3" height="15.0" fill="rgb(251,179,53)" rx="2" ry="2" />
<text  x="208.24" y="1903.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (3 samples, 0.06%)</title><rect x="789.2" y="1829" width="0.6" height="15.0" fill="rgb(240,21,26)" rx="2" ry="2" />
<text  x="792.18" y="1839.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.04%)</title><rect x="354.5" y="1781" width="0.4" height="15.0" fill="rgb(238,167,1)" rx="2" ry="2" />
<text  x="357.47" y="1791.5" ></text>
</g>
<g >
<title>__asan::AsanChunk::UsedSize (12 samples, 0.22%)</title><rect x="979.8" y="2037" width="2.6" height="15.0" fill="rgb(228,84,22)" rx="2" ry="2" />
<text  x="982.80" y="2047.5" ></text>
</g>
<g >
<title>THistoryHeuristics::GetCounterMove (1 samples, 0.02%)</title><rect x="258.7" y="1861" width="0.2" height="15.0" fill="rgb(217,82,50)" rx="2" ry="2" />
<text  x="261.72" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (61 samples, 1.14%)</title><rect x="943.9" y="965" width="13.4" height="15.0" fill="rgb(227,118,43)" rx="2" ry="2" />
<text  x="946.92" y="975.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (6 samples, 0.11%)</title><rect x="431.5" y="1781" width="1.3" height="15.0" fill="rgb(243,76,37)" rx="2" ry="2" />
<text  x="434.51" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (4 samples, 0.07%)</title><rect x="931.2" y="1877" width="0.8" height="15.0" fill="rgb(220,26,2)" rx="2" ry="2" />
<text  x="934.15" y="1887.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (5 samples, 0.09%)</title><rect x="1128.8" y="2053" width="1.1" height="15.0" fill="rgb(209,68,38)" rx="2" ry="2" />
<text  x="1131.81" y="2063.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="632.7" y="1829" width="0.2" height="15.0" fill="rgb(245,159,54)" rx="2" ry="2" />
<text  x="635.69" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="697.2" y="1717" width="0.4" height="15.0" fill="rgb(224,19,4)" rx="2" ry="2" />
<text  x="700.18" y="1727.5" ></text>
</g>
<g >
<title>__pthread_getspecific (1 samples, 0.02%)</title><rect x="452.0" y="1845" width="0.2" height="15.0" fill="rgb(209,150,3)" rx="2" ry="2" />
<text  x="454.98" y="1855.5" ></text>
</g>
<g >
<title>__pthread_getspecific (1 samples, 0.02%)</title><rect x="928.5" y="1845" width="0.2" height="15.0" fill="rgb(209,30,27)" rx="2" ry="2" />
<text  x="931.51" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (1 samples, 0.02%)</title><rect x="880.1" y="1845" width="0.2" height="15.0" fill="rgb(212,75,24)" rx="2" ry="2" />
<text  x="883.09" y="1855.5" ></text>
</g>
<g >
<title>IsCapture (6 samples, 0.11%)</title><rect x="273.5" y="1845" width="1.3" height="15.0" fill="rgb(220,176,3)" rx="2" ry="2" />
<text  x="276.47" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (22 samples, 0.41%)</title><rect x="732.6" y="1813" width="4.9" height="15.0" fill="rgb(249,45,40)" rx="2" ry="2" />
<text  x="735.62" y="1823.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.04%)</title><rect x="118.1" y="1797" width="0.4" height="15.0" fill="rgb(238,28,13)" rx="2" ry="2" />
<text  x="121.07" y="1807.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (6 samples, 0.11%)</title><rect x="653.4" y="1845" width="1.3" height="15.0" fill="rgb(221,226,23)" rx="2" ry="2" />
<text  x="656.38" y="1855.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="953.8" y="485" width="0.2" height="15.0" fill="rgb(213,87,42)" rx="2" ry="2" />
<text  x="956.82" y="495.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (1 samples, 0.02%)</title><rect x="586.9" y="1829" width="0.2" height="15.0" fill="rgb(243,30,12)" rx="2" ry="2" />
<text  x="589.90" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (3 samples, 0.06%)</title><rect x="234.1" y="1829" width="0.6" height="15.0" fill="rgb(220,134,38)" rx="2" ry="2" />
<text  x="237.07" y="1839.5" ></text>
</g>
<g >
<title>GetPieceType (7 samples, 0.13%)</title><rect x="370.8" y="1797" width="1.5" height="15.0" fill="rgb(230,123,28)" rx="2" ry="2" />
<text  x="373.76" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (4 samples, 0.07%)</title><rect x="206.3" y="1925" width="0.9" height="15.0" fill="rgb(225,69,29)" rx="2" ry="2" />
<text  x="209.34" y="1935.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="478.0" y="1813" width="0.2" height="15.0" fill="rgb(220,161,39)" rx="2" ry="2" />
<text  x="480.95" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (2 samples, 0.04%)</title><rect x="349.0" y="1813" width="0.4" height="15.0" fill="rgb(239,145,14)" rx="2" ry="2" />
<text  x="351.97" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.06%)</title><rect x="376.9" y="1781" width="0.7" height="15.0" fill="rgb(245,172,14)" rx="2" ry="2" />
<text  x="379.92" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="377.6" y="1765" width="0.2" height="15.0" fill="rgb(244,76,47)" rx="2" ry="2" />
<text  x="380.58" y="1775.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="222.0" y="1829" width="0.8" height="15.0" fill="rgb(250,139,36)" rx="2" ry="2" />
<text  x="224.96" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="754.2" y="1749" width="0.2" height="15.0" fill="rgb(247,8,40)" rx="2" ry="2" />
<text  x="757.19" y="1759.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="208.8" y="1861" width="0.2" height="15.0" fill="rgb(250,210,25)" rx="2" ry="2" />
<text  x="211.76" y="1871.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="218.9" y="1861" width="0.2" height="15.0" fill="rgb(233,118,35)" rx="2" ry="2" />
<text  x="221.88" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.04%)</title><rect x="208.3" y="1893" width="0.5" height="15.0" fill="rgb(216,129,51)" rx="2" ry="2" />
<text  x="211.32" y="1903.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="378.5" y="1781" width="0.2" height="15.0" fill="rgb(231,137,10)" rx="2" ry="2" />
<text  x="381.46" y="1791.5" ></text>
</g>
<g >
<title>__pthread_getspecific (1 samples, 0.02%)</title><rect x="697.8" y="1749" width="0.3" height="15.0" fill="rgb(247,142,39)" rx="2" ry="2" />
<text  x="700.84" y="1759.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="667.5" y="1797" width="0.2" height="15.0" fill="rgb(237,211,44)" rx="2" ry="2" />
<text  x="670.46" y="1807.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="174.9" y="1861" width="0.2" height="15.0" fill="rgb(213,163,11)" rx="2" ry="2" />
<text  x="177.86" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (45 samples, 0.84%)</title><rect x="943.9" y="485" width="9.9" height="15.0" fill="rgb(252,67,36)" rx="2" ry="2" />
<text  x="946.92" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (3 samples, 0.06%)</title><rect x="109.5" y="1813" width="0.6" height="15.0" fill="rgb(222,168,4)" rx="2" ry="2" />
<text  x="112.49" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (11 samples, 0.21%)</title><rect x="891.3" y="1845" width="2.4" height="15.0" fill="rgb(240,144,11)" rx="2" ry="2" />
<text  x="894.31" y="1855.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="302.5" y="1829" width="0.2" height="15.0" fill="rgb(207,113,0)" rx="2" ry="2" />
<text  x="305.52" y="1839.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="788.7" y="1813" width="0.3" height="15.0" fill="rgb(221,182,41)" rx="2" ry="2" />
<text  x="791.74" y="1823.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="920.1" y="1813" width="0.5" height="15.0" fill="rgb(238,11,27)" rx="2" ry="2" />
<text  x="923.15" y="1823.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="830.1" y="1797" width="0.2" height="15.0" fill="rgb(251,145,24)" rx="2" ry="2" />
<text  x="833.12" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::HasMatingMaterial (1 samples, 0.02%)</title><rect x="67.2" y="1845" width="0.2" height="15.0" fill="rgb(212,22,49)" rx="2" ry="2" />
<text  x="70.23" y="1855.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="788.3" y="1813" width="0.2" height="15.0" fill="rgb(246,122,45)" rx="2" ry="2" />
<text  x="791.30" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (34 samples, 0.63%)</title><rect x="662.2" y="1829" width="7.5" height="15.0" fill="rgb(215,156,46)" rx="2" ry="2" />
<text  x="665.18" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (4 samples, 0.07%)</title><rect x="205.5" y="1925" width="0.8" height="15.0" fill="rgb(227,47,7)" rx="2" ry="2" />
<text  x="208.46" y="1935.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (1 samples, 0.02%)</title><rect x="383.1" y="1765" width="0.2" height="15.0" fill="rgb(207,189,34)" rx="2" ry="2" />
<text  x="386.08" y="1775.5" ></text>
</g>
<g >
<title>TTranspositionTable::Insert (6 samples, 0.11%)</title><rect x="923.4" y="1877" width="1.4" height="15.0" fill="rgb(253,33,13)" rx="2" ry="2" />
<text  x="926.45" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.04%)</title><rect x="173.1" y="1845" width="0.4" height="15.0" fill="rgb(220,9,46)" rx="2" ry="2" />
<text  x="176.10" y="1855.5" ></text>
</g>
<g >
<title>CalcPSTScore (1 samples, 0.02%)</title><rect x="49.6" y="1813" width="0.2" height="15.0" fill="rgb(245,228,22)" rx="2" ry="2" />
<text  x="52.62" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.04%)</title><rect x="379.1" y="1781" width="0.5" height="15.0" fill="rgb(223,170,21)" rx="2" ry="2" />
<text  x="382.12" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (1 samples, 0.02%)</title><rect x="593.1" y="1781" width="0.2" height="15.0" fill="rgb(241,81,54)" rx="2" ry="2" />
<text  x="596.07" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="380.2" y="1733" width="0.2" height="15.0" fill="rgb(216,43,25)" rx="2" ry="2" />
<text  x="383.22" y="1743.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (14 samples, 0.26%)</title><rect x="846.4" y="1861" width="3.1" height="15.0" fill="rgb(220,39,33)" rx="2" ry="2" />
<text  x="849.41" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.04%)</title><rect x="83.7" y="1797" width="0.5" height="15.0" fill="rgb(242,68,54)" rx="2" ry="2" />
<text  x="86.74" y="1807.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="692.6" y="1797" width="0.2" height="15.0" fill="rgb(221,28,7)" rx="2" ry="2" />
<text  x="695.56" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (1,344 samples, 25.07%)</title><rect x="636.2" y="1893" width="295.8" height="15.0" fill="rgb(220,144,21)" rx="2" ry="2" />
<text  x="639.21" y="1903.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="220.9" y="1829" width="0.2" height="15.0" fill="rgb(250,66,35)" rx="2" ry="2" />
<text  x="223.86" y="1839.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="208.5" y="1861" width="0.3" height="15.0" fill="rgb(252,58,9)" rx="2" ry="2" />
<text  x="211.54" y="1871.5" ></text>
</g>
<g >
<title>__asan::AsanChunk::UsedSize (2 samples, 0.04%)</title><rect x="967.3" y="2021" width="0.4" height="15.0" fill="rgb(223,100,6)" rx="2" ry="2" />
<text  x="970.25" y="2031.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="206.1" y="1893" width="0.2" height="15.0" fill="rgb(245,83,21)" rx="2" ry="2" />
<text  x="209.12" y="1903.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="850.2" y="1829" width="0.8" height="15.0" fill="rgb(219,120,34)" rx="2" ry="2" />
<text  x="853.15" y="1839.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="816.3" y="1829" width="0.2" height="15.0" fill="rgb(210,185,23)" rx="2" ry="2" />
<text  x="819.26" y="1839.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="32.0" y="1861" width="0.2" height="15.0" fill="rgb(232,179,36)" rx="2" ry="2" />
<text  x="35.01" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6 samples, 0.11%)</title><rect x="231.0" y="1845" width="1.3" height="15.0" fill="rgb(216,214,17)" rx="2" ry="2" />
<text  x="233.99" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (1 samples, 0.02%)</title><rect x="952.7" y="341" width="0.2" height="15.0" fill="rgb(250,187,51)" rx="2" ry="2" />
<text  x="955.72" y="351.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.04%)</title><rect x="692.6" y="1813" width="0.4" height="15.0" fill="rgb(223,62,26)" rx="2" ry="2" />
<text  x="695.56" y="1823.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (1 samples, 0.02%)</title><rect x="206.1" y="1909" width="0.2" height="15.0" fill="rgb(230,81,0)" rx="2" ry="2" />
<text  x="209.12" y="1919.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (2 samples, 0.04%)</title><rect x="377.8" y="1781" width="0.4" height="15.0" fill="rgb(237,19,6)" rx="2" ry="2" />
<text  x="380.80" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="816.0" y="1781" width="0.3" height="15.0" fill="rgb(242,104,53)" rx="2" ry="2" />
<text  x="819.04" y="1791.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="32.0" y="1829" width="0.2" height="15.0" fill="rgb(248,58,19)" rx="2" ry="2" />
<text  x="35.01" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (1 samples, 0.02%)</title><rect x="203.9" y="1893" width="0.2" height="15.0" fill="rgb(252,60,31)" rx="2" ry="2" />
<text  x="206.92" y="1903.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (1 samples, 0.02%)</title><rect x="960.2" y="1525" width="0.2" height="15.0" fill="rgb(221,3,42)" rx="2" ry="2" />
<text  x="963.21" y="1535.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="763.7" y="1749" width="0.8" height="15.0" fill="rgb(226,72,16)" rx="2" ry="2" />
<text  x="766.65" y="1759.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (1 samples, 0.02%)</title><rect x="769.8" y="1765" width="0.2" height="15.0" fill="rgb(224,164,19)" rx="2" ry="2" />
<text  x="772.81" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.04%)</title><rect x="782.8" y="1765" width="0.4" height="15.0" fill="rgb(233,48,15)" rx="2" ry="2" />
<text  x="785.80" y="1775.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="45.9" y="1829" width="0.4" height="15.0" fill="rgb(221,159,32)" rx="2" ry="2" />
<text  x="48.88" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, false, true&gt;::operator (1 samples, 0.02%)</title><rect x="295.5" y="1845" width="0.2" height="15.0" fill="rgb(235,67,53)" rx="2" ry="2" />
<text  x="298.48" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, unsigned long, true&gt;::_S_equals (1 samples, 0.02%)</title><rect x="41.5" y="1813" width="0.2" height="15.0" fill="rgb(228,166,54)" rx="2" ry="2" />
<text  x="44.48" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="173.8" y="1829" width="0.2" height="15.0" fill="rgb(235,39,7)" rx="2" ry="2" />
<text  x="176.76" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 1.04%)</title><rect x="943.9" y="821" width="12.3" height="15.0" fill="rgb(231,23,39)" rx="2" ry="2" />
<text  x="946.92" y="831.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (1 samples, 0.02%)</title><rect x="497.8" y="1813" width="0.2" height="15.0" fill="rgb(231,168,40)" rx="2" ry="2" />
<text  x="500.76" y="1823.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="692.3" y="1797" width="0.3" height="15.0" fill="rgb(231,228,3)" rx="2" ry="2" />
<text  x="695.34" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (1 samples, 0.02%)</title><rect x="49.8" y="1813" width="0.3" height="15.0" fill="rgb(243,153,51)" rx="2" ry="2" />
<text  x="52.84" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (60 samples, 1.12%)</title><rect x="943.9" y="917" width="13.2" height="15.0" fill="rgb(242,133,21)" rx="2" ry="2" />
<text  x="946.92" y="927.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.04%)</title><rect x="153.7" y="1813" width="0.5" height="15.0" fill="rgb(227,26,18)" rx="2" ry="2" />
<text  x="156.73" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.04%)</title><rect x="23.9" y="1893" width="0.4" height="15.0" fill="rgb(240,68,15)" rx="2" ry="2" />
<text  x="26.87" y="1903.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (1 samples, 0.02%)</title><rect x="594.4" y="1749" width="0.2" height="15.0" fill="rgb(212,23,17)" rx="2" ry="2" />
<text  x="597.39" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (58 samples, 1.08%)</title><rect x="943.9" y="869" width="12.8" height="15.0" fill="rgb(218,135,17)" rx="2" ry="2" />
<text  x="946.92" y="879.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (10 samples, 0.19%)</title><rect x="893.7" y="1845" width="2.2" height="15.0" fill="rgb(219,224,41)" rx="2" ry="2" />
<text  x="896.73" y="1855.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="821.8" y="1845" width="0.2" height="15.0" fill="rgb(241,156,27)" rx="2" ry="2" />
<text  x="824.76" y="1855.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="758.6" y="1701" width="0.2" height="15.0" fill="rgb(249,160,48)" rx="2" ry="2" />
<text  x="761.59" y="1711.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="634.9" y="1877" width="0.2" height="15.0" fill="rgb(216,37,27)" rx="2" ry="2" />
<text  x="637.89" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="765.0" y="1733" width="0.2" height="15.0" fill="rgb(246,211,6)" rx="2" ry="2" />
<text  x="767.97" y="1743.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (4 samples, 0.07%)</title><rect x="47.0" y="1845" width="0.9" height="15.0" fill="rgb(231,156,40)" rx="2" ry="2" />
<text  x="49.98" y="1855.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="629.2" y="1861" width="0.2" height="15.0" fill="rgb(233,220,40)" rx="2" ry="2" />
<text  x="632.16" y="1871.5" ></text>
</g>
<g >
<title>THistoryHeuristics::Get (1 samples, 0.02%)</title><rect x="40.8" y="1861" width="0.2" height="15.0" fill="rgb(240,218,27)" rx="2" ry="2" />
<text  x="43.82" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (4 samples, 0.07%)</title><rect x="781.5" y="1765" width="0.9" height="15.0" fill="rgb(215,33,51)" rx="2" ry="2" />
<text  x="784.48" y="1775.5" ></text>
</g>
<g >
<title>CalcPSTScore (21 samples, 0.39%)</title><rect x="686.6" y="1845" width="4.6" height="15.0" fill="rgb(223,134,16)" rx="2" ry="2" />
<text  x="689.61" y="1855.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (2 samples, 0.04%)</title><rect x="233.4" y="1861" width="0.5" height="15.0" fill="rgb(228,212,45)" rx="2" ry="2" />
<text  x="236.41" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="757.3" y="1621" width="0.2" height="15.0" fill="rgb(237,36,15)" rx="2" ry="2" />
<text  x="760.27" y="1631.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.06%)</title><rect x="359.8" y="1797" width="0.6" height="15.0" fill="rgb(209,172,30)" rx="2" ry="2" />
<text  x="362.75" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (29 samples, 0.54%)</title><rect x="943.9" y="101" width="6.4" height="15.0" fill="rgb(206,9,37)" rx="2" ry="2" />
<text  x="946.92" y="111.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="698.3" y="1781" width="0.2" height="15.0" fill="rgb(251,99,23)" rx="2" ry="2" />
<text  x="701.28" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.04%)</title><rect x="32.5" y="1829" width="0.4" height="15.0" fill="rgb(211,13,28)" rx="2" ry="2" />
<text  x="35.45" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (5 samples, 0.09%)</title><rect x="935.8" y="1877" width="1.1" height="15.0" fill="rgb(240,57,0)" rx="2" ry="2" />
<text  x="938.78" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (36 samples, 0.67%)</title><rect x="943.9" y="261" width="7.9" height="15.0" fill="rgb(252,98,5)" rx="2" ry="2" />
<text  x="946.92" y="271.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="698.1" y="1765" width="0.2" height="15.0" fill="rgb(253,227,53)" rx="2" ry="2" />
<text  x="701.06" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (1 samples, 0.02%)</title><rect x="700.3" y="1797" width="0.2" height="15.0" fill="rgb(249,160,49)" rx="2" ry="2" />
<text  x="703.26" y="1807.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="635.3" y="1765" width="0.2" height="15.0" fill="rgb(247,91,8)" rx="2" ry="2" />
<text  x="638.33" y="1775.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (8 samples, 0.15%)</title><rect x="91.0" y="1797" width="1.8" height="15.0" fill="rgb(226,30,17)" rx="2" ry="2" />
<text  x="94.00" y="1807.5" ></text>
</g>
<g >
<title>std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;::pair&lt;lczero::Position const&amp;, 0ul, TTranspositionTable::TNode&amp;&amp;, 0ul&gt; (1 samples, 0.02%)</title><rect x="497.5" y="1781" width="0.3" height="15.0" fill="rgb(253,166,25)" rx="2" ry="2" />
<text  x="500.54" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (4 samples, 0.07%)</title><rect x="936.0" y="1861" width="0.9" height="15.0" fill="rgb(231,110,12)" rx="2" ry="2" />
<text  x="939.00" y="1871.5" ></text>
</g>
<g >
<title>GetPieceValue (1 samples, 0.02%)</title><rect x="364.6" y="1765" width="0.2" height="15.0" fill="rgb(238,117,24)" rx="2" ry="2" />
<text  x="367.59" y="1775.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="385.3" y="1749" width="0.2" height="15.0" fill="rgb(241,158,28)" rx="2" ry="2" />
<text  x="388.28" y="1759.5" ></text>
</g>
<g >
<title>__pthread_getspecific (3 samples, 0.06%)</title><rect x="552.6" y="1829" width="0.6" height="15.0" fill="rgb(228,99,32)" rx="2" ry="2" />
<text  x="555.57" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (2 samples, 0.04%)</title><rect x="204.1" y="1909" width="0.5" height="15.0" fill="rgb(215,135,47)" rx="2" ry="2" />
<text  x="207.14" y="1919.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.06%)</title><rect x="766.5" y="1749" width="0.7" height="15.0" fill="rgb(224,19,13)" rx="2" ry="2" />
<text  x="769.51" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (5 samples, 0.09%)</title><rect x="272.4" y="1829" width="1.1" height="15.0" fill="rgb(224,219,51)" rx="2" ry="2" />
<text  x="275.37" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.04%)</title><rect x="844.7" y="1829" width="0.4" height="15.0" fill="rgb(212,67,53)" rx="2" ry="2" />
<text  x="847.65" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="629.4" y="1829" width="0.2" height="15.0" fill="rgb(214,37,41)" rx="2" ry="2" />
<text  x="632.38" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (5 samples, 0.09%)</title><rect x="443.6" y="1797" width="1.1" height="15.0" fill="rgb(244,28,3)" rx="2" ry="2" />
<text  x="446.61" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (85 samples, 1.59%)</title><rect x="943.9" y="1749" width="18.7" height="15.0" fill="rgb(248,103,15)" rx="2" ry="2" />
<text  x="946.92" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (34 samples, 0.63%)</title><rect x="943.9" y="197" width="7.5" height="15.0" fill="rgb(209,7,45)" rx="2" ry="2" />
<text  x="946.92" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.07%)</title><rect x="634.0" y="1861" width="0.9" height="15.0" fill="rgb(251,30,34)" rx="2" ry="2" />
<text  x="637.01" y="1871.5" ></text>
</g>
<g >
<title>lczero::Position::Position (3 samples, 0.06%)</title><rect x="203.5" y="1909" width="0.6" height="15.0" fill="rgb(226,199,36)" rx="2" ry="2" />
<text  x="206.48" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (36 samples, 0.67%)</title><rect x="943.9" y="293" width="7.9" height="15.0" fill="rgb(219,187,20)" rx="2" ry="2" />
<text  x="946.92" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="50.1" y="1765" width="0.2" height="15.0" fill="rgb(233,170,33)" rx="2" ry="2" />
<text  x="53.06" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2 samples, 0.04%)</title><rect x="494.2" y="1813" width="0.5" height="15.0" fill="rgb(221,117,49)" rx="2" ry="2" />
<text  x="497.24" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (5 samples, 0.09%)</title><rect x="917.5" y="1845" width="1.1" height="15.0" fill="rgb(250,110,4)" rx="2" ry="2" />
<text  x="920.51" y="1855.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::insert_or_assign&lt;TTranspositionTable::TNode&gt; (8 samples, 0.15%)</title><rect x="496.7" y="1845" width="1.7" height="15.0" fill="rgb(246,68,29)" rx="2" ry="2" />
<text  x="499.66" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (82 samples, 1.53%)</title><rect x="1008.0" y="2005" width="18.0" height="15.0" fill="rgb(207,36,36)" rx="2" ry="2" />
<text  x="1010.97" y="2015.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1 samples, 0.02%)</title><rect x="635.5" y="1781" width="0.3" height="15.0" fill="rgb(229,46,19)" rx="2" ry="2" />
<text  x="638.55" y="1791.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="605.2" y="1845" width="0.4" height="15.0" fill="rgb(209,112,48)" rx="2" ry="2" />
<text  x="608.17" y="1855.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="735.9" y="1781" width="0.2" height="15.0" fill="rgb(251,204,22)" rx="2" ry="2" />
<text  x="738.92" y="1791.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="938.6" y="1893" width="0.3" height="15.0" fill="rgb(236,50,54)" rx="2" ry="2" />
<text  x="941.64" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (18 samples, 0.34%)</title><rect x="704.7" y="1813" width="3.9" height="15.0" fill="rgb(244,213,54)" rx="2" ry="2" />
<text  x="707.66" y="1823.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="301.6" y="1845" width="0.3" height="15.0" fill="rgb(239,215,19)" rx="2" ry="2" />
<text  x="304.64" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (38 samples, 0.71%)</title><rect x="481.9" y="1781" width="8.4" height="15.0" fill="rgb(247,137,0)" rx="2" ry="2" />
<text  x="484.91" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::QuarantineCache&lt;__asan::QuarantineCallback&gt;::Enqueue (11 samples, 0.21%)</title><rect x="990.1" y="2037" width="2.5" height="15.0" fill="rgb(235,180,53)" rx="2" ry="2" />
<text  x="993.14" y="2047.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="29.1" y="1829" width="0.3" height="15.0" fill="rgb(213,156,15)" rx="2" ry="2" />
<text  x="32.15" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (154 samples, 2.87%)</title><rect x="500.0" y="1861" width="33.9" height="15.0" fill="rgb(232,218,35)" rx="2" ry="2" />
<text  x="502.96" y="1871.5" >lc..</text>
</g>
<g >
<title>__lsan::CollectLeaksCb (1 samples, 0.02%)</title><rect x="967.9" y="2021" width="0.2" height="15.0" fill="rgb(243,162,21)" rx="2" ry="2" />
<text  x="970.91" y="2031.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (5 samples, 0.09%)</title><rect x="638.6" y="1845" width="1.1" height="15.0" fill="rgb(219,208,39)" rx="2" ry="2" />
<text  x="641.63" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (4 samples, 0.07%)</title><rect x="932.3" y="1877" width="0.8" height="15.0" fill="rgb(244,37,27)" rx="2" ry="2" />
<text  x="935.25" y="1887.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="633.1" y="1829" width="0.2" height="15.0" fill="rgb(209,117,16)" rx="2" ry="2" />
<text  x="636.13" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="595.7" y="1845" width="0.2" height="15.0" fill="rgb(251,134,43)" rx="2" ry="2" />
<text  x="598.71" y="1855.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.04%)</title><rect x="335.1" y="1845" width="0.4" height="15.0" fill="rgb(212,73,13)" rx="2" ry="2" />
<text  x="338.10" y="1855.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (1 samples, 0.02%)</title><rect x="450.9" y="1845" width="0.2" height="15.0" fill="rgb(225,43,1)" rx="2" ry="2" />
<text  x="453.88" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (168 samples, 3.13%)</title><rect x="258.9" y="1861" width="37.0" height="15.0" fill="rgb(244,54,9)" rx="2" ry="2" />
<text  x="261.94" y="1871.5" >TSe..</text>
</g>
<g >
<title>[unknown] (78 samples, 1.45%)</title><rect x="943.9" y="1605" width="17.2" height="15.0" fill="rgb(214,73,7)" rx="2" ry="2" />
<text  x="946.92" y="1615.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (12 samples, 0.22%)</title><rect x="928.5" y="1877" width="2.7" height="15.0" fill="rgb(254,226,3)" rx="2" ry="2" />
<text  x="931.51" y="1887.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::insert_or_assign&lt;TTranspositionTable::TNode&gt; (2 samples, 0.04%)</title><rect x="192.2" y="1877" width="0.5" height="15.0" fill="rgb(240,36,49)" rx="2" ry="2" />
<text  x="195.25" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (1 samples, 0.02%)</title><rect x="587.6" y="1829" width="0.2" height="15.0" fill="rgb(236,24,8)" rx="2" ry="2" />
<text  x="590.56" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (22 samples, 0.41%)</title><rect x="218.0" y="1893" width="4.8" height="15.0" fill="rgb(233,208,17)" rx="2" ry="2" />
<text  x="221.00" y="1903.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%)</title><rect x="553.2" y="1829" width="1.3" height="15.0" fill="rgb(225,223,36)" rx="2" ry="2" />
<text  x="556.23" y="1839.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="34.4" y="1861" width="0.5" height="15.0" fill="rgb(228,196,12)" rx="2" ry="2" />
<text  x="37.43" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.04%)</title><rect x="587.1" y="1829" width="0.5" height="15.0" fill="rgb(213,78,24)" rx="2" ry="2" />
<text  x="590.12" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (3 samples, 0.06%)</title><rect x="635.1" y="1877" width="0.7" height="15.0" fill="rgb(229,39,13)" rx="2" ry="2" />
<text  x="638.11" y="1887.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="364.4" y="1765" width="0.2" height="15.0" fill="rgb(230,103,8)" rx="2" ry="2" />
<text  x="367.37" y="1775.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (22 samples, 0.41%)</title><rect x="213.2" y="1893" width="4.8" height="15.0" fill="rgb(241,186,10)" rx="2" ry="2" />
<text  x="216.16" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.04%)</title><rect x="635.8" y="1845" width="0.4" height="15.0" fill="rgb(206,94,20)" rx="2" ry="2" />
<text  x="638.77" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="205.2" y="1877" width="0.3" height="15.0" fill="rgb(205,97,11)" rx="2" ry="2" />
<text  x="208.24" y="1887.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="698.9" y="1813" width="0.3" height="15.0" fill="rgb(206,154,16)" rx="2" ry="2" />
<text  x="701.94" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;std::array&lt;std::array&lt;int, 64ul&gt;, 6ul&gt;, 2ul&gt;::at (1 samples, 0.02%)</title><rect x="676.3" y="1829" width="0.2" height="15.0" fill="rgb(212,11,15)" rx="2" ry="2" />
<text  x="679.27" y="1839.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (5 samples, 0.09%)</title><rect x="256.7" y="1845" width="1.1" height="15.0" fill="rgb(250,29,17)" rx="2" ry="2" />
<text  x="259.74" y="1855.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (65 samples, 1.21%)</title><rect x="118.7" y="1829" width="14.3" height="15.0" fill="rgb(245,198,40)" rx="2" ry="2" />
<text  x="121.73" y="1839.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (10 samples, 0.19%)</title><rect x="90.6" y="1813" width="2.2" height="15.0" fill="rgb(221,127,31)" rx="2" ry="2" />
<text  x="93.56" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.07%)</title><rect x="867.5" y="1829" width="0.9" height="15.0" fill="rgb(208,227,22)" rx="2" ry="2" />
<text  x="870.54" y="1839.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (4 samples, 0.07%)</title><rect x="83.3" y="1829" width="0.9" height="15.0" fill="rgb(231,223,29)" rx="2" ry="2" />
<text  x="86.30" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="613.1" y="1877" width="0.2" height="15.0" fill="rgb(249,225,45)" rx="2" ry="2" />
<text  x="616.10" y="1887.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (4 samples, 0.07%)</title><rect x="690.4" y="1829" width="0.8" height="15.0" fill="rgb(209,189,47)" rx="2" ry="2" />
<text  x="693.35" y="1839.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (23 samples, 0.43%)</title><rect x="1116.5" y="2053" width="5.0" height="15.0" fill="rgb(230,110,32)" rx="2" ry="2" />
<text  x="1119.48" y="2063.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.04%)</title><rect x="762.1" y="1653" width="0.4" height="15.0" fill="rgb(213,95,3)" rx="2" ry="2" />
<text  x="765.11" y="1663.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="88.4" y="1765" width="0.2" height="15.0" fill="rgb(205,76,10)" rx="2" ry="2" />
<text  x="91.36" y="1775.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (52 samples, 0.97%)</title><rect x="161.7" y="1845" width="11.4" height="15.0" fill="rgb(211,88,1)" rx="2" ry="2" />
<text  x="164.65" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (3 samples, 0.06%)</title><rect x="379.8" y="1797" width="0.6" height="15.0" fill="rgb(225,6,31)" rx="2" ry="2" />
<text  x="382.78" y="1807.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="269.5" y="1813" width="0.2" height="15.0" fill="rgb(241,161,38)" rx="2" ry="2" />
<text  x="272.51" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="366.6" y="1797" width="0.2" height="15.0" fill="rgb(237,46,32)" rx="2" ry="2" />
<text  x="369.58" y="1807.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="87.7" y="1749" width="0.2" height="15.0" fill="rgb(209,14,7)" rx="2" ry="2" />
<text  x="90.70" y="1759.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="302.1" y="1797" width="0.2" height="15.0" fill="rgb(212,95,32)" rx="2" ry="2" />
<text  x="305.08" y="1807.5" ></text>
</g>
<g >
<title>GetFenBestMove (836 samples, 15.59%)</title><rect x="21.4" y="1989" width="184.1" height="15.0" fill="rgb(243,68,41)" rx="2" ry="2" />
<text  x="24.45" y="1999.5" >GetFenBestMove</text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (42 samples, 0.78%)</title><rect x="432.8" y="1797" width="9.3" height="15.0" fill="rgb(233,214,16)" rx="2" ry="2" />
<text  x="435.83" y="1807.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="752.4" y="1781" width="0.2" height="15.0" fill="rgb(208,56,45)" rx="2" ry="2" />
<text  x="755.42" y="1791.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="32.9" y="1813" width="0.2" height="15.0" fill="rgb(210,150,29)" rx="2" ry="2" />
<text  x="35.89" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (2 samples, 0.04%)</title><rect x="204.1" y="1877" width="0.5" height="15.0" fill="rgb(206,151,1)" rx="2" ry="2" />
<text  x="207.14" y="1887.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (3 samples, 0.06%)</title><rect x="187.6" y="1829" width="0.7" height="15.0" fill="rgb(223,26,21)" rx="2" ry="2" />
<text  x="190.63" y="1839.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="935.8" y="1861" width="0.2" height="15.0" fill="rgb(236,71,28)" rx="2" ry="2" />
<text  x="938.78" y="1871.5" ></text>
</g>
<g >
<title>GetPieceType (6 samples, 0.11%)</title><rect x="745.4" y="1797" width="1.3" height="15.0" fill="rgb(217,183,1)" rx="2" ry="2" />
<text  x="748.38" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (51 samples, 0.95%)</title><rect x="943.9" y="677" width="11.2" height="15.0" fill="rgb(225,173,2)" rx="2" ry="2" />
<text  x="946.92" y="687.5" ></text>
</g>
<g >
<title>IsCapture (6 samples, 0.11%)</title><rect x="362.2" y="1829" width="1.3" height="15.0" fill="rgb(244,65,40)" rx="2" ry="2" />
<text  x="365.17" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="32.9" y="1781" width="0.2" height="15.0" fill="rgb(243,167,22)" rx="2" ry="2" />
<text  x="35.89" y="1791.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (5 samples, 0.09%)</title><rect x="211.8" y="1877" width="1.1" height="15.0" fill="rgb(212,58,0)" rx="2" ry="2" />
<text  x="214.84" y="1887.5" ></text>
</g>
<g >
<title>__asan_memset (1 samples, 0.02%)</title><rect x="771.6" y="1781" width="0.2" height="15.0" fill="rgb(224,179,37)" rx="2" ry="2" />
<text  x="774.57" y="1791.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="22.5" y="1877" width="0.3" height="15.0" fill="rgb(246,137,6)" rx="2" ry="2" />
<text  x="25.55" y="1887.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (7 samples, 0.13%)</title><rect x="349.4" y="1813" width="1.5" height="15.0" fill="rgb(232,187,30)" rx="2" ry="2" />
<text  x="352.41" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_begin (1 samples, 0.02%)</title><rect x="767.4" y="1749" width="0.2" height="15.0" fill="rgb(210,214,3)" rx="2" ry="2" />
<text  x="770.39" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (1 samples, 0.02%)</title><rect x="228.1" y="1813" width="0.2" height="15.0" fill="rgb(249,73,29)" rx="2" ry="2" />
<text  x="231.13" y="1823.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="630.9" y="1893" width="0.2" height="15.0" fill="rgb(244,145,45)" rx="2" ry="2" />
<text  x="633.93" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (97 samples, 1.81%)</title><rect x="943.9" y="1973" width="21.4" height="15.0" fill="rgb(213,96,34)" rx="2" ry="2" />
<text  x="946.92" y="1983.5" >[..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.04%)</title><rect x="939.1" y="1957" width="0.4" height="15.0" fill="rgb(208,188,22)" rx="2" ry="2" />
<text  x="942.08" y="1967.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (2 samples, 0.04%)</title><rect x="610.9" y="1861" width="0.4" height="15.0" fill="rgb(215,28,20)" rx="2" ry="2" />
<text  x="613.90" y="1871.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="304.5" y="1813" width="0.2" height="15.0" fill="rgb(214,122,24)" rx="2" ry="2" />
<text  x="307.50" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (12 samples, 0.22%)</title><rect x="546.6" y="1845" width="2.7" height="15.0" fill="rgb(232,170,49)" rx="2" ry="2" />
<text  x="549.62" y="1855.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (2 samples, 0.04%)</title><rect x="494.7" y="1829" width="0.4" height="15.0" fill="rgb(244,170,14)" rx="2" ry="2" />
<text  x="497.68" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (5 samples, 0.09%)</title><rect x="734.6" y="1797" width="1.1" height="15.0" fill="rgb(253,214,39)" rx="2" ry="2" />
<text  x="737.60" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.07%)</title><rect x="494.7" y="1845" width="0.9" height="15.0" fill="rgb(240,169,31)" rx="2" ry="2" />
<text  x="497.68" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (3 samples, 0.06%)</title><rect x="925.2" y="1845" width="0.7" height="15.0" fill="rgb(221,227,3)" rx="2" ry="2" />
<text  x="928.21" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (67 samples, 1.25%)</title><rect x="993.2" y="2005" width="14.8" height="15.0" fill="rgb(225,46,44)" rx="2" ry="2" />
<text  x="996.22" y="2015.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="88.4" y="1749" width="0.2" height="15.0" fill="rgb(236,41,21)" rx="2" ry="2" />
<text  x="91.36" y="1759.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="632.0" y="1893" width="0.2" height="15.0" fill="rgb(217,101,52)" rx="2" ry="2" />
<text  x="635.03" y="1903.5" ></text>
</g>
<g >
<title>__pthread_getspecific (1 samples, 0.02%)</title><rect x="430.6" y="1781" width="0.2" height="15.0" fill="rgb(213,8,20)" rx="2" ry="2" />
<text  x="433.63" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (55 samples, 1.03%)</title><rect x="943.9" y="773" width="12.1" height="15.0" fill="rgb(254,201,51)" rx="2" ry="2" />
<text  x="946.92" y="783.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (6 samples, 0.11%)</title><rect x="108.2" y="1813" width="1.3" height="15.0" fill="rgb(238,225,22)" rx="2" ry="2" />
<text  x="111.17" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (6 samples, 0.11%)</title><rect x="79.6" y="1829" width="1.3" height="15.0" fill="rgb(218,40,28)" rx="2" ry="2" />
<text  x="82.55" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (1 samples, 0.02%)</title><rect x="198.0" y="1861" width="0.2" height="15.0" fill="rgb(241,33,9)" rx="2" ry="2" />
<text  x="200.97" y="1871.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (4 samples, 0.07%)</title><rect x="612.4" y="1893" width="0.9" height="15.0" fill="rgb(217,24,46)" rx="2" ry="2" />
<text  x="615.44" y="1903.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="220.0" y="1797" width="0.2" height="15.0" fill="rgb(208,180,37)" rx="2" ry="2" />
<text  x="222.98" y="1807.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2 samples, 0.04%)</title><rect x="928.7" y="1829" width="0.5" height="15.0" fill="rgb(230,96,19)" rx="2" ry="2" />
<text  x="931.73" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (54 samples, 1.01%)</title><rect x="120.9" y="1797" width="11.9" height="15.0" fill="rgb(247,175,11)" rx="2" ry="2" />
<text  x="123.93" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.04%)</title><rect x="763.7" y="1733" width="0.4" height="15.0" fill="rgb(233,217,32)" rx="2" ry="2" />
<text  x="766.65" y="1743.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="220.0" y="1765" width="0.2" height="15.0" fill="rgb(216,217,25)" rx="2" ry="2" />
<text  x="222.98" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, unsigned long, true&gt;::_S_equals (1 samples, 0.02%)</title><rect x="230.3" y="1813" width="0.2" height="15.0" fill="rgb(249,29,17)" rx="2" ry="2" />
<text  x="233.33" y="1823.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (6 samples, 0.11%)</title><rect x="45.7" y="1861" width="1.3" height="15.0" fill="rgb(220,110,43)" rx="2" ry="2" />
<text  x="48.66" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (180 samples, 3.36%)</title><rect x="1142.0" y="2053" width="39.6" height="15.0" fill="rgb(242,48,51)" rx="2" ry="2" />
<text  x="1145.02" y="2063.5" >__s..</text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="629.6" y="1925" width="0.2" height="15.0" fill="rgb(208,116,41)" rx="2" ry="2" />
<text  x="632.60" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (4 samples, 0.07%)</title><rect x="819.8" y="1797" width="0.9" height="15.0" fill="rgb(245,202,6)" rx="2" ry="2" />
<text  x="822.78" y="1807.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (24 samples, 0.45%)</title><rect x="732.4" y="1829" width="5.3" height="15.0" fill="rgb(244,214,50)" rx="2" ry="2" />
<text  x="735.40" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (1 samples, 0.02%)</title><rect x="89.2" y="1765" width="0.3" height="15.0" fill="rgb(212,149,14)" rx="2" ry="2" />
<text  x="92.24" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (3 samples, 0.06%)</title><rect x="178.2" y="1845" width="0.6" height="15.0" fill="rgb(212,76,23)" rx="2" ry="2" />
<text  x="181.16" y="1855.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="320.1" y="1845" width="0.3" height="15.0" fill="rgb(209,115,48)" rx="2" ry="2" />
<text  x="323.13" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;lczero::Move, 64ul&gt;::at (2 samples, 0.04%)</title><rect x="277.0" y="1829" width="0.4" height="15.0" fill="rgb(248,146,0)" rx="2" ry="2" />
<text  x="279.99" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (17 samples, 0.32%)</title><rect x="16.6" y="2005" width="3.7" height="15.0" fill="rgb(238,155,32)" rx="2" ry="2" />
<text  x="19.60" y="2015.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (4 samples, 0.07%)</title><rect x="151.7" y="1829" width="0.9" height="15.0" fill="rgb(251,99,6)" rx="2" ry="2" />
<text  x="154.75" y="1839.5" ></text>
</g>
<g >
<title>__asan_memcpy (1 samples, 0.02%)</title><rect x="89.5" y="1765" width="0.2" height="15.0" fill="rgb(221,143,4)" rx="2" ry="2" />
<text  x="92.46" y="1775.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.09%)</title><rect x="478.6" y="1813" width="1.1" height="15.0" fill="rgb(224,28,30)" rx="2" ry="2" />
<text  x="481.61" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="782.8" y="1781" width="0.4" height="15.0" fill="rgb(215,15,45)" rx="2" ry="2" />
<text  x="785.80" y="1791.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="266.2" y="1797" width="0.4" height="15.0" fill="rgb(220,13,23)" rx="2" ry="2" />
<text  x="269.21" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (4 samples, 0.07%)</title><rect x="208.1" y="1909" width="0.9" height="15.0" fill="rgb(247,97,7)" rx="2" ry="2" />
<text  x="211.10" y="1919.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="634.9" y="1861" width="0.2" height="15.0" fill="rgb(230,88,28)" rx="2" ry="2" />
<text  x="637.89" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (89 samples, 1.66%)</title><rect x="750.7" y="1813" width="19.6" height="15.0" fill="rgb(251,22,35)" rx="2" ry="2" />
<text  x="753.66" y="1823.5" ></text>
</g>
<g >
<title>IsCapture (2 samples, 0.04%)</title><rect x="376.5" y="1813" width="0.4" height="15.0" fill="rgb(219,186,26)" rx="2" ry="2" />
<text  x="379.48" y="1823.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="958.4" y="1237" width="0.3" height="15.0" fill="rgb(209,96,18)" rx="2" ry="2" />
<text  x="961.45" y="1247.5" ></text>
</g>
<g >
<title>Evaluate (1 samples, 0.02%)</title><rect x="352.3" y="1829" width="0.2" height="15.0" fill="rgb(243,144,12)" rx="2" ry="2" />
<text  x="355.27" y="1839.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="47.0" y="1829" width="0.4" height="15.0" fill="rgb(254,99,23)" rx="2" ry="2" />
<text  x="49.98" y="1839.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="592.2" y="1797" width="0.2" height="15.0" fill="rgb(240,195,13)" rx="2" ry="2" />
<text  x="595.19" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_insert_node (3 samples, 0.06%)</title><rect x="916.8" y="1845" width="0.7" height="15.0" fill="rgb(215,194,31)" rx="2" ry="2" />
<text  x="919.85" y="1855.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="757.9" y="1701" width="0.2" height="15.0" fill="rgb(253,107,39)" rx="2" ry="2" />
<text  x="760.93" y="1711.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (34 samples, 0.63%)</title><rect x="378.2" y="1813" width="7.5" height="15.0" fill="rgb(219,228,15)" rx="2" ry="2" />
<text  x="381.24" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="755.3" y="1749" width="0.2" height="15.0" fill="rgb(254,77,50)" rx="2" ry="2" />
<text  x="758.29" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.09%)</title><rect x="766.1" y="1781" width="1.1" height="15.0" fill="rgb(236,45,43)" rx="2" ry="2" />
<text  x="769.07" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (1 samples, 0.02%)</title><rect x="46.8" y="1829" width="0.2" height="15.0" fill="rgb(217,172,9)" rx="2" ry="2" />
<text  x="49.76" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::kings (1 samples, 0.02%)</title><rect x="739.9" y="1765" width="0.2" height="15.0" fill="rgb(238,92,41)" rx="2" ry="2" />
<text  x="742.88" y="1775.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (1 samples, 0.02%)</title><rect x="20.6" y="1925" width="0.2" height="15.0" fill="rgb(252,15,41)" rx="2" ry="2" />
<text  x="23.57" y="1935.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (11 samples, 0.21%)</title><rect x="317.7" y="1797" width="2.4" height="15.0" fill="rgb(231,4,2)" rx="2" ry="2" />
<text  x="320.71" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.02%)</title><rect x="816.9" y="1813" width="0.2" height="15.0" fill="rgb(241,157,35)" rx="2" ry="2" />
<text  x="819.92" y="1823.5" ></text>
</g>
<g >
<title>CalcPSTScore (1 samples, 0.02%)</title><rect x="233.9" y="1845" width="0.2" height="15.0" fill="rgb(233,47,39)" rx="2" ry="2" />
<text  x="236.85" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (40 samples, 0.75%)</title><rect x="84.2" y="1845" width="8.8" height="15.0" fill="rgb(254,103,17)" rx="2" ry="2" />
<text  x="87.18" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (2 samples, 0.04%)</title><rect x="749.1" y="1781" width="0.5" height="15.0" fill="rgb(244,128,16)" rx="2" ry="2" />
<text  x="752.12" y="1791.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%)</title><rect x="587.8" y="1829" width="1.1" height="15.0" fill="rgb(247,45,35)" rx="2" ry="2" />
<text  x="590.78" y="1839.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (4 samples, 0.07%)</title><rect x="752.6" y="1781" width="0.9" height="15.0" fill="rgb(244,131,30)" rx="2" ry="2" />
<text  x="755.65" y="1791.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (303 samples, 5.65%)</title><rect x="1035.5" y="2053" width="66.7" height="15.0" fill="rgb(236,183,47)" rx="2" ry="2" />
<text  x="1038.48" y="2063.5" >__asan:..</text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="32.5" y="1797" width="0.2" height="15.0" fill="rgb(232,94,24)" rx="2" ry="2" />
<text  x="35.45" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, unsigned long, true&gt;::_S_equals (1 samples, 0.02%)</title><rect x="750.4" y="1749" width="0.3" height="15.0" fill="rgb(254,191,28)" rx="2" ry="2" />
<text  x="753.44" y="1759.5" ></text>
</g>
<g >
<title>CalcPSTScore (65 samples, 1.21%)</title><rect x="67.9" y="1845" width="14.3" height="15.0" fill="rgb(224,41,47)" rx="2" ry="2" />
<text  x="70.89" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (6 samples, 0.11%)</title><rect x="80.9" y="1829" width="1.3" height="15.0" fill="rgb(247,156,14)" rx="2" ry="2" />
<text  x="83.87" y="1839.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="176.2" y="1877" width="0.2" height="15.0" fill="rgb(218,38,2)" rx="2" ry="2" />
<text  x="179.18" y="1887.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="629.6" y="1893" width="0.2" height="15.0" fill="rgb(228,216,25)" rx="2" ry="2" />
<text  x="632.60" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (41 samples, 0.76%)</title><rect x="943.9" y="357" width="9.0" height="15.0" fill="rgb(219,222,34)" rx="2" ry="2" />
<text  x="946.92" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="926.1" y="1845" width="0.2" height="15.0" fill="rgb(253,33,7)" rx="2" ry="2" />
<text  x="929.09" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (78 samples, 1.45%)</title><rect x="943.9" y="1653" width="17.2" height="15.0" fill="rgb(223,111,44)" rx="2" ry="2" />
<text  x="946.92" y="1663.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="44.6" y="1845" width="0.2" height="15.0" fill="rgb(211,83,45)" rx="2" ry="2" />
<text  x="47.56" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::BlockingMutex::Lock (1 samples, 0.02%)</title><rect x="989.9" y="2037" width="0.2" height="15.0" fill="rgb(243,152,42)" rx="2" ry="2" />
<text  x="992.92" y="2047.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2 samples, 0.04%)</title><rect x="358.9" y="1813" width="0.4" height="15.0" fill="rgb(242,165,37)" rx="2" ry="2" />
<text  x="361.87" y="1823.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (6 samples, 0.11%)</title><rect x="53.4" y="1845" width="1.3" height="15.0" fill="rgb(245,26,30)" rx="2" ry="2" />
<text  x="56.36" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (5 samples, 0.09%)</title><rect x="220.6" y="1861" width="1.1" height="15.0" fill="rgb(252,197,37)" rx="2" ry="2" />
<text  x="223.64" y="1871.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (9 samples, 0.17%)</title><rect x="185.6" y="1829" width="2.0" height="15.0" fill="rgb(241,105,32)" rx="2" ry="2" />
<text  x="188.65" y="1839.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="198.2" y="1861" width="0.2" height="15.0" fill="rgb(207,54,17)" rx="2" ry="2" />
<text  x="201.19" y="1871.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.07%)</title><rect x="898.6" y="1829" width="0.9" height="15.0" fill="rgb(240,105,1)" rx="2" ry="2" />
<text  x="901.58" y="1839.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (1 samples, 0.02%)</title><rect x="207.0" y="1845" width="0.2" height="15.0" fill="rgb(226,80,41)" rx="2" ry="2" />
<text  x="210.00" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (4 samples, 0.07%)</title><rect x="697.2" y="1765" width="0.9" height="15.0" fill="rgb(240,112,43)" rx="2" ry="2" />
<text  x="700.18" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (73 samples, 1.36%)</title><rect x="943.9" y="1477" width="16.1" height="15.0" fill="rgb(241,183,14)" rx="2" ry="2" />
<text  x="946.92" y="1487.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="205.2" y="1909" width="0.3" height="15.0" fill="rgb(252,47,8)" rx="2" ry="2" />
<text  x="208.24" y="1919.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="303.4" y="1813" width="0.4" height="15.0" fill="rgb(210,193,11)" rx="2" ry="2" />
<text  x="306.40" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (1 samples, 0.02%)</title><rect x="211.6" y="1861" width="0.2" height="15.0" fill="rgb(250,111,19)" rx="2" ry="2" />
<text  x="214.62" y="1871.5" ></text>
</g>
<g >
<title>__lsan::LsanMetadata::allocated (2 samples, 0.04%)</title><rect x="986.8" y="2037" width="0.5" height="15.0" fill="rgb(238,192,19)" rx="2" ry="2" />
<text  x="989.84" y="2047.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (1 samples, 0.02%)</title><rect x="366.6" y="1765" width="0.2" height="15.0" fill="rgb(237,33,29)" rx="2" ry="2" />
<text  x="369.58" y="1775.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.04%)</title><rect x="267.1" y="1813" width="0.4" height="15.0" fill="rgb(243,117,51)" rx="2" ry="2" />
<text  x="270.09" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;lczero::Move, 64ul&gt;::at (1 samples, 0.02%)</title><rect x="295.7" y="1845" width="0.2" height="15.0" fill="rgb(240,18,27)" rx="2" ry="2" />
<text  x="298.70" y="1855.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (40 samples, 0.75%)</title><rect x="807.2" y="1781" width="8.8" height="15.0" fill="rgb(246,193,53)" rx="2" ry="2" />
<text  x="810.23" y="1791.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (2 samples, 0.04%)</title><rect x="93.6" y="1845" width="0.5" height="15.0" fill="rgb(221,108,5)" rx="2" ry="2" />
<text  x="96.64" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="938.0" y="1829" width="0.2" height="15.0" fill="rgb(213,107,27)" rx="2" ry="2" />
<text  x="940.98" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.04%)</title><rect x="769.4" y="1749" width="0.4" height="15.0" fill="rgb(250,12,49)" rx="2" ry="2" />
<text  x="772.37" y="1759.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.04%)</title><rect x="733.1" y="1781" width="0.4" height="15.0" fill="rgb(233,32,24)" rx="2" ry="2" />
<text  x="736.06" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (3 samples, 0.06%)</title><rect x="175.1" y="1861" width="0.6" height="15.0" fill="rgb(217,90,36)" rx="2" ry="2" />
<text  x="178.08" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (8 samples, 0.15%)</title><rect x="158.8" y="1813" width="1.8" height="15.0" fill="rgb(251,40,13)" rx="2" ry="2" />
<text  x="161.79" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.06%)</title><rect x="761.0" y="1701" width="0.7" height="15.0" fill="rgb(228,199,11)" rx="2" ry="2" />
<text  x="764.01" y="1711.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="671.4" y="1813" width="0.2" height="15.0" fill="rgb(239,192,10)" rx="2" ry="2" />
<text  x="674.43" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.04%)</title><rect x="616.4" y="1861" width="0.4" height="15.0" fill="rgb(251,22,24)" rx="2" ry="2" />
<text  x="619.40" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (3 samples, 0.06%)</title><rect x="32.5" y="1861" width="0.6" height="15.0" fill="rgb(226,88,0)" rx="2" ry="2" />
<text  x="35.45" y="1871.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.04%)</title><rect x="223.9" y="1861" width="0.5" height="15.0" fill="rgb(213,223,40)" rx="2" ry="2" />
<text  x="226.95" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (4 samples, 0.07%)</title><rect x="33.6" y="1861" width="0.8" height="15.0" fill="rgb(209,194,20)" rx="2" ry="2" />
<text  x="36.55" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (7 samples, 0.13%)</title><rect x="397.4" y="1765" width="1.5" height="15.0" fill="rgb(243,154,28)" rx="2" ry="2" />
<text  x="400.39" y="1775.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (1 samples, 0.02%)</title><rect x="754.4" y="1781" width="0.2" height="15.0" fill="rgb(248,46,20)" rx="2" ry="2" />
<text  x="757.41" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (3 samples, 0.06%)</title><rect x="759.0" y="1717" width="0.7" height="15.0" fill="rgb(212,57,44)" rx="2" ry="2" />
<text  x="762.03" y="1727.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (2 samples, 0.04%)</title><rect x="452.2" y="1845" width="0.4" height="15.0" fill="rgb(247,10,39)" rx="2" ry="2" />
<text  x="455.20" y="1855.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="768.7" y="1749" width="0.2" height="15.0" fill="rgb(244,62,11)" rx="2" ry="2" />
<text  x="771.71" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="612.9" y="1845" width="0.2" height="15.0" fill="rgb(238,196,23)" rx="2" ry="2" />
<text  x="615.88" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (22 samples, 0.41%)</title><rect x="197.5" y="1893" width="4.9" height="15.0" fill="rgb(220,54,35)" rx="2" ry="2" />
<text  x="200.53" y="1903.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="191.4" y="1829" width="0.2" height="15.0" fill="rgb(245,144,50)" rx="2" ry="2" />
<text  x="194.37" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (49 samples, 0.91%)</title><rect x="943.9" y="629" width="10.8" height="15.0" fill="rgb(220,168,49)" rx="2" ry="2" />
<text  x="946.92" y="639.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.04%)</title><rect x="467.4" y="1813" width="0.4" height="15.0" fill="rgb(250,102,40)" rx="2" ry="2" />
<text  x="470.38" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (15 samples, 0.28%)</title><rect x="817.4" y="1813" width="3.3" height="15.0" fill="rgb(217,159,15)" rx="2" ry="2" />
<text  x="820.36" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="757.3" y="1669" width="0.2" height="15.0" fill="rgb(205,178,51)" rx="2" ry="2" />
<text  x="760.27" y="1679.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="205.0" y="1909" width="0.2" height="15.0" fill="rgb(246,27,30)" rx="2" ry="2" />
<text  x="208.02" y="1919.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::operator== (2 samples, 0.04%)</title><rect x="680.2" y="1781" width="0.5" height="15.0" fill="rgb(243,91,43)" rx="2" ry="2" />
<text  x="683.23" y="1791.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (2 samples, 0.04%)</title><rect x="138.8" y="1861" width="0.4" height="15.0" fill="rgb(243,187,26)" rx="2" ry="2" />
<text  x="141.76" y="1871.5" ></text>
</g>
<g >
<title>CalcPSTScore (1 samples, 0.02%)</title><rect x="21.4" y="1925" width="0.3" height="15.0" fill="rgb(247,155,39)" rx="2" ry="2" />
<text  x="24.45" y="1935.5" ></text>
</g>
<g >
<title>all (5,361 samples, 100%)</title><rect x="10.0" y="2085" width="1180.0" height="15.0" fill="rgb(211,35,45)" rx="2" ry="2" />
<text  x="13.00" y="2095.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="695.4" y="1797" width="0.2" height="15.0" fill="rgb(248,74,4)" rx="2" ry="2" />
<text  x="698.42" y="1807.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (1 samples, 0.02%)</title><rect x="951.8" y="293" width="0.3" height="15.0" fill="rgb(219,112,25)" rx="2" ry="2" />
<text  x="954.84" y="303.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (2 samples, 0.04%)</title><rect x="30.9" y="1845" width="0.5" height="15.0" fill="rgb(210,187,22)" rx="2" ry="2" />
<text  x="33.91" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (2 samples, 0.04%)</title><rect x="741.4" y="1781" width="0.5" height="15.0" fill="rgb(210,84,16)" rx="2" ry="2" />
<text  x="744.42" y="1791.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.04%)</title><rect x="671.0" y="1813" width="0.4" height="15.0" fill="rgb(220,149,1)" rx="2" ry="2" />
<text  x="673.98" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (17 samples, 0.32%)</title><rect x="591.1" y="1813" width="3.7" height="15.0" fill="rgb(247,156,49)" rx="2" ry="2" />
<text  x="594.09" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (28 samples, 0.52%)</title><rect x="185.0" y="1877" width="6.1" height="15.0" fill="rgb(225,68,3)" rx="2" ry="2" />
<text  x="187.99" y="1887.5" ></text>
</g>
<g >
<title>CalcPSTScore (1 samples, 0.02%)</title><rect x="380.4" y="1781" width="0.3" height="15.0" fill="rgb(236,224,42)" rx="2" ry="2" />
<text  x="383.44" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (1 samples, 0.02%)</title><rect x="804.6" y="1797" width="0.2" height="15.0" fill="rgb(223,69,4)" rx="2" ry="2" />
<text  x="807.59" y="1807.5" ></text>
</g>
<g >
<title>CalcPSTScore (9 samples, 0.17%)</title><rect x="36.0" y="1877" width="2.0" height="15.0" fill="rgb(230,2,2)" rx="2" ry="2" />
<text  x="38.97" y="1887.5" ></text>
</g>
<g >
<title>CalcPSTScore (1 samples, 0.02%)</title><rect x="23.9" y="1861" width="0.2" height="15.0" fill="rgb(236,222,37)" rx="2" ry="2" />
<text  x="26.87" y="1871.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="734.2" y="1781" width="0.2" height="15.0" fill="rgb(223,183,21)" rx="2" ry="2" />
<text  x="737.16" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (1 samples, 0.02%)</title><rect x="619.7" y="1877" width="0.2" height="15.0" fill="rgb(230,146,4)" rx="2" ry="2" />
<text  x="622.70" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="844.4" y="1797" width="0.3" height="15.0" fill="rgb(213,130,8)" rx="2" ry="2" />
<text  x="847.43" y="1807.5" ></text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (3 samples, 0.06%)</title><rect x="680.0" y="1797" width="0.7" height="15.0" fill="rgb(253,62,23)" rx="2" ry="2" />
<text  x="683.01" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.04%)</title><rect x="766.7" y="1717" width="0.5" height="15.0" fill="rgb(249,88,38)" rx="2" ry="2" />
<text  x="769.73" y="1727.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.04%)</title><rect x="93.0" y="1845" width="0.4" height="15.0" fill="rgb(246,153,54)" rx="2" ry="2" />
<text  x="95.98" y="1855.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, true&gt; &gt;::construct&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="850.8" y="1797" width="0.2" height="15.0" fill="rgb(236,164,12)" rx="2" ry="2" />
<text  x="853.81" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (2 samples, 0.04%)</title><rect x="709.1" y="1813" width="0.4" height="15.0" fill="rgb(219,134,3)" rx="2" ry="2" />
<text  x="712.06" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="383.3" y="1765" width="0.2" height="15.0" fill="rgb(220,10,42)" rx="2" ry="2" />
<text  x="386.30" y="1775.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="238.3" y="1845" width="0.2" height="15.0" fill="rgb(220,123,5)" rx="2" ry="2" />
<text  x="241.25" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::ReturnToAllocator (2 samples, 0.04%)</title><rect x="1141.6" y="2053" width="0.4" height="15.0" fill="rgb(241,216,51)" rx="2" ry="2" />
<text  x="1144.58" y="2063.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (1 samples, 0.02%)</title><rect x="50.9" y="1861" width="0.3" height="15.0" fill="rgb(225,18,11)" rx="2" ry="2" />
<text  x="53.94" y="1871.5" ></text>
</g>
<g >
<title>GetPieceType (1 samples, 0.02%)</title><rect x="631.4" y="1877" width="0.2" height="15.0" fill="rgb(253,181,18)" rx="2" ry="2" />
<text  x="634.37" y="1887.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.06%)</title><rect x="752.6" y="1765" width="0.7" height="15.0" fill="rgb(207,3,44)" rx="2" ry="2" />
<text  x="755.65" y="1775.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (6 samples, 0.11%)</title><rect x="376.9" y="1813" width="1.3" height="15.0" fill="rgb(210,221,28)" rx="2" ry="2" />
<text  x="379.92" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (3 samples, 0.06%)</title><rect x="613.8" y="1877" width="0.6" height="15.0" fill="rgb(225,147,53)" rx="2" ry="2" />
<text  x="616.76" y="1887.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="670.8" y="1813" width="0.2" height="15.0" fill="rgb(245,152,42)" rx="2" ry="2" />
<text  x="673.76" y="1823.5" ></text>
</g>
<g >
<title>IsCapture (2 samples, 0.04%)</title><rect x="40.2" y="1861" width="0.4" height="15.0" fill="rgb(246,189,10)" rx="2" ry="2" />
<text  x="43.15" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (1 samples, 0.02%)</title><rect x="303.6" y="1765" width="0.2" height="15.0" fill="rgb(209,203,6)" rx="2" ry="2" />
<text  x="306.62" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (91 samples, 1.70%)</title><rect x="943.9" y="1861" width="20.0" height="15.0" fill="rgb(247,51,41)" rx="2" ry="2" />
<text  x="946.92" y="1871.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="925.9" y="1861" width="0.2" height="15.0" fill="rgb(236,72,44)" rx="2" ry="2" />
<text  x="928.87" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (19 samples, 0.35%)</title><rect x="711.0" y="1781" width="4.2" height="15.0" fill="rgb(222,5,42)" rx="2" ry="2" />
<text  x="714.04" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (79 samples, 1.47%)</title><rect x="943.9" y="1669" width="17.4" height="15.0" fill="rgb(226,97,16)" rx="2" ry="2" />
<text  x="946.92" y="1679.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (8 samples, 0.15%)</title><rect x="380.4" y="1797" width="1.8" height="15.0" fill="rgb(228,104,15)" rx="2" ry="2" />
<text  x="383.44" y="1807.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="764.8" y="1717" width="0.2" height="15.0" fill="rgb(254,174,45)" rx="2" ry="2" />
<text  x="767.75" y="1727.5" ></text>
</g>
<g >
<title>lczero::Position::Position (6 samples, 0.11%)</title><rect x="269.5" y="1829" width="1.3" height="15.0" fill="rgb(219,37,22)" rx="2" ry="2" />
<text  x="272.51" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (1,770 samples, 33.02%)</title><rect x="222.8" y="1893" width="389.6" height="15.0" fill="rgb(254,204,31)" rx="2" ry="2" />
<text  x="225.84" y="1903.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>TSearchStrategy::MakeMove (4 samples, 0.07%)</title><rect x="20.3" y="1989" width="0.9" height="15.0" fill="rgb(254,47,31)" rx="2" ry="2" />
<text  x="23.35" y="1999.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (1 samples, 0.02%)</title><rect x="33.1" y="1829" width="0.2" height="15.0" fill="rgb(229,9,19)" rx="2" ry="2" />
<text  x="36.11" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (4 samples, 0.07%)</title><rect x="640.6" y="1829" width="0.9" height="15.0" fill="rgb(231,222,7)" rx="2" ry="2" />
<text  x="643.61" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="200.6" y="1845" width="0.2" height="15.0" fill="rgb(212,54,2)" rx="2" ry="2" />
<text  x="203.61" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="633.1" y="1845" width="0.2" height="15.0" fill="rgb(213,3,12)" rx="2" ry="2" />
<text  x="636.13" y="1855.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (2 samples, 0.04%)</title><rect x="924.1" y="1829" width="0.4" height="15.0" fill="rgb(240,200,17)" rx="2" ry="2" />
<text  x="927.11" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (1 samples, 0.02%)</title><rect x="748.9" y="1765" width="0.2" height="15.0" fill="rgb(231,7,34)" rx="2" ry="2" />
<text  x="751.90" y="1775.5" ></text>
</g>
<g >
<title>custom_epd::test_method (1,933 samples, 36.06%)</title><rect x="205.5" y="2005" width="425.4" height="15.0" fill="rgb(235,64,7)" rx="2" ry="2" />
<text  x="208.46" y="2015.5" >custom_epd::test_method</text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="750.2" y="1765" width="0.5" height="15.0" fill="rgb(232,51,27)" rx="2" ry="2" />
<text  x="753.22" y="1775.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (1 samples, 0.02%)</title><rect x="385.5" y="1781" width="0.2" height="15.0" fill="rgb(242,208,49)" rx="2" ry="2" />
<text  x="388.50" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (61 samples, 1.14%)</title><rect x="943.9" y="997" width="13.4" height="15.0" fill="rgb(244,15,2)" rx="2" ry="2" />
<text  x="946.92" y="1007.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (6 samples, 0.11%)</title><rect x="33.6" y="1877" width="1.3" height="15.0" fill="rgb(215,34,45)" rx="2" ry="2" />
<text  x="36.55" y="1887.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="642.2" y="1829" width="0.2" height="15.0" fill="rgb(245,155,50)" rx="2" ry="2" />
<text  x="645.15" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="637.5" y="1829" width="0.2" height="15.0" fill="rgb(215,224,16)" rx="2" ry="2" />
<text  x="640.53" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (11 samples, 0.21%)</title><rect x="846.4" y="1829" width="2.4" height="15.0" fill="rgb(224,32,50)" rx="2" ry="2" />
<text  x="849.41" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="753.5" y="1749" width="0.2" height="15.0" fill="rgb(209,176,36)" rx="2" ry="2" />
<text  x="756.53" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (2 samples, 0.04%)</title><rect x="268.8" y="1797" width="0.5" height="15.0" fill="rgb(251,27,46)" rx="2" ry="2" />
<text  x="271.85" y="1807.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (1 samples, 0.02%)</title><rect x="931.6" y="1781" width="0.2" height="15.0" fill="rgb(248,127,51)" rx="2" ry="2" />
<text  x="934.59" y="1791.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.04%)</title><rect x="257.8" y="1861" width="0.5" height="15.0" fill="rgb(238,117,48)" rx="2" ry="2" />
<text  x="260.84" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.04%)</title><rect x="635.3" y="1845" width="0.5" height="15.0" fill="rgb(254,159,1)" rx="2" ry="2" />
<text  x="638.33" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (4 samples, 0.07%)</title><rect x="116.8" y="1813" width="0.8" height="15.0" fill="rgb(220,209,28)" rx="2" ry="2" />
<text  x="119.75" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (4 samples, 0.07%)</title><rect x="83.3" y="1813" width="0.9" height="15.0" fill="rgb(205,214,4)" rx="2" ry="2" />
<text  x="86.30" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_insert_node (1 samples, 0.02%)</title><rect x="930.7" y="1861" width="0.2" height="15.0" fill="rgb(209,0,15)" rx="2" ry="2" />
<text  x="933.71" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (1 samples, 0.02%)</title><rect x="953.6" y="453" width="0.2" height="15.0" fill="rgb(211,144,23)" rx="2" ry="2" />
<text  x="956.60" y="463.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1 samples, 0.02%)</title><rect x="789.0" y="1829" width="0.2" height="15.0" fill="rgb(239,166,35)" rx="2" ry="2" />
<text  x="791.96" y="1839.5" ></text>
</g>
<g >
<title>lczero::Position::Position (73 samples, 1.36%)</title><rect x="533.9" y="1861" width="16.0" height="15.0" fill="rgb(213,181,22)" rx="2" ry="2" />
<text  x="536.86" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="938.0" y="1845" width="0.2" height="15.0" fill="rgb(223,53,17)" rx="2" ry="2" />
<text  x="940.98" y="1855.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="193.6" y="1861" width="0.2" height="15.0" fill="rgb(214,15,13)" rx="2" ry="2" />
<text  x="196.57" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (45 samples, 0.84%)</title><rect x="943.9" y="469" width="9.9" height="15.0" fill="rgb(216,220,13)" rx="2" ry="2" />
<text  x="946.92" y="479.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (1 samples, 0.02%)</title><rect x="963.7" y="1829" width="0.2" height="15.0" fill="rgb(250,189,30)" rx="2" ry="2" />
<text  x="966.73" y="1839.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.06%)</title><rect x="748.5" y="1797" width="0.6" height="15.0" fill="rgb(216,197,51)" rx="2" ry="2" />
<text  x="751.46" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (5 samples, 0.09%)</title><rect x="233.9" y="1861" width="1.1" height="15.0" fill="rgb(233,101,19)" rx="2" ry="2" />
<text  x="236.85" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="637.3" y="1797" width="0.2" height="15.0" fill="rgb(224,114,9)" rx="2" ry="2" />
<text  x="640.31" y="1807.5" ></text>
</g>
<g >
<title>CalcPSTScore (7 samples, 0.13%)</title><rect x="44.1" y="1861" width="1.6" height="15.0" fill="rgb(236,151,54)" rx="2" ry="2" />
<text  x="47.12" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (14 samples, 0.26%)</title><rect x="779.3" y="1781" width="3.1" height="15.0" fill="rgb(252,216,19)" rx="2" ry="2" />
<text  x="782.28" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (1 samples, 0.02%)</title><rect x="639.7" y="1829" width="0.2" height="15.0" fill="rgb(220,108,32)" rx="2" ry="2" />
<text  x="642.73" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (82 samples, 1.53%)</title><rect x="943.9" y="1733" width="18.1" height="15.0" fill="rgb(214,25,16)" rx="2" ry="2" />
<text  x="946.92" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1 samples, 0.02%)</title><rect x="635.5" y="1797" width="0.3" height="15.0" fill="rgb(244,193,37)" rx="2" ry="2" />
<text  x="638.55" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 1.90%)</title><rect x="943.9" y="2021" width="22.5" height="15.0" fill="rgb(223,32,20)" rx="2" ry="2" />
<text  x="946.92" y="2031.5" >[..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::__detail::_Select1st, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="378.0" y="1749" width="0.2" height="15.0" fill="rgb(205,136,49)" rx="2" ry="2" />
<text  x="381.02" y="1759.5" ></text>
</g>
<g >
<title>lczero::Position::Position (1 samples, 0.02%)</title><rect x="634.9" y="1845" width="0.2" height="15.0" fill="rgb(249,27,21)" rx="2" ry="2" />
<text  x="637.89" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (1 samples, 0.02%)</title><rect x="955.8" y="757" width="0.2" height="15.0" fill="rgb(235,124,2)" rx="2" ry="2" />
<text  x="958.80" y="767.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (1 samples, 0.02%)</title><rect x="700.0" y="1797" width="0.3" height="15.0" fill="rgb(229,215,36)" rx="2" ry="2" />
<text  x="703.04" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (2 samples, 0.04%)</title><rect x="452.9" y="1845" width="0.4" height="15.0" fill="rgb(244,186,30)" rx="2" ry="2" />
<text  x="455.86" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (2 samples, 0.04%)</title><rect x="235.6" y="1829" width="0.5" height="15.0" fill="rgb(213,217,16)" rx="2" ry="2" />
<text  x="238.61" y="1839.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (1 samples, 0.02%)</title><rect x="925.0" y="1845" width="0.2" height="15.0" fill="rgb(216,153,49)" rx="2" ry="2" />
<text  x="927.99" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="849.5" y="1829" width="0.2" height="15.0" fill="rgb(220,1,30)" rx="2" ry="2" />
<text  x="852.49" y="1839.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (1 samples, 0.02%)</title><rect x="756.6" y="1749" width="0.2" height="15.0" fill="rgb(219,147,22)" rx="2" ry="2" />
<text  x="759.61" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (2 samples, 0.04%)</title><rect x="30.5" y="1861" width="0.4" height="15.0" fill="rgb(243,150,53)" rx="2" ry="2" />
<text  x="33.47" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (3 samples, 0.06%)</title><rect x="691.5" y="1797" width="0.6" height="15.0" fill="rgb(236,201,5)" rx="2" ry="2" />
<text  x="694.45" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (34 samples, 0.63%)</title><rect x="943.9" y="213" width="7.5" height="15.0" fill="rgb(215,33,36)" rx="2" ry="2" />
<text  x="946.92" y="223.5" ></text>
</g>
<g >
<title>CalcPSTScore (5 samples, 0.09%)</title><rect x="218.0" y="1877" width="1.1" height="15.0" fill="rgb(229,61,36)" rx="2" ry="2" />
<text  x="221.00" y="1887.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (1 samples, 0.02%)</title><rect x="760.3" y="1669" width="0.3" height="15.0" fill="rgb(234,179,4)" rx="2" ry="2" />
<text  x="763.35" y="1679.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (1 samples, 0.02%)</title><rect x="24.1" y="1813" width="0.2" height="15.0" fill="rgb(206,79,17)" rx="2" ry="2" />
<text  x="27.09" y="1823.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (1 samples, 0.02%)</title><rect x="755.7" y="1749" width="0.2" height="15.0" fill="rgb(205,92,2)" rx="2" ry="2" />
<text  x="758.73" y="1759.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (1 samples, 0.02%)</title><rect x="451.1" y="1845" width="0.2" height="15.0" fill="rgb(249,106,16)" rx="2" ry="2" />
<text  x="454.10" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (75 samples, 1.40%)</title><rect x="943.9" y="1541" width="16.5" height="15.0" fill="rgb(233,186,11)" rx="2" ry="2" />
<text  x="946.92" y="1551.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (9 samples, 0.17%)</title><rect x="728.7" y="1813" width="1.9" height="15.0" fill="rgb(235,104,21)" rx="2" ry="2" />
<text  x="731.65" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (4 samples, 0.07%)</title><rect x="518.7" y="1813" width="0.9" height="15.0" fill="rgb(233,185,32)" rx="2" ry="2" />
<text  x="521.67" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (66 samples, 1.23%)</title><rect x="822.4" y="1829" width="14.5" height="15.0" fill="rgb(229,151,46)" rx="2" ry="2" />
<text  x="825.42" y="1839.5" ></text>
</g>
<g >
<title>__asan::RZSize2Log (18 samples, 0.34%)</title><rect x="1124.8" y="2053" width="4.0" height="15.0" fill="rgb(210,72,51)" rx="2" ry="2" />
<text  x="1127.85" y="2063.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (3 samples, 0.06%)</title><rect x="764.5" y="1749" width="0.7" height="15.0" fill="rgb(231,182,41)" rx="2" ry="2" />
<text  x="767.53" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (1 samples, 0.02%)</title><rect x="205.9" y="1877" width="0.2" height="15.0" fill="rgb(234,12,5)" rx="2" ry="2" />
<text  x="208.90" y="1887.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (1 samples, 0.02%)</title><rect x="631.8" y="1877" width="0.2" height="15.0" fill="rgb(253,62,40)" rx="2" ry="2" />
<text  x="634.81" y="1887.5" ></text>
</g>
<g >
<title>TTranspositionTable::Insert (1 samples, 0.02%)</title><rect x="202.8" y="1909" width="0.2" height="15.0" fill="rgb(248,0,52)" rx="2" ry="2" />
<text  x="205.81" y="1919.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.04%)</title><rect x="635.3" y="1829" width="0.5" height="15.0" fill="rgb(220,83,40)" rx="2" ry="2" />
<text  x="638.33" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (1 samples, 0.02%)</title><rect x="769.2" y="1765" width="0.2" height="15.0" fill="rgb(254,140,44)" rx="2" ry="2" />
<text  x="772.15" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (9 samples, 0.17%)</title><rect x="235.2" y="1845" width="2.0" height="15.0" fill="rgb(237,149,37)" rx="2" ry="2" />
<text  x="238.17" y="1855.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (1 samples, 0.02%)</title><rect x="931.4" y="1797" width="0.2" height="15.0" fill="rgb(253,170,25)" rx="2" ry="2" />
<text  x="934.37" y="1807.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.04%)</title><rect x="638.0" y="1861" width="0.4" height="15.0" fill="rgb(219,52,38)" rx="2" ry="2" />
<text  x="640.97" y="1871.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::at (2 samples, 0.04%)</title><rect x="275.7" y="1829" width="0.4" height="15.0" fill="rgb(229,56,8)" rx="2" ry="2" />
<text  x="278.67" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (1 samples, 0.02%)</title><rect x="763.4" y="1717" width="0.3" height="15.0" fill="rgb(216,0,17)" rx="2" ry="2" />
<text  x="766.43" y="1727.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (1 samples, 0.02%)</title><rect x="197.1" y="1877" width="0.2" height="15.0" fill="rgb(214,0,12)" rx="2" ry="2" />
<text  x="200.09" y="1887.5" ></text>
</g>
<g >
<title>lczero::Position::Position (3 samples, 0.06%)</title><rect x="268.6" y="1813" width="0.7" height="15.0" fill="rgb(249,11,3)" rx="2" ry="2" />
<text  x="271.63" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="1027.1" y="2021" width="0.2" height="15.0" fill="rgb(251,181,33)" rx="2" ry="2" />
<text  x="1030.12" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (71 samples, 1.32%)</title><rect x="943.9" y="1429" width="15.6" height="15.0" fill="rgb(234,166,40)" rx="2" ry="2" />
<text  x="946.92" y="1439.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;lczero::Position, std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, std::__detail::_Select1st, TTranspositionTable::TPositionEqualFn, TTranspositionTable::TPositionHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="613.1" y="1861" width="0.2" height="15.0" fill="rgb(221,84,31)" rx="2" ry="2" />
<text  x="616.10" y="1871.5" ></text>
</g>
</g>
</svg>
